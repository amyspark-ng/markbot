{
    "types": {
        "kaboom": [
            {
                "kind": "FunctionDeclaration",
                "name": "kaboom",
                "parameters": [{ "kind": "Parameter", "name": "options", "type": { "kind": "TypeReference", "typeName": "KaboomOpt" }, "questionToken": true }],
                "type": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                "jsDoc": {
                    "doc": "Initialize kaboom context. The starting point of all kaboom games.",
                    "tags": {
                        "example": [
                            "```js\n// Start kaboom with default options (will create a fullscreen canvas under <body>)\nkaboom()\n\n// Init with some options (check out #KaboomOpt for full options list)\nkaboom({\n    width: 320,\n    height: 240,\n    font: \"sinko\",\n    canvas: document.querySelector(\"#mycanvas\"),\n    background: [ 0, 0, 255, ],\n})\n\n// All kaboom functions are imported to global after calling kaboom()\nadd()\nonUpdate()\nonKeyPress()\nvec2()\n\n// If you want to prevent kaboom from importing all functions to global and use a context handle for all kaboom functions\nconst k = kaboom({ global: false })\n\nk.add(...)\nk.onUpdate(...)\nk.onKeyPress(...)\nk.vec2(...)\n```"
                        ]
                    }
                }
            }
        ],
        "KaboomCtx": [
            {
                "kind": "InterfaceDeclaration",
                "name": "KaboomCtx",
                "members": {
                    "add": [
                        {
                            "kind": "MethodSignature",
                            "name": "add",
                            "typeParameters": [{ "kind": "TypeParameter", "name": "T" }],
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "comps",
                                    "type": { "kind": "TypeReference", "typeName": "CompList", "typeArguments": [{ "kind": "TypeReference", "typeName": "T" }] }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "GameObj", "typeArguments": [{ "kind": "TypeReference", "typeName": "T" }] },
                            "jsDoc": {
                                "doc": "Assemble a game object from a list of components, and add it to the game",
                                "tags": {
                                    "returns": ["The added game object that contains all properties and methods each component offers."],
                                    "section": ["Game Obj"],
                                    "example": [
                                        "```js\nconst player = add([\n    // List of components, each offers a set of functionalities\n    sprite(\"mark\"),\n    pos(100, 200),\n    area(),\n    body(),\n    health(8),\n    doubleJump(),\n    // Plain strings are tags, a quicker way to let us define behaviors for a group\n    \"player\",\n    \"friendly\",\n    // Components are just plain objects, you can pass an object literal as a component.\n    {\n        dir: LEFT,\n        dead: false,\n        speed: 240,\n    },\n])\n\n// .jump is provided by body()\nplayer.jump()\n\n// .moveTo is provided by pos()\nplayer.moveTo(300, 200)\n\n// .onUpdate() is on every game object, it registers an event that runs every frame\nplayer.onUpdate(() => {\n    // .move() is provided by pos()\n    player.move(player.dir.scale(player.speed))\n})\n\n// .onCollide is provided by area()\nplayer.onCollide(\"tree\", () => {\n    destroy(player)\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "get": [
                        {
                            "kind": "MethodSignature",
                            "name": "get",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "tag",
                                    "type": {
                                        "kind": "UnionType",
                                        "types": [
                                            { "kind": "TypeReference", "typeName": "Tag" },
                                            { "kind": "ArrayType", "elementType": { "kind": "TypeReference", "typeName": "Tag" } }
                                        ]
                                    },
                                    "questionToken": true
                                }
                            ],
                            "type": { "kind": "ArrayType", "elementType": { "kind": "TypeReference", "typeName": "GameObj" } },
                            "jsDoc": {
                                "doc": "Get a list of all game objs with certain tag.",
                                "tags": {
                                    "example": [
                                        "```js\n// get a list of all game objs with tag \"bomb\"\nconst allBombs = get(\"bomb\")\n\n// without args returns all current objs in the game\nconst allObjs = get()\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "every": [
                        {
                            "kind": "MethodSignature",
                            "name": "every",
                            "typeParameters": [{ "kind": "TypeParameter", "name": "T" }],
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "tag",
                                    "type": {
                                        "kind": "UnionType",
                                        "types": [
                                            { "kind": "TypeReference", "typeName": "Tag" },
                                            { "kind": "ArrayType", "elementType": { "kind": "TypeReference", "typeName": "Tag" } }
                                        ]
                                    }
                                },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [{ "kind": "Parameter", "name": "obj", "type": { "kind": "TypeReference", "typeName": "GameObj" } }],
                                        "type": { "kind": "TypeReference", "typeName": "T" }
                                    }
                                }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": {
                                "doc": "Run callback on every game obj with certain tag.",
                                "tags": { "example": ["```js\n// Destroy all game obj with tag \"fruit\"\nevery(\"fruit\", destroy)\n```"] }
                            }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "every",
                            "typeParameters": [{ "kind": "TypeParameter", "name": "T" }],
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [{ "kind": "Parameter", "name": "obj", "type": { "kind": "TypeReference", "typeName": "GameObj" } }],
                                        "type": { "kind": "TypeReference", "typeName": "T" }
                                    }
                                }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Run callback on every game obj.", "tags": { "example": ["```js\nevery((obj) => {})\n```"] } }
                        }
                    ],
                    "revery": [
                        {
                            "kind": "MethodSignature",
                            "name": "revery",
                            "typeParameters": [{ "kind": "TypeParameter", "name": "T" }],
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "tag",
                                    "type": {
                                        "kind": "UnionType",
                                        "types": [
                                            { "kind": "TypeReference", "typeName": "Tag" },
                                            { "kind": "ArrayType", "elementType": { "kind": "TypeReference", "typeName": "Tag" } }
                                        ]
                                    }
                                },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [{ "kind": "Parameter", "name": "obj", "type": { "kind": "TypeReference", "typeName": "GameObj" } }],
                                        "type": { "kind": "TypeReference", "typeName": "T" }
                                    }
                                }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Run callback on every game obj with certain tag in reverse order.", "tags": {} }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "revery",
                            "typeParameters": [{ "kind": "TypeParameter", "name": "T" }],
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [{ "kind": "Parameter", "name": "obj", "type": { "kind": "TypeReference", "typeName": "GameObj" } }],
                                        "type": { "kind": "TypeReference", "typeName": "T" }
                                    }
                                }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Run callback on every game obj in reverse order.", "tags": {} }
                        }
                    ],
                    "readd": [
                        {
                            "kind": "MethodSignature",
                            "name": "readd",
                            "parameters": [{ "kind": "Parameter", "name": "obj", "type": { "kind": "TypeReference", "typeName": "GameObj" } }],
                            "type": { "kind": "TypeReference", "typeName": "GameObj" },
                            "jsDoc": {
                                "doc": "Remove and re-add the game obj.",
                                "tags": { "example": ["```js\n// mainly useful when you want to make something to draw on top\nreadd(froggy)\n```"] }
                            }
                        }
                    ],
                    "destroy": [
                        {
                            "kind": "MethodSignature",
                            "name": "destroy",
                            "parameters": [{ "kind": "Parameter", "name": "obj", "type": { "kind": "TypeReference", "typeName": "GameObj" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": {
                                "doc": "Remove the game obj.",
                                "tags": {
                                    "example": [
                                        "```js\n// every time froggy collides with anything with tag \"fruit\", remove it\nfroggy.onCollide(\"fruit\", (fruit) => {\n    destroy(fruit)\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "destroyAll": [
                        {
                            "kind": "MethodSignature",
                            "name": "destroyAll",
                            "parameters": [{ "kind": "Parameter", "name": "tag", "type": { "kind": "TypeReference", "typeName": "Tag" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": {
                                "doc": "Remove all game objs with certain tag.",
                                "tags": {
                                    "example": [
                                        "```js\n// destroy all objects with tag \"bomb\" when you click one\nonClick(\"bomb\", () => {\n    destroyAll(\"bomb\")\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "pos": [
                        {
                            "kind": "MethodSignature",
                            "name": "pos",
                            "parameters": [
                                { "kind": "Parameter", "name": "x", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "y", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "PosComp" },
                            "jsDoc": {
                                "doc": "Position",
                                "tags": {
                                    "section": ["Components"],
                                    "example": [
                                        "```js\n// This game object will draw a \"froggy\" sprite at (100, 200)\nadd([\n    pos(100, 200),\n    sprite(\"froggy\"),\n])\n```"
                                    ]
                                }
                            }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "pos",
                            "parameters": [{ "kind": "Parameter", "name": "xy", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "TypeReference", "typeName": "PosComp" }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "pos",
                            "parameters": [{ "kind": "Parameter", "name": "p", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "TypeReference", "typeName": "PosComp" }
                        },
                        { "kind": "MethodSignature", "name": "pos", "parameters": [], "type": { "kind": "TypeReference", "typeName": "PosComp" } }
                    ],
                    "scale": [
                        {
                            "kind": "MethodSignature",
                            "name": "scale",
                            "parameters": [
                                { "kind": "Parameter", "name": "x", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "y", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "ScaleComp" },
                            "jsDoc": { "doc": "Scale.", "tags": {} }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "scale",
                            "parameters": [{ "kind": "Parameter", "name": "xy", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "TypeReference", "typeName": "ScaleComp" }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "scale",
                            "parameters": [{ "kind": "Parameter", "name": "s", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "TypeReference", "typeName": "ScaleComp" }
                        },
                        { "kind": "MethodSignature", "name": "scale", "parameters": [], "type": { "kind": "TypeReference", "typeName": "ScaleComp" } }
                    ],
                    "rotate": [
                        {
                            "kind": "MethodSignature",
                            "name": "rotate",
                            "parameters": [{ "kind": "Parameter", "name": "a", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "TypeReference", "typeName": "RotateComp" },
                            "jsDoc": { "doc": "Rotation (in degrees). (This doesn't work with the area() collider yet)", "tags": {} }
                        }
                    ],
                    "color": [
                        {
                            "kind": "MethodSignature",
                            "name": "color",
                            "parameters": [
                                { "kind": "Parameter", "name": "r", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "g", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "b", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "ColorComp" },
                            "jsDoc": {
                                "doc": "Sets color (rgb 0-255).",
                                "tags": { "example": ["```js\n// blue frog\nadd([\n    sprite(\"froggy\"),\n    color(0, 0, 255)\n])\n```"] }
                            }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "color",
                            "parameters": [{ "kind": "Parameter", "name": "c", "type": { "kind": "TypeReference", "typeName": "Color" } }],
                            "type": { "kind": "TypeReference", "typeName": "ColorComp" }
                        },
                        { "kind": "MethodSignature", "name": "color", "parameters": [], "type": { "kind": "TypeReference", "typeName": "ColorComp" } }
                    ],
                    "opacity": [
                        {
                            "kind": "MethodSignature",
                            "name": "opacity",
                            "parameters": [{ "kind": "Parameter", "name": "o", "type": { "kind": "NumberKeyword" }, "questionToken": true }],
                            "type": { "kind": "TypeReference", "typeName": "OpacityComp" },
                            "jsDoc": { "doc": "Sets opacity (0.0 - 1.0).", "tags": {} }
                        }
                    ],
                    "sprite": [
                        {
                            "kind": "MethodSignature",
                            "name": "sprite",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "spr",
                                    "type": {
                                        "kind": "UnionType",
                                        "types": [{ "kind": "StringKeyword" }, { "kind": "TypeReference", "typeName": "SpriteData" }]
                                    }
                                },
                                {
                                    "kind": "Parameter",
                                    "name": "options",
                                    "type": { "kind": "TypeReference", "typeName": "SpriteCompOpt" },
                                    "questionToken": true
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "SpriteComp" },
                            "jsDoc": {
                                "doc": "Render as a sprite.",
                                "tags": {
                                    "example": [
                                        "```js\n// minimal setup\nadd([\n    sprite(\"froggy\"),\n])\n\n// with options\nconst froggy = add([\n    sprite(\"froggy\", {\n        // start with animation \"idle\"\n        anim: \"idle\",\n    }),\n])\n\n// play / stop an anim\nfroggy.play(\"jump\")\nfroggy.stop()\n\n// manually setting a frame\nfroggy.frame = 3\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "text": [
                        {
                            "kind": "MethodSignature",
                            "name": "text",
                            "parameters": [
                                { "kind": "Parameter", "name": "txt", "type": { "kind": "StringKeyword" } },
                                {
                                    "kind": "Parameter",
                                    "name": "options",
                                    "type": { "kind": "TypeReference", "typeName": "TextCompOpt" },
                                    "questionToken": true
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "TextComp" },
                            "jsDoc": {
                                "doc": "Render as text.",
                                "tags": {
                                    "example": [
                                        "```js\n// a simple score counter\nconst score = add([\n    text(\"Score: 0\"),\n    pos(24, 24),\n    { value: 0 },\n])\n\nplayer.onCollide(\"coin\", () => {\n    score.value += 1\n    score.text = \"Score:\" + score.value\n})\n\n// with options\nadd([\n    pos(24, 24),\n    text(\"ohhi\", {\n        size: 48, // 48 pixels tall\n        width: 320, // it'll wrap to next line when width exceeds this value\n        font: \"sink\", // there're 4 built-in fonts: \"apl386\", \"apl386o\", \"sink\", and \"sinko\"\n    }),\n])\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "rect": [
                        {
                            "kind": "MethodSignature",
                            "name": "rect",
                            "parameters": [
                                { "kind": "Parameter", "name": "w", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "h", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "RectComp" },
                            "jsDoc": {
                                "doc": "Render as a rectangle.",
                                "tags": {
                                    "example": [
                                        "```js\n// i don't know, could be an obstacle or something\nadd([\n    pos(80, 120),\n    rect(20, 40),\n    outline(4),\n    area(),\n])\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "circle": [
                        {
                            "kind": "MethodSignature",
                            "name": "circle",
                            "parameters": [{ "kind": "Parameter", "name": "radius", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "TypeReference", "typeName": "CircleComp" },
                            "jsDoc": { "doc": "Render as a circle.", "tags": { "example": ["```js\nadd([\n    pos(80, 120),\n    circle(16),\n])\n```"] } }
                        }
                    ],
                    "uvquad": [
                        {
                            "kind": "MethodSignature",
                            "name": "uvquad",
                            "parameters": [
                                { "kind": "Parameter", "name": "w", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "h", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "UVQuadComp" },
                            "jsDoc": {
                                "doc": "Render as a UV quad.",
                                "tags": { "example": ["```js\nadd([\n    uvquad(width(), height()),\n    shader(\"spiral\"),\n])\n```"] }
                            }
                        }
                    ],
                    "area": [
                        {
                            "kind": "MethodSignature",
                            "name": "area",
                            "parameters": [],
                            "type": { "kind": "TypeReference", "typeName": "AreaComp" },
                            "jsDoc": {
                                "doc": "Generates collider area from shape and enables collision detection.",
                                "tags": {
                                    "example": [
                                        "```js\n// Automatically generate area information from the shape of render\nconst player = add([\n    sprite(\"froggy\"),\n    area(),\n])\n\n// Die if player collides with another game obj with tag \"tree\"\nplayer.onCollide(\"tree\", () => {\n    destroy(player)\n    go(\"lose\")\n})\n\n// Check for collision manually every frame instead of registering an event\nplayer.onUpdate(() => {\n    if (player.isColliding(bomb)) {\n        score += 1\n    }\n})\n```"
                                    ]
                                }
                            }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "area",
                            "parameters": [{ "kind": "Parameter", "name": "options", "type": { "kind": "TypeReference", "typeName": "AreaCompOpt" } }],
                            "type": { "kind": "TypeReference", "typeName": "AreaComp" },
                            "jsDoc": {
                                "doc": "Define collider area and enables collision detection.",
                                "tags": {
                                    "example": [
                                        "```js\nadd([\n    sprite(\"flower\"),\n    // Scale to 0.6 of the generated area\n    area({ scale: 0.6 }),\n    // If we want the area scale to be calculated from the center\n    origin(\"center\"),\n])\n\nadd([\n    sprite(\"froggy\"),\n    // Define custom area with width and height\n    area({ width: 20, height: 40. }),\n])\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "origin": [
                        {
                            "kind": "MethodSignature",
                            "name": "origin",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "o",
                                    "type": {
                                        "kind": "UnionType",
                                        "types": [{ "kind": "TypeReference", "typeName": "Origin" }, { "kind": "TypeReference", "typeName": "Vec2" }]
                                    }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "OriginComp" },
                            "jsDoc": {
                                "doc": "Origin point for render (default \"topleft\").",
                                "tags": {
                                    "example": [
                                        "```js\n// set origin to \"center\" so it'll rotate from center\nadd([\n    rect(40, 10),\n    rotate(45),\n    origin(\"center\"),\n])\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "layer": [
                        {
                            "kind": "MethodSignature",
                            "name": "layer",
                            "parameters": [{ "kind": "Parameter", "name": "l", "type": { "kind": "StringKeyword" } }],
                            "type": { "kind": "TypeReference", "typeName": "LayerComp" },
                            "jsDoc": { "doc": "Which layer this object belongs to.", "tags": {} }
                        }
                    ],
                    "z": [
                        {
                            "kind": "MethodSignature",
                            "name": "z",
                            "parameters": [{ "kind": "Parameter", "name": "z", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "TypeReference", "typeName": "ZComp" },
                            "jsDoc": {
                                "doc": "Determines the draw order for objects on the same layer. Object will be drawn on top if z value is bigger.",
                                "tags": {}
                            }
                        }
                    ],
                    "outline": [
                        {
                            "kind": "MethodSignature",
                            "name": "outline",
                            "parameters": [
                                { "kind": "Parameter", "name": "width", "type": { "kind": "NumberKeyword" }, "questionToken": true },
                                { "kind": "Parameter", "name": "color", "type": { "kind": "TypeReference", "typeName": "Color" }, "questionToken": true }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "OutlineComp" },
                            "jsDoc": { "doc": "Give obj an outline.", "tags": {} }
                        }
                    ],
                    "body": [
                        {
                            "kind": "MethodSignature",
                            "name": "body",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "options",
                                    "type": { "kind": "TypeReference", "typeName": "BodyCompOpt" },
                                    "questionToken": true
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "BodyComp" },
                            "jsDoc": {
                                "doc": "Physical body that responds to gravity. Requires \"area\" and \"pos\" comp. This also makes the object \"solid\".",
                                "tags": {
                                    "example": [
                                        "```js\n// froggy jumpy\nconst froggy = add([\n    sprite(\"froggy\"),\n    // body() requires \"pos\" and \"area\" component\n    pos(),\n    area(),\n    body(),\n])\n\n// when froggy is grounded, press space to jump\n// check out #BodyComp for more methods\nonKeyPress(\"space\", () => {\n    if (froggy.isGrounded()) {\n        froggy.jump()\n    }\n})\n\n// run something when froggy falls and hits a ground\nfroggy.onGround(() => {\n    debug.log(\"oh no!\")\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "solid": [
                        {
                            "kind": "MethodSignature",
                            "name": "solid",
                            "parameters": [],
                            "type": { "kind": "TypeReference", "typeName": "SolidComp" },
                            "jsDoc": {
                                "doc": "Make other objects cannot move pass. Requires \"area\" comp.",
                                "tags": {
                                    "example": [
                                        "```js\nadd([\n    sprite(\"rock\"),\n    pos(30, 120),\n    area(),\n    solid(),\n])\n\n// only do collision checking when a block is close to player for performance\nonUpdate(\"block\", (b) => {\n    b.solid = b.pos.dist(player.pos) <= 64\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "move": [
                        {
                            "kind": "MethodSignature",
                            "name": "move",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "direction",
                                    "type": { "kind": "UnionType", "types": [{ "kind": "NumberKeyword" }, { "kind": "TypeReference", "typeName": "Vec2" }] }
                                },
                                { "kind": "Parameter", "name": "speed", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "MoveComp" },
                            "jsDoc": {
                                "doc": "Move towards a direction infinitely, and destroys when it leaves game view. Requires \"pos\" comp.",
                                "tags": {
                                    "example": [
                                        "```js\n// enemy throwing feces at player\nconst projectile = add([\n    sprite(\"feces\"),\n    pos(enemy.pos),\n    area(),\n    move(player.pos.angle(enemy.pos), 1200),\n    cleanup(),\n])\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "outview": [
                        {
                            "kind": "MethodSignature",
                            "name": "outview",
                            "parameters": [
                                { "kind": "Parameter", "name": "opt", "type": { "kind": "TypeReference", "typeName": "OutviewCompOpt" }, "questionToken": true }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "OutviewComp" },
                            "jsDoc": {
                                "doc": "Control the behavior of object when it goes out of view.",
                                "tags": {
                                    "since": ["v2000.2"],
                                    "example": ["```js\nadd([\n    pos(1200, 80),\n    outview({ hide: true, pause: true }),\n])\n```"]
                                }
                            }
                        }
                    ],
                    "cleanup": [
                        {
                            "kind": "MethodSignature",
                            "name": "cleanup",
                            "parameters": [
                                { "kind": "Parameter", "name": "opt", "type": { "kind": "TypeReference", "typeName": "CleanupCompOpt" }, "questionToken": true }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "CleanupComp" },
                            "jsDoc": {
                                "doc": "destroy() the object if it goes out of screen. Optionally specify the amount of time it has to be off-screen before removal.",
                                "tags": {
                                    "example": [
                                        "```js\n// destroy when it leaves screen\nconst bullet = add([\n    pos(80, 80),\n    move(LEFT, 960),\n    cleanup(),\n])\n```"
                                    ]
                                }
                            }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "cleanup",
                            "parameters": [{ "kind": "Parameter", "name": "delay", "type": { "kind": "NumberKeyword" }, "questionToken": true }],
                            "type": { "kind": "TypeReference", "typeName": "CleanupComp" },
                            "jsDoc": { "tags": { "deprecated": ["v2000.2 Use cleanup() with optional CleanupCompOpt instead of single time argument."] } }
                        }
                    ],
                    "follow": [
                        {
                            "kind": "MethodSignature",
                            "name": "follow",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "obj",
                                    "type": {
                                        "kind": "UnionType",
                                        "types": [
                                            { "kind": "TypeReference", "typeName": "GameObj" },
                                            { "kind": "LiteralType", "literal": { "kind": "NullKeyword" } }
                                        ]
                                    }
                                },
                                { "kind": "Parameter", "name": "offset", "type": { "kind": "TypeReference", "typeName": "Vec2" }, "questionToken": true }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "FollowComp" },
                            "jsDoc": { "doc": "Follow another game obj's position.", "tags": {} }
                        }
                    ],
                    "shader": [
                        {
                            "kind": "MethodSignature",
                            "name": "shader",
                            "parameters": [{ "kind": "Parameter", "name": "id", "type": { "kind": "StringKeyword" } }],
                            "type": { "kind": "TypeReference", "typeName": "ShaderComp" },
                            "jsDoc": { "doc": "Custom shader.", "tags": {} }
                        }
                    ],
                    "timer": [
                        {
                            "kind": "MethodSignature",
                            "name": "timer",
                            "parameters": [
                                { "kind": "Parameter", "name": "n", "type": { "kind": "NumberKeyword" }, "questionToken": true },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } },
                                    "questionToken": true
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "TimerComp" },
                            "jsDoc": { "doc": "Run certain action after some time.", "tags": {} }
                        }
                    ],
                    "fixed": [
                        {
                            "kind": "MethodSignature",
                            "name": "fixed",
                            "parameters": [],
                            "type": { "kind": "TypeReference", "typeName": "FixedComp" },
                            "jsDoc": {
                                "doc": "Make object unaffected by camera or parent object transforms, and render at last.",
                                "tags": {
                                    "example": [
                                        "```js\n// this will be be fixed on top left and not affected by camera\nconst score = add([\n    text(0),\n    pos(12, 12),\n    fixed(),\n])\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "stay": [
                        {
                            "kind": "MethodSignature",
                            "name": "stay",
                            "parameters": [],
                            "type": { "kind": "TypeReference", "typeName": "StayComp" },
                            "jsDoc": {
                                "doc": "Don't get destroyed on scene switch.",
                                "tags": {
                                    "example": [
                                        "```js\nplayer.onCollide(\"bomb\", () => {\n    // spawn an explosion and switch scene, but don't destroy the explosion game obj on scene switch\n    add([\n        sprite(\"explosion\", { anim: \"burst\", }),\n        stay(),\n        lifespan(1),\n    ])\n    go(\"lose\", score)\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "health": [
                        {
                            "kind": "MethodSignature",
                            "name": "health",
                            "parameters": [{ "kind": "Parameter", "name": "hp", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "TypeReference", "typeName": "HealthComp" },
                            "jsDoc": {
                                "doc": "Handles health related logic and events.",
                                "tags": {
                                    "example": [
                                        "```js\nconst player = add([\n    health(3),\n])\n\nplayer.onCollide(\"bad\", (bad) => {\n    player.hurt(1)\n    bad.hurt(1)\n})\n \nplayer.onCollide(\"apple\", () => {\n    player.heal(1)\n})\n\nplayer.on(\"hurt\", () => {\n    play(\"ouch\")\n})\n\n// triggers when hp reaches 0\nplayer.on(\"death\", () => {\n    destroy(player)\n    go(\"lose\")\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "lifespan": [
                        {
                            "kind": "MethodSignature",
                            "name": "lifespan",
                            "parameters": [
                                { "kind": "Parameter", "name": "time", "type": { "kind": "NumberKeyword" } },
                                {
                                    "kind": "Parameter",
                                    "name": "options",
                                    "type": { "kind": "TypeReference", "typeName": "LifespanCompOpt" },
                                    "questionToken": true
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "LifespanComp" },
                            "jsDoc": {
                                "doc": "Destroy the game obj after certain amount of time",
                                "tags": {
                                    "example": [
                                        "```js\n// spawn an explosion, destroy after 1 seconds, start fading away after 0.5 second\nadd([\n    sprite(\"explosion\", { anim: \"burst\", }),\n    lifespan(1, { fade: 0.5 }),\n])\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "state": [
                        {
                            "kind": "MethodSignature",
                            "name": "state",
                            "parameters": [
                                { "kind": "Parameter", "name": "initialState", "type": { "kind": "StringKeyword" } },
                                {
                                    "kind": "Parameter",
                                    "name": "stateList",
                                    "type": { "kind": "ArrayType", "elementType": { "kind": "StringKeyword" } },
                                    "questionToken": true
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "StateComp" },
                            "jsDoc": {
                                "doc": "Finite state machine.",
                                "tags": {
                                    "since": ["v2000.1"],
                                    "example": [
                                        "```js\nconst enemy = add([\n    pos(80, 100),\n    sprite(\"robot\"),\n    state(\"idle\", [\"idle\", \"attack\", \"move\"]),\n])\n\n// this callback will run once when enters \"attack\" state\nenemy.onStateEnter(\"attack\", () => {\n    // enter \"idle\" state when the attack animation ends\n    enemy.play(\"attackAnim\", {\n        // any additional arguments will be passed into the onStateEnter() callback\n        onEnd: () => enemy.enterState(\"idle\", rand(1, 3)),\n    })\n    checkHit(enemy, player)\n})\n\n// this will run once when enters \"idle\" state\nenemy.onStateEnter(\"idle\", (time) => {\n    enemy.play(\"idleAnim\")\n    wait(time, () => enemy.enterState(\"move\"))\n})\n\n// this will run every frame when current state is \"move\"\nenemy.onStateUpdate(\"move\", () => {\n    enemy.follow(player)\n    if (enemy.pos.dist(player.pos) < 16) {\n        enemy.enterState(\"attack\")\n    }\n})\n```"
                                    ]
                                }
                            }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "state",
                            "parameters": [
                                { "kind": "Parameter", "name": "initialState", "type": { "kind": "StringKeyword" } },
                                { "kind": "Parameter", "name": "stateList", "type": { "kind": "ArrayType", "elementType": { "kind": "StringKeyword" } } },
                                {
                                    "kind": "Parameter",
                                    "name": "transitions",
                                    "type": {
                                        "kind": "TypeReference",
                                        "typeName": "Record",
                                        "typeArguments": [
                                            { "kind": "StringKeyword" },
                                            {
                                                "kind": "UnionType",
                                                "types": [{ "kind": "StringKeyword" }, { "kind": "ArrayType", "elementType": { "kind": "StringKeyword" } }]
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "StateComp" },
                            "jsDoc": {
                                "doc": "state() with pre-defined transitions.",
                                "tags": {
                                    "since": ["v2000.2"],
                                    "example": [
                                        "```js\nconst enemy = add([\n    pos(80, 100),\n    sprite(\"robot\"),\n    state(\"idle\", [\"idle\", \"attack\", \"move\"], {\n        \"idle\": \"attack\",\n        \"attack\": \"move\",\n        \"move\": [ \"idle\", \"attack\" ],\n    }),\n])\n\n// this callback will only run once when enter \"attack\" state from \"idle\"\nenemy.onStateTransition(\"idle\", \"attack\", () => {\n    checkHit(enemy, player)\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "on": [
                        {
                            "kind": "MethodSignature",
                            "name": "on",
                            "parameters": [
                                { "kind": "Parameter", "name": "event", "type": { "kind": "StringKeyword" } },
                                { "kind": "Parameter", "name": "tag", "type": { "kind": "TypeReference", "typeName": "Tag" } },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [
                                            { "kind": "Parameter", "name": "obj", "type": { "kind": "TypeReference", "typeName": "GameObj" } },
                                            { "kind": "Parameter", "name": "args", "dotDotDotToken": { "kind": "DotDotDotToken" } }
                                        ],
                                        "type": { "kind": "VoidKeyword" }
                                    }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": {
                                "doc": "Register an event on all game objs with certain tag.",
                                "tags": {
                                    "section": ["Events"],
                                    "example": [
                                        "```js\n// a custom event defined by body() comp\n// every time an obj with tag \"bomb\" hits the floor, destroy it and addKaboom()\non(\"ground\", \"bomb\", (bomb) => {\n    destroy(bomb)\n    addKaboom()\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "onUpdate": [
                        {
                            "kind": "MethodSignature",
                            "name": "onUpdate",
                            "parameters": [
                                { "kind": "Parameter", "name": "tag", "type": { "kind": "TypeReference", "typeName": "Tag" } },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [{ "kind": "Parameter", "name": "obj", "type": { "kind": "TypeReference", "typeName": "GameObj" } }],
                                        "type": { "kind": "VoidKeyword" }
                                    }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": {
                                "doc": "Register an event that runs every frame (~60 times per second) for all game objs with certain tag.",
                                "tags": {
                                    "since": ["v2000.1"],
                                    "example": [
                                        "```js\n// move every \"tree\" 120 pixels per second to the left, destroy it when it leaves screen\n// there'll be nothing to run if there's no \"tree\" obj in the scene\nonUpdate(\"tree\", (tree) => {\n    tree.move(-120, 0)\n    if (tree.pos.x < 0) {\n        destroy(tree)\n    }\n})\n```"
                                    ]
                                }
                            }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "onUpdate",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": {
                                "doc": "Register an event that runs every frame (~60 times per second).",
                                "tags": {
                                    "since": ["v2000.1"],
                                    "example": ["```js\n// This will run every frame\nonUpdate(() => {\n    debug.log(\"ohhi\")\n})\n```"]
                                }
                            }
                        }
                    ],
                    "onDraw": [
                        {
                            "kind": "MethodSignature",
                            "name": "onDraw",
                            "parameters": [
                                { "kind": "Parameter", "name": "tag", "type": { "kind": "TypeReference", "typeName": "Tag" } },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [{ "kind": "Parameter", "name": "obj", "type": { "kind": "TypeReference", "typeName": "GameObj" } }],
                                        "type": { "kind": "VoidKeyword" }
                                    }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": {
                                "doc": "Register an event that runs every frame (~60 times per second) for all game objs with certain tag (this is the same as onUpdate but all draw events are run after update events, drawXXX() functions only work in this phase).",
                                "tags": { "since": ["v2000.1"] }
                            }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "onDraw",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": {
                                "doc": "Register an event that runs every frame (~60 times per second) (this is the same as onUpdate but all draw events are run after update events, drawXXX() functions only work in this phase).",
                                "tags": {
                                    "since": ["v2000.1"],
                                    "example": [
                                        "```js\nonDraw(() => {\n    drawLine({\n        p1: vec2(0),\n        p2: mousePos(),\n        color: rgb(0, 0, 255),\n    })\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "onLoad": [
                        {
                            "kind": "MethodSignature",
                            "name": "onLoad",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": {
                                "doc": "Register an event that runs when all assets finished loading.",
                                "tags": {
                                    "since": ["v2000.1"],
                                    "example": [
                                        "```js\nconst froggy = add([\n    sprite(\"froggy\"),\n])\n\n// certain assets related data are only available when the game finishes loading\nonLoad(() => {\n    debug.log(froggy.width)\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "onCollide": [
                        {
                            "kind": "MethodSignature",
                            "name": "onCollide",
                            "parameters": [
                                { "kind": "Parameter", "name": "t1", "type": { "kind": "TypeReference", "typeName": "Tag" } },
                                { "kind": "Parameter", "name": "t2", "type": { "kind": "TypeReference", "typeName": "Tag" } },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [
                                            { "kind": "Parameter", "name": "a", "type": { "kind": "TypeReference", "typeName": "GameObj" } },
                                            { "kind": "Parameter", "name": "b", "type": { "kind": "TypeReference", "typeName": "GameObj" } },
                                            {
                                                "kind": "Parameter",
                                                "name": "col",
                                                "type": { "kind": "TypeReference", "typeName": "Collision" },
                                                "questionToken": true
                                            }
                                        ],
                                        "type": { "kind": "VoidKeyword" }
                                    }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": {
                                "doc": "Register an event that runs when 2 game objs with certain tags collides (required to have area() component).",
                                "tags": { "since": ["v2000.1"], "example": ["```js\nonCollide(\"sun\", \"earth\", () => {\n    addExplosion()\n})\n```"] }
                            }
                        }
                    ],
                    "onClick": [
                        {
                            "kind": "MethodSignature",
                            "name": "onClick",
                            "parameters": [
                                { "kind": "Parameter", "name": "tag", "type": { "kind": "TypeReference", "typeName": "Tag" } },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [{ "kind": "Parameter", "name": "a", "type": { "kind": "TypeReference", "typeName": "GameObj" } }],
                                        "type": { "kind": "VoidKeyword" }
                                    }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": {
                                "doc": "Register an event that runs when game objs with certain tags are clicked (required to have the area() component).",
                                "tags": {
                                    "since": ["v2000.1"],
                                    "example": ["```js\n// click on any \"chest\" to open\nonClick(\"chest\", (chest) => chest.open())\n```"]
                                }
                            }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "onClick",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": {
                                "doc": "Register an event that runs when users clicks.",
                                "tags": {
                                    "since": ["v2000.1"],
                                    "example": ["```js\n// click on anywhere to go to \"game\" scene\nonClick(() => go(\"game\"))\n```"]
                                }
                            }
                        }
                    ],
                    "onHover": [
                        {
                            "kind": "MethodSignature",
                            "name": "onHover",
                            "parameters": [
                                { "kind": "Parameter", "name": "tag", "type": { "kind": "TypeReference", "typeName": "Tag" } },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [{ "kind": "Parameter", "name": "a", "type": { "kind": "TypeReference", "typeName": "GameObj" } }],
                                        "type": { "kind": "VoidKeyword" }
                                    }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": {
                                "doc": "Register an event that runs when game objs with certain tags are hovered (required to have area() component).",
                                "tags": { "since": ["v2000.1"] }
                            }
                        }
                    ],
                    "onKeyDown": [
                        {
                            "kind": "MethodSignature",
                            "name": "onKeyDown",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "k",
                                    "type": {
                                        "kind": "UnionType",
                                        "types": [
                                            { "kind": "TypeReference", "typeName": "Key" },
                                            { "kind": "ArrayType", "elementType": { "kind": "TypeReference", "typeName": "Key" } }
                                        ]
                                    }
                                },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": {
                                "doc": "Register an event that runs every frame when a key is held down.",
                                "tags": {
                                    "since": ["v2000.1"],
                                    "example": [
                                        "```js\n// move left by SPEED pixels per frame every frame when left arrow key is being held down\nonKeyDown(\"left\", () => {\n    froggy.move(-SPEED, 0)\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "onKeyPress": [
                        {
                            "kind": "MethodSignature",
                            "name": "onKeyPress",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "k",
                                    "type": {
                                        "kind": "UnionType",
                                        "types": [
                                            { "kind": "TypeReference", "typeName": "Key" },
                                            { "kind": "ArrayType", "elementType": { "kind": "TypeReference", "typeName": "Key" } }
                                        ]
                                    }
                                },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": {
                                "doc": "Register an event that runs when user presses certain key.",
                                "tags": {
                                    "since": ["v2000.1"],
                                    "example": [
                                        "```js\n// .jump() once when \"space\" is just being pressed\nonKeyPress(\"space\", () => {\n    froggy.jump()\n})\n```"
                                    ]
                                }
                            }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "onKeyPress",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": {
                                "doc": "Register an event that runs when user presses any key.",
                                "tags": {
                                    "since": ["v2000.1"],
                                    "example": ["```js\n// Call restart() when player presses any key\nonKeyPress(() => {\n    restart()\n})\n```"]
                                }
                            }
                        }
                    ],
                    "onKeyPressRepeat": [
                        {
                            "kind": "MethodSignature",
                            "name": "onKeyPressRepeat",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "k",
                                    "type": {
                                        "kind": "UnionType",
                                        "types": [
                                            { "kind": "TypeReference", "typeName": "Key" },
                                            { "kind": "ArrayType", "elementType": { "kind": "TypeReference", "typeName": "Key" } }
                                        ]
                                    }
                                },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": {
                                "doc": "Register an event that runs when user presses certain key (also fires repeatedly when they key is being held down).",
                                "tags": {
                                    "since": ["v2000.1"],
                                    "example": [
                                        "```js\n// delete last character when \"backspace\" is being pressed and held\nonKeyPressRepeat(\"backspace\", () => {\n    input.text = input.text.substring(0, input.text.length - 1)\n})\n```"
                                    ]
                                }
                            }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "onKeyPressRepeat",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" }
                        }
                    ],
                    "onKeyRelease": [
                        {
                            "kind": "MethodSignature",
                            "name": "onKeyRelease",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "k",
                                    "type": {
                                        "kind": "UnionType",
                                        "types": [
                                            { "kind": "TypeReference", "typeName": "Key" },
                                            { "kind": "ArrayType", "elementType": { "kind": "TypeReference", "typeName": "Key" } }
                                        ]
                                    }
                                },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": { "doc": "Register an event that runs when user releases certain key.", "tags": { "since": ["v2000.1"] } }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "onKeyRelease",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" }
                        }
                    ],
                    "onCharInput": [
                        {
                            "kind": "MethodSignature",
                            "name": "onCharInput",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [{ "kind": "Parameter", "name": "ch", "type": { "kind": "StringKeyword" } }],
                                        "type": { "kind": "VoidKeyword" }
                                    }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": {
                                "doc": "Register an event that runs when user inputs text.",
                                "tags": { "since": ["v2000.1"], "example": ["```js\n// type into input\nonCharInput((ch) => {\n    input.text += ch\n})\n```"] }
                            }
                        }
                    ],
                    "onMouseDown": [
                        {
                            "kind": "MethodSignature",
                            "name": "onMouseDown",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [{ "kind": "Parameter", "name": "pos", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                                        "type": { "kind": "VoidKeyword" }
                                    }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": {
                                "doc": "Register an event that runs every frame when a mouse button is being held down.",
                                "tags": { "since": ["v2000.1"] }
                            }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "onMouseDown",
                            "parameters": [
                                { "kind": "Parameter", "name": "button", "type": { "kind": "TypeReference", "typeName": "MouseButton" } },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [{ "kind": "Parameter", "name": "pos", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                                        "type": { "kind": "VoidKeyword" }
                                    }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" }
                        }
                    ],
                    "onMousePress": [
                        {
                            "kind": "MethodSignature",
                            "name": "onMousePress",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [{ "kind": "Parameter", "name": "pos", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                                        "type": { "kind": "VoidKeyword" }
                                    }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": { "doc": "Register an event that runs when user clicks mouse.", "tags": { "since": ["v2000.1"] } }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "onMousePress",
                            "parameters": [
                                { "kind": "Parameter", "name": "button", "type": { "kind": "TypeReference", "typeName": "MouseButton" } },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [{ "kind": "Parameter", "name": "pos", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                                        "type": { "kind": "VoidKeyword" }
                                    }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" }
                        }
                    ],
                    "onMouseRelease": [
                        {
                            "kind": "MethodSignature",
                            "name": "onMouseRelease",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [{ "kind": "Parameter", "name": "pos", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                                        "type": { "kind": "VoidKeyword" }
                                    }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": { "doc": "Register an event that runs when user releases mouse.", "tags": { "since": ["v2000.1"] } }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "onMouseRelease",
                            "parameters": [
                                { "kind": "Parameter", "name": "button", "type": { "kind": "TypeReference", "typeName": "MouseButton" } },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [{ "kind": "Parameter", "name": "pos", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                                        "type": { "kind": "VoidKeyword" }
                                    }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" }
                        }
                    ],
                    "onMouseMove": [
                        {
                            "kind": "MethodSignature",
                            "name": "onMouseMove",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [{ "kind": "Parameter", "name": "pos", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                                        "type": { "kind": "VoidKeyword" }
                                    }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": { "doc": "Register an event that runs whenever user move the mouse.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "onTouchStart": [
                        {
                            "kind": "MethodSignature",
                            "name": "onTouchStart",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [
                                            { "kind": "Parameter", "name": "id", "type": { "kind": "TypeReference", "typeName": "TouchID" } },
                                            { "kind": "Parameter", "name": "pos", "type": { "kind": "TypeReference", "typeName": "Vec2" } }
                                        ],
                                        "type": { "kind": "VoidKeyword" }
                                    }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": { "doc": "Register an event that runs when a touch starts.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "onTouchMove": [
                        {
                            "kind": "MethodSignature",
                            "name": "onTouchMove",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [
                                            { "kind": "Parameter", "name": "id", "type": { "kind": "TypeReference", "typeName": "TouchID" } },
                                            { "kind": "Parameter", "name": "pos", "type": { "kind": "TypeReference", "typeName": "Vec2" } }
                                        ],
                                        "type": { "kind": "VoidKeyword" }
                                    }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": { "doc": "Register an event that runs whenever touch moves.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "onTouchEnd": [
                        {
                            "kind": "MethodSignature",
                            "name": "onTouchEnd",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [
                                            { "kind": "Parameter", "name": "id", "type": { "kind": "TypeReference", "typeName": "TouchID" } },
                                            { "kind": "Parameter", "name": "pos", "type": { "kind": "TypeReference", "typeName": "Vec2" } }
                                        ],
                                        "type": { "kind": "VoidKeyword" }
                                    }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": { "doc": "Register an event that runs when a touch ends.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "action": [
                        {
                            "kind": "PropertySignature",
                            "name": "action",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "onUpdate", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use onUpdate() instead"] } }
                        }
                    ],
                    "render": [
                        {
                            "kind": "PropertySignature",
                            "name": "render",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "onDraw", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use onDraw() instead"] } }
                        }
                    ],
                    "ready": [
                        {
                            "kind": "PropertySignature",
                            "name": "ready",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "onLoad", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use onLoad() instead."] } }
                        }
                    ],
                    "collides": [
                        {
                            "kind": "PropertySignature",
                            "name": "collides",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "onCollide", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use onCollide() instead"] } }
                        }
                    ],
                    "clicks": [
                        {
                            "kind": "PropertySignature",
                            "name": "clicks",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "onClick", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use onClick() instead"] } }
                        }
                    ],
                    "hovers": [
                        {
                            "kind": "PropertySignature",
                            "name": "hovers",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "onHover", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use onHover() instead"] } }
                        }
                    ],
                    "keyDown": [
                        {
                            "kind": "PropertySignature",
                            "name": "keyDown",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "onKeyDown", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use onKeyDown() instead."] } }
                        }
                    ],
                    "keyPress": [
                        {
                            "kind": "PropertySignature",
                            "name": "keyPress",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "onKeyPress", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use onKeyPress() instead."] } }
                        }
                    ],
                    "keyPressRep": [
                        {
                            "kind": "PropertySignature",
                            "name": "keyPressRep",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "onKeyPressRepeat", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use onKeyPressRepeat() instead."] } }
                        }
                    ],
                    "keyRelease": [
                        {
                            "kind": "PropertySignature",
                            "name": "keyRelease",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "onKeyRelease", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use onKeyRelease() instead."] } }
                        }
                    ],
                    "charInput": [
                        {
                            "kind": "PropertySignature",
                            "name": "charInput",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "onCharInput", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use onCharInput() instead."] } }
                        }
                    ],
                    "mouseClick": [
                        {
                            "kind": "PropertySignature",
                            "name": "mouseClick",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "onMousePress", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use onClick() or onMousePress() instead."] } }
                        }
                    ],
                    "mouseRelease": [
                        {
                            "kind": "PropertySignature",
                            "name": "mouseRelease",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "onMouseRelease", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use onMouseRelease() instead."] } }
                        }
                    ],
                    "mouseDown": [
                        {
                            "kind": "PropertySignature",
                            "name": "mouseDown",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "onMouseDown", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use onMouseDown() instead."] } }
                        }
                    ],
                    "mouseMove": [
                        {
                            "kind": "PropertySignature",
                            "name": "mouseMove",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "onMouseMove", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use onMouseMove() instead."] } }
                        }
                    ],
                    "touchStart": [
                        {
                            "kind": "PropertySignature",
                            "name": "touchStart",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "onTouchStart", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use onTouchStart() instead."] } }
                        }
                    ],
                    "touchMove": [
                        {
                            "kind": "PropertySignature",
                            "name": "touchMove",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "onTouchMove", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use onTouchMove() instead."] } }
                        }
                    ],
                    "touchEnd": [
                        {
                            "kind": "PropertySignature",
                            "name": "touchEnd",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "onTouchEnd", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use onTouchEnd() instead."] } }
                        }
                    ],
                    "loadRoot": [
                        {
                            "kind": "MethodSignature",
                            "name": "loadRoot",
                            "parameters": [{ "kind": "Parameter", "name": "path", "type": { "kind": "StringKeyword" }, "questionToken": true }],
                            "type": { "kind": "StringKeyword" },
                            "jsDoc": {
                                "doc": "Sets the root for all subsequent resource urls.",
                                "tags": {
                                    "section": ["Assets"],
                                    "example": [
                                        "```js\nloadRoot(\"https://myassets.com/\")\nloadSprite(\"froggy\", \"sprites/froggy.png\") // will resolve to \"https://myassets.com/sprites/frogg.png\"\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "loadSprite": [
                        {
                            "kind": "MethodSignature",
                            "name": "loadSprite",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "id",
                                    "type": {
                                        "kind": "UnionType",
                                        "types": [{ "kind": "StringKeyword" }, { "kind": "LiteralType", "literal": { "kind": "NullKeyword" } }]
                                    }
                                },
                                { "kind": "Parameter", "name": "src", "type": { "kind": "TypeReference", "typeName": "SpriteLoadSrc" } },
                                {
                                    "kind": "Parameter",
                                    "name": "options",
                                    "type": { "kind": "TypeReference", "typeName": "SpriteLoadOpt" },
                                    "questionToken": true
                                }
                            ],
                            "type": {
                                "kind": "TypeReference",
                                "typeName": "Promise",
                                "typeArguments": [{ "kind": "TypeReference", "typeName": "SpriteData" }]
                            },
                            "jsDoc": {
                                "doc": "Load a sprite into asset manager, with name and resource url and optional config.",
                                "tags": {
                                    "example": [
                                        "```js\n// due to browser policies you'll need a static file server to load local files\nloadSprite(\"froggy\", \"froggy.png\")\nloadSprite(\"apple\", \"https://kaboomjs.com/sprites/apple.png\")\n\n// slice a spritesheet and add anims manually\nloadSprite(\"froggy\", \"froggy.png\", {\n    sliceX: 4,\n    sliceY: 1,\n    anims: {\n        run: {\n            from: 0,\n            to: 3,\n        },\n        jump: {\n            from: 3,\n            to: 3,\n        },\n    },\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "loadSpriteAtlas": [
                        {
                            "kind": "MethodSignature",
                            "name": "loadSpriteAtlas",
                            "parameters": [
                                { "kind": "Parameter", "name": "src", "type": { "kind": "TypeReference", "typeName": "SpriteLoadSrc" } },
                                { "kind": "Parameter", "name": "data", "type": { "kind": "TypeReference", "typeName": "SpriteAtlasData" } }
                            ],
                            "type": {
                                "kind": "TypeReference",
                                "typeName": "Promise",
                                "typeArguments": [
                                    {
                                        "kind": "TypeReference",
                                        "typeName": "Record",
                                        "typeArguments": [{ "kind": "StringKeyword" }, { "kind": "TypeReference", "typeName": "SpriteData" }]
                                    }
                                ]
                            },
                            "jsDoc": {
                                "doc": "Load sprites from a sprite atlas.",
                                "tags": {
                                    "example": [
                                        "```js\n// See #SpriteAtlasData type for format spec\nloadSpriteAtlas(\"sprites/dungeon.png\", {\n    \"hero\": {\n        x: 128,\n        y: 68,\n        width: 144,\n        height: 28,\n        sliceX: 9,\n        anims: {\n            idle: { from: 0, to: 3 },\n            run: { from: 4, to: 7 },\n            hit: 8,\n        },\n    },\n})\n\nconst player = add([\n    sprite(\"hero\"),\n])\n\nplayer.play(\"run\")\n```"
                                    ]
                                }
                            }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "loadSpriteAtlas",
                            "parameters": [
                                { "kind": "Parameter", "name": "src", "type": { "kind": "TypeReference", "typeName": "SpriteLoadSrc" } },
                                { "kind": "Parameter", "name": "url", "type": { "kind": "StringKeyword" } }
                            ],
                            "type": {
                                "kind": "TypeReference",
                                "typeName": "Promise",
                                "typeArguments": [
                                    {
                                        "kind": "TypeReference",
                                        "typeName": "Record",
                                        "typeArguments": [{ "kind": "StringKeyword" }, { "kind": "TypeReference", "typeName": "SpriteData" }]
                                    }
                                ]
                            },
                            "jsDoc": {
                                "doc": "Load sprites from a sprite atlas with URL.",
                                "tags": {
                                    "example": [
                                        "```js\n// Load from json file, see #SpriteAtlasData type for format spec\nloadSpriteAtlas(\"sprites/dungeon.png\", \"sprites/dungeon.json\")\n\nconst player = add([\n    sprite(\"hero\"),\n])\n\nplayer.play(\"run\")\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "loadAseprite": [
                        {
                            "kind": "MethodSignature",
                            "name": "loadAseprite",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "name",
                                    "type": {
                                        "kind": "UnionType",
                                        "types": [{ "kind": "StringKeyword" }, { "kind": "LiteralType", "literal": { "kind": "NullKeyword" } }]
                                    }
                                },
                                { "kind": "Parameter", "name": "imgSrc", "type": { "kind": "TypeReference", "typeName": "SpriteLoadSrc" } },
                                { "kind": "Parameter", "name": "jsonSrc", "type": { "kind": "StringKeyword" } }
                            ],
                            "type": {
                                "kind": "TypeReference",
                                "typeName": "Promise",
                                "typeArguments": [{ "kind": "TypeReference", "typeName": "SpriteData" }]
                            },
                            "jsDoc": {
                                "doc": "Load a sprite with aseprite spritesheet json.",
                                "tags": { "example": ["```js\nloadAseprite(\"car\", \"sprites/car.png\", \"sprites/car.json\")\n```"] }
                            }
                        }
                    ],
                    "loadPedit": [
                        {
                            "kind": "MethodSignature",
                            "name": "loadPedit",
                            "parameters": [
                                { "kind": "Parameter", "name": "name", "type": { "kind": "StringKeyword" } },
                                { "kind": "Parameter", "name": "src", "type": { "kind": "StringKeyword" } }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "Promise", "typeArguments": [{ "kind": "TypeReference", "typeName": "SpriteData" }] }
                        }
                    ],
                    "loadBean": [
                        {
                            "kind": "MethodSignature",
                            "name": "loadBean",
                            "parameters": [{ "kind": "Parameter", "name": "name", "type": { "kind": "StringKeyword" }, "questionToken": true }],
                            "type": {
                                "kind": "TypeReference",
                                "typeName": "Promise",
                                "typeArguments": [{ "kind": "TypeReference", "typeName": "SpriteData" }]
                            },
                            "jsDoc": {
                                "doc": "Load default sprite \"bean\".",
                                "tags": { "example": ["```js\nloadBean()\n\n// use it right away\nadd([\n    sprite(\"bean\"),\n])\n```"] }
                            }
                        }
                    ],
                    "loadSound": [
                        {
                            "kind": "MethodSignature",
                            "name": "loadSound",
                            "parameters": [
                                { "kind": "Parameter", "name": "id", "type": { "kind": "StringKeyword" } },
                                { "kind": "Parameter", "name": "src", "type": { "kind": "StringKeyword" } }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "Promise", "typeArguments": [{ "kind": "TypeReference", "typeName": "SoundData" }] },
                            "jsDoc": {
                                "doc": "Load a sound into asset manager, with name and resource url.",
                                "tags": {
                                    "example": [
                                        "```js\nloadSound(\"shoot\", \"horse.ogg\")\nloadSound(\"shoot\", \"https://kaboomjs.com/sounds/scream6.mp3\")\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "loadFont": [
                        {
                            "kind": "MethodSignature",
                            "name": "loadFont",
                            "parameters": [
                                { "kind": "Parameter", "name": "id", "type": { "kind": "StringKeyword" } },
                                { "kind": "Parameter", "name": "src", "type": { "kind": "StringKeyword" } },
                                { "kind": "Parameter", "name": "gridWidth", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "gridHeight", "type": { "kind": "NumberKeyword" } },
                                {
                                    "kind": "Parameter",
                                    "name": "options",
                                    "type": { "kind": "TypeReference", "typeName": "FontLoadOpt" },
                                    "questionToken": true
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "Promise", "typeArguments": [{ "kind": "TypeReference", "typeName": "FontData" }] },
                            "jsDoc": {
                                "doc": "Load a bitmap font into asset manager, with name and resource url and infomation on the layout of the bitmap.",
                                "tags": {
                                    "example": [
                                        "```js\n// load a bitmap font called \"04b03\", with bitmap \"fonts/04b03.png\"\n// each character on bitmap has a size of (6, 8), and contains default ASCII_CHARS\nloadFont(\"04b03\", \"fonts/04b03.png\", 6, 8)\n\n// load a font with custom characters\nloadFont(\"cp437\", \"cp437.png\", 6, 8, {chars: \"☺☻♥♦♣♠\"})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "loadShader": [
                        {
                            "kind": "MethodSignature",
                            "name": "loadShader",
                            "parameters": [
                                { "kind": "Parameter", "name": "name", "type": { "kind": "StringKeyword" } },
                                { "kind": "Parameter", "name": "vert", "type": { "kind": "StringKeyword" }, "questionToken": true },
                                { "kind": "Parameter", "name": "frag", "type": { "kind": "StringKeyword" }, "questionToken": true },
                                { "kind": "Parameter", "name": "isUrl", "type": { "kind": "BooleanKeyword" }, "questionToken": true }
                            ],
                            "type": {
                                "kind": "TypeReference",
                                "typeName": "Promise",
                                "typeArguments": [{ "kind": "TypeReference", "typeName": "ShaderData" }]
                            },
                            "jsDoc": {
                                "doc": "Load a shader into asset manager with vertex and fragment code / file url.",
                                "tags": {
                                    "example": [
                                        "```js\n// load only a fragment shader from URL\nloadShader(\"outline\", null, \"/shaders/outline.glsl\", true)\n\n// default shaders and custom shader format\nloadShader(\"outline\",\n    `vec4 vert(vec3 pos, vec2 uv, vec4 color) {\n    // predefined functions to get the default value by kaboom\n    return def_vert()\n}`,\n`vec4 frag(vec3 pos, vec2 uv, vec4 color, sampler2D tex) {\n    // turn everything blue-ish\n    return def_frag() * vec4(0, 0, 1, 1)\n}`, false)\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "load": [
                        {
                            "kind": "MethodSignature",
                            "name": "load",
                            "typeParameters": [{ "kind": "TypeParameter", "name": "T" }],
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "l",
                                    "type": { "kind": "TypeReference", "typeName": "Promise", "typeArguments": [{ "kind": "TypeReference", "typeName": "T" }] }
                                }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": {
                                "doc": "Add a new loader to wait for before starting the game.",
                                "tags": {
                                    "example": [
                                        "```js\nload(new Promise((resolve, reject) => {\n    // anything you want to do that stalls the game in loading state\n    resolve(\"ok\")\n}))\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "width": [
                        {
                            "kind": "MethodSignature",
                            "name": "width",
                            "parameters": [],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Get the width of game.", "tags": { "section": ["Info"] } }
                        }
                    ],
                    "height": [
                        {
                            "kind": "MethodSignature",
                            "name": "height",
                            "parameters": [],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Get the height of game.", "tags": {} }
                        }
                    ],
                    "center": [
                        {
                            "kind": "MethodSignature",
                            "name": "center",
                            "parameters": [],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": {
                                "doc": "Get the center point of view.",
                                "tags": {
                                    "example": [
                                        "```js\n// add froggy to the center of the screen\nadd([\n    sprite(\"froggy\"),\n    pos(center()),\n    // ...\n])\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "dt": [
                        {
                            "kind": "MethodSignature",
                            "name": "dt",
                            "parameters": [],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": {
                                "doc": "Get the delta time since last frame.",
                                "tags": {
                                    "example": ["```js\n// rotate froggy 100 deg per second\nfroggy.onUpdate(() => {\n    froggy.angle += 100 * dt()\n})\n```"]
                                }
                            }
                        }
                    ],
                    "time": [
                        {
                            "kind": "MethodSignature",
                            "name": "time",
                            "parameters": [],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Get the total time since beginning.", "tags": {} }
                        }
                    ],
                    "isFocused": [
                        {
                            "kind": "MethodSignature",
                            "name": "isFocused",
                            "parameters": [],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If the game canvas is currently focused.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "focus": [
                        {
                            "kind": "MethodSignature",
                            "name": "focus",
                            "parameters": [],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Focus on the game canvas.", "tags": { "deprecated": ["v2000.2"] } }
                        }
                    ],
                    "isTouch": [
                        {
                            "kind": "MethodSignature",
                            "name": "isTouch",
                            "parameters": [],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "Is currently on a touch screen device.", "tags": {} }
                        }
                    ],
                    "mousePos": [
                        {
                            "kind": "MethodSignature",
                            "name": "mousePos",
                            "parameters": [],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": { "doc": "Get current mouse position (without camera transform).", "tags": {} }
                        }
                    ],
                    "mouseWorldPos": [
                        {
                            "kind": "MethodSignature",
                            "name": "mouseWorldPos",
                            "parameters": [],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": {
                                "doc": "Get current mouse position (after camera transform).",
                                "tags": { "deprecated": ["v2000.2 Use toWorld(mousePos()) instead."] }
                            }
                        }
                    ],
                    "mouseDeltaPos": [
                        {
                            "kind": "MethodSignature",
                            "name": "mouseDeltaPos",
                            "parameters": [],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": { "doc": "How much mouse moved last frame.", "tags": {} }
                        }
                    ],
                    "isKeyDown": [
                        {
                            "kind": "MethodSignature",
                            "name": "isKeyDown",
                            "parameters": [{ "kind": "Parameter", "name": "k", "type": { "kind": "TypeReference", "typeName": "Key" } }],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": {
                                "doc": "If certain key is currently down.",
                                "tags": {
                                    "since": ["v2000.1"],
                                    "example": [
                                        "```js\n// equivalent to the calling froggy.move() in an onKeyDown(\"left\")\nonUpdate(() => {\n    if (isKeyDown(\"left\")) {\n        froggy.move(-SPEED, 0)\n    }\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "isKeyPressed": [
                        {
                            "kind": "MethodSignature",
                            "name": "isKeyPressed",
                            "parameters": [{ "kind": "Parameter", "name": "k", "type": { "kind": "TypeReference", "typeName": "Key" }, "questionToken": true }],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If certain key is just pressed last frame.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "isKeyPressedRepeat": [
                        {
                            "kind": "MethodSignature",
                            "name": "isKeyPressedRepeat",
                            "parameters": [{ "kind": "Parameter", "name": "k", "type": { "kind": "TypeReference", "typeName": "Key" }, "questionToken": true }],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": {
                                "doc": "If certain key is just pressed last frame (also fires repeatedly when the key is being held down).",
                                "tags": { "since": ["v2000.1"] }
                            }
                        }
                    ],
                    "isKeyReleased": [
                        {
                            "kind": "MethodSignature",
                            "name": "isKeyReleased",
                            "parameters": [{ "kind": "Parameter", "name": "k", "type": { "kind": "TypeReference", "typeName": "Key" }, "questionToken": true }],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If certain key is just released last frame.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "isMouseDown": [
                        {
                            "kind": "MethodSignature",
                            "name": "isMouseDown",
                            "parameters": [
                                { "kind": "Parameter", "name": "button", "type": { "kind": "TypeReference", "typeName": "MouseButton" }, "questionToken": true }
                            ],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If a mouse button is currently down.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "isMousePressed": [
                        {
                            "kind": "MethodSignature",
                            "name": "isMousePressed",
                            "parameters": [
                                { "kind": "Parameter", "name": "button", "type": { "kind": "TypeReference", "typeName": "MouseButton" }, "questionToken": true }
                            ],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If a mouse button is just clicked last frame.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "isMouseReleased": [
                        {
                            "kind": "MethodSignature",
                            "name": "isMouseReleased",
                            "parameters": [
                                { "kind": "Parameter", "name": "button", "type": { "kind": "TypeReference", "typeName": "MouseButton" }, "questionToken": true }
                            ],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If a mouse button is just released last frame.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "isMouseMoved": [
                        {
                            "kind": "MethodSignature",
                            "name": "isMouseMoved",
                            "parameters": [],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If mouse moved last frame.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "shake": [
                        {
                            "kind": "MethodSignature",
                            "name": "shake",
                            "parameters": [{ "kind": "Parameter", "name": "intensity", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": {
                                "doc": "Camera shake.",
                                "tags": {
                                    "example": [
                                        "```js\n// shake intensively when froggy collides with a \"bomb\"\nfroggy.onCollide(\"bomb\", () => {\n    shake(120)\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "camPos": [
                        {
                            "kind": "MethodSignature",
                            "name": "camPos",
                            "parameters": [
                                { "kind": "Parameter", "name": "pos", "type": { "kind": "TypeReference", "typeName": "Vec2" }, "questionToken": true }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": {
                                "doc": "Get / set camera position.",
                                "tags": { "example": ["```js\n// camera follows player\nplayer.onUpdate(() => {\n    camPos(player.pos)\n})\n```"] }
                            }
                        }
                    ],
                    "camScale": [
                        {
                            "kind": "MethodSignature",
                            "name": "camScale",
                            "parameters": [
                                { "kind": "Parameter", "name": "scale", "type": { "kind": "TypeReference", "typeName": "Vec2" }, "questionToken": true }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": { "doc": "Get / set camera scale.", "tags": {} }
                        }
                    ],
                    "camRot": [
                        {
                            "kind": "MethodSignature",
                            "name": "camRot",
                            "parameters": [{ "kind": "Parameter", "name": "angle", "type": { "kind": "NumberKeyword" }, "questionToken": true }],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Get / set camera rotation.", "tags": {} }
                        }
                    ],
                    "toScreen": [
                        {
                            "kind": "MethodSignature",
                            "name": "toScreen",
                            "parameters": [{ "kind": "Parameter", "name": "p", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": { "doc": "Transform a point from world position to screen position.", "tags": {} }
                        }
                    ],
                    "toWorld": [
                        {
                            "kind": "MethodSignature",
                            "name": "toWorld",
                            "parameters": [{ "kind": "Parameter", "name": "p", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": { "doc": "Transform a point from screen position to world position.", "tags": {} }
                        }
                    ],
                    "gravity": [
                        {
                            "kind": "MethodSignature",
                            "name": "gravity",
                            "parameters": [{ "kind": "Parameter", "name": "g", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Get / set gravity.", "tags": {} }
                        }
                    ],
                    "layers": [
                        {
                            "kind": "MethodSignature",
                            "name": "layers",
                            "parameters": [
                                { "kind": "Parameter", "name": "list", "type": { "kind": "ArrayType", "elementType": { "kind": "StringKeyword" } } },
                                { "kind": "Parameter", "name": "def", "type": { "kind": "StringKeyword" }, "questionToken": true }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": {
                                "doc": "Define layers (the last one will be on top).",
                                "tags": {
                                    "example": [
                                        "```js\n// defining 3 layers, \"ui\" will be drawn on top most, with default layer being \"game\"\nlayers([\n    \"bg\",\n    \"game\",\n    \"ui\",\n], \"game\")\n\n// use layer() comp to define which layer an obj belongs to\nadd([\n    text(score),\n    layer(\"ui\"),\n    fixed(),\n])\n\n// without layer() comp it'll fall back to default layer, which is \"game\"\nadd([\n    sprite(\"froggy\"),\n])\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "cursor": [
                        {
                            "kind": "MethodSignature",
                            "name": "cursor",
                            "parameters": [
                                { "kind": "Parameter", "name": "c", "type": { "kind": "TypeReference", "typeName": "Cursor" }, "questionToken": true }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "Cursor" },
                            "jsDoc": {
                                "doc": "Get / set the cursor (css). Cursor will be reset to \"default\" every frame so use this in an per-frame action.",
                                "tags": { "example": ["```js\nonHover(\"clickable\", (c) => {\n    cursor(\"pointer\")\n})\n```"] }
                            }
                        }
                    ],
                    "regCursor": [
                        {
                            "kind": "MethodSignature",
                            "name": "regCursor",
                            "parameters": [
                                { "kind": "Parameter", "name": "c", "type": { "kind": "StringKeyword" } },
                                {
                                    "kind": "Parameter",
                                    "name": "draw",
                                    "type": {
                                        "kind": "UnionType",
                                        "types": [
                                            { "kind": "StringKeyword" },
                                            {
                                                "kind": "ParenthesizedType",
                                                "type": {
                                                    "kind": "FunctionType",
                                                    "parameters": [
                                                        { "kind": "Parameter", "name": "mpos", "type": { "kind": "TypeReference", "typeName": "Vec2" } }
                                                    ],
                                                    "type": { "kind": "VoidKeyword" }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": {
                                "doc": "Load a cursor from a sprite, or custom drawing function.",
                                "tags": {
                                    "example": [
                                        "```js\nloadSprite(\"froggy\", \"sprites/froggy.png\")\n\n// use sprite as cursor\nregCursor(\"default\", \"froggy\")\nregCursor(\"pointer\", \"apple\")\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "fullscreen": [
                        {
                            "kind": "MethodSignature",
                            "name": "fullscreen",
                            "parameters": [{ "kind": "Parameter", "name": "f", "type": { "kind": "BooleanKeyword" }, "questionToken": true }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": {
                                "doc": "Enter / exit fullscreen mode. (note: mouse position is not working in fullscreen mode at the moment)",
                                "tags": {
                                    "example": [
                                        "```js\n// toggle fullscreen mode on \"f\"\nonKeyPress(\"f\", (c) => {\n    fullscreen(!isFullscreen())\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "isFullscreen": [
                        {
                            "kind": "MethodSignature",
                            "name": "isFullscreen",
                            "parameters": [],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If currently in fullscreen mode.", "tags": {} }
                        }
                    ],
                    "keyIsDown": [
                        {
                            "kind": "PropertySignature",
                            "name": "keyIsDown",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "isKeyDown", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use isKeyDown() instead."] } }
                        }
                    ],
                    "keyIsPressed": [
                        {
                            "kind": "PropertySignature",
                            "name": "keyIsPressed",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "isKeyPressed", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use isKeyPressed() instead."] } }
                        }
                    ],
                    "keyIsPressedRep": [
                        {
                            "kind": "PropertySignature",
                            "name": "keyIsPressedRep",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "isKeyPressedRepeat", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use isKeyPressedRepeat() instead."] } }
                        }
                    ],
                    "keyIsReleased": [
                        {
                            "kind": "PropertySignature",
                            "name": "keyIsReleased",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "isKeyReleased", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use isKeyReleased() instead."] } }
                        }
                    ],
                    "mouseIsDown": [
                        {
                            "kind": "PropertySignature",
                            "name": "mouseIsDown",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "isMouseDown", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use isMouseDown() instead."] } }
                        }
                    ],
                    "mouseIsClicked": [
                        {
                            "kind": "PropertySignature",
                            "name": "mouseIsClicked",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "isMouseClicked", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use isMouseClicked() instead."] } }
                        }
                    ],
                    "mouseIsReleased": [
                        {
                            "kind": "PropertySignature",
                            "name": "mouseIsReleased",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "isMouseReleased", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use isMouseReleased() instead."] } }
                        }
                    ],
                    "mouseIsMoved": [
                        {
                            "kind": "PropertySignature",
                            "name": "mouseIsMoved",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "KaboomCtx" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "isMouseMoved", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use isMouseMoved() instead."] } }
                        }
                    ],
                    "focused": [
                        {
                            "kind": "MethodSignature",
                            "name": "focused",
                            "parameters": [],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use isFocused() instead."] } }
                        }
                    ],
                    "wait": [
                        {
                            "kind": "MethodSignature",
                            "name": "wait",
                            "parameters": [
                                { "kind": "Parameter", "name": "n", "type": { "kind": "NumberKeyword" } },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } },
                                    "questionToken": true
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "Promise", "typeArguments": [{ "kind": "VoidKeyword" }] },
                            "jsDoc": {
                                "doc": "Run the callback after n seconds.",
                                "tags": {
                                    "section": ["Timer"],
                                    "example": ["```js\n// 3 seconds until explosion! Runnn!\nwait(3, () => {\n    explode()\n})\n```"]
                                }
                            }
                        }
                    ],
                    "loop": [
                        {
                            "kind": "MethodSignature",
                            "name": "loop",
                            "parameters": [
                                { "kind": "Parameter", "name": "t", "type": { "kind": "NumberKeyword" } },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": {
                                "doc": "Run the callback every n seconds.",
                                "tags": {
                                    "example": [
                                        "```js\n// spawn a butterfly at random position every 1 second\nloop(1, () => {\n    add([\n        sprite(\"butterfly\"),\n        pos(rand(vec2(width(), height()))),\n        area(),\n        \"friend\",\n    ])\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "play": [
                        {
                            "kind": "MethodSignature",
                            "name": "play",
                            "parameters": [
                                { "kind": "Parameter", "name": "id", "type": { "kind": "StringKeyword" } },
                                {
                                    "kind": "Parameter",
                                    "name": "options",
                                    "type": { "kind": "TypeReference", "typeName": "AudioPlayOpt" },
                                    "questionToken": true
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "AudioPlay" },
                            "jsDoc": {
                                "doc": "Play a piece of audio.",
                                "tags": {
                                    "section": ["Audio"],
                                    "returns": ["A control handle."],
                                    "example": [
                                        "```js\n// play a one off sound\nplay(\"wooosh\")\n\n// play a looping soundtrack (check out AudioPlayOpt for more options)\nconst music = play(\"OverworldlyFoe\", {\n    volume: 0.8,\n    loop: true\n})\n\n// using the handle to control (check out AudioPlay for more controls / info)\nmusic.pause()\nmusic.play()\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "burp": [
                        {
                            "kind": "MethodSignature",
                            "name": "burp",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "options",
                                    "type": { "kind": "TypeReference", "typeName": "AudioPlayOpt" },
                                    "questionToken": true
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "AudioPlay" },
                            "jsDoc": { "doc": "Yep.", "tags": {} }
                        }
                    ],
                    "volume": [
                        {
                            "kind": "MethodSignature",
                            "name": "volume",
                            "parameters": [{ "kind": "Parameter", "name": "v", "type": { "kind": "NumberKeyword" }, "questionToken": true }],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Sets global volume.", "tags": { "example": ["```js\n// makes everything quieter\nvolume(0.5)\n```"] } }
                        }
                    ],
                    "audioCtx": [
                        {
                            "kind": "PropertySignature",
                            "name": "audioCtx",
                            "type": { "kind": "TypeReference", "typeName": "AudioContext" },
                            "jsDoc": { "doc": "Get the underlying browser AudioContext.", "tags": {} }
                        }
                    ],
                    "rand": [
                        {
                            "kind": "MethodSignature",
                            "name": "rand",
                            "parameters": [],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Get a random number between 0 - 1.", "tags": { "section": ["Math"] } }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "rand",
                            "typeParameters": [{ "kind": "TypeParameter", "name": "T", "constraint": { "kind": "TypeReference", "typeName": "RNGValue" } }],
                            "parameters": [{ "kind": "Parameter", "name": "n", "type": { "kind": "TypeReference", "typeName": "T" } }],
                            "type": { "kind": "TypeReference", "typeName": "T" },
                            "jsDoc": {
                                "doc": "Get a random value between 0 and the given value.",
                                "tags": {
                                    "example": [
                                        "```js\n// a random number between 0 - 8\nrand(8)\n\n// a random point on screen\nrand(vec2(width(), height()))\n\n// a random color\nrand(rgb(255, 255, 255))\n```"
                                    ]
                                }
                            }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "rand",
                            "typeParameters": [{ "kind": "TypeParameter", "name": "T", "constraint": { "kind": "TypeReference", "typeName": "RNGValue" } }],
                            "parameters": [
                                { "kind": "Parameter", "name": "a", "type": { "kind": "TypeReference", "typeName": "T" } },
                                { "kind": "Parameter", "name": "b", "type": { "kind": "TypeReference", "typeName": "T" } }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "T" },
                            "jsDoc": {
                                "doc": "Get a random value between the given bound.",
                                "tags": {
                                    "example": [
                                        "```js\nrand(50, 100)\nrand(vec2(20), vec2(100))\n\n// spawn something on the right side of the screen but with random y value within screen height\nadd([\n    pos(width(), rand(0, height())),\n])\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "randi": [
                        {
                            "kind": "MethodSignature",
                            "name": "randi",
                            "parameters": [],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": {
                                "doc": "rand() but floored to integer.",
                                "tags": { "example": ["```js\nrandi(0, 3) // will give either 0, 1, or 2\n```"] }
                            }
                        }
                    ],
                    "randSeed": [
                        {
                            "kind": "MethodSignature",
                            "name": "randSeed",
                            "parameters": [{ "kind": "Parameter", "name": "seed", "type": { "kind": "NumberKeyword" }, "questionToken": true }],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Get / set the random number generator seed.", "tags": { "example": ["```js\nrandSeed(Date.now())\n```"] } }
                        }
                    ],
                    "vec2": [
                        {
                            "kind": "MethodSignature",
                            "name": "vec2",
                            "parameters": [
                                { "kind": "Parameter", "name": "x", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "y", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": {
                                "doc": "Create a 2d vector.",
                                "tags": {
                                    "example": [
                                        "```js\n// { x: 0, y: 0 }\nvec2()\n\n// { x: 10, y: 10 }\nvec2(10)\n\n// { x: 100, y: 80 }\nvec2(100, 80)\n\n// move to 150 degrees direction with by length 10\nplayer.pos = pos.add(Vec2.fromAngle(150).scale(10))\n```"
                                    ]
                                }
                            }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "vec2",
                            "parameters": [{ "kind": "Parameter", "name": "p", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "vec2",
                            "parameters": [{ "kind": "Parameter", "name": "xy", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" }
                        },
                        { "kind": "MethodSignature", "name": "vec2", "parameters": [], "type": { "kind": "TypeReference", "typeName": "Vec2" } }
                    ],
                    "rgb": [
                        {
                            "kind": "MethodSignature",
                            "name": "rgb",
                            "parameters": [
                                { "kind": "Parameter", "name": "r", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "g", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "b", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "Color" },
                            "jsDoc": {
                                "doc": "RGB color (0 - 255).",
                                "tags": { "example": ["```js\n// update the color of the sky to light blue\nsky.color = rgb(0, 128, 255)\n```"] }
                            }
                        }
                    ],
                    "hsl2rgb": [
                        {
                            "kind": "MethodSignature",
                            "name": "hsl2rgb",
                            "parameters": [
                                { "kind": "Parameter", "name": "hue", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "saturation", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "lightness", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "Color" },
                            "jsDoc": {
                                "doc": "Convert HSL color (all values in 0.0 - 1.0 range) to RGB color.",
                                "tags": {
                                    "since": ["v2000.1"],
                                    "example": [
                                        "```js\n// animate rainbow color\nonUpdate(\"rainbow\", (obj) => {\n    obj.color = hsl2rgb(wave(0, 1, time()), 0.6, 0.6)\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "quad": [
                        {
                            "kind": "MethodSignature",
                            "name": "quad",
                            "parameters": [
                                { "kind": "Parameter", "name": "x", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "y", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "w", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "h", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "Quad" },
                            "jsDoc": { "doc": "Rectangle area (0.0 - 1.0).", "tags": {} }
                        }
                    ],
                    "choose": [
                        {
                            "kind": "MethodSignature",
                            "name": "choose",
                            "typeParameters": [{ "kind": "TypeParameter", "name": "T" }],
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "lst",
                                    "type": { "kind": "ArrayType", "elementType": { "kind": "TypeReference", "typeName": "T" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "T" },
                            "jsDoc": {
                                "doc": "Choose a random item from a list.",
                                "tags": {
                                    "example": [
                                        "```js\n// decide the best fruit randomly\nconst bestFruit = choose([\"apple\", \"banana\", \"pear\", \"watermelon\"])\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "chance": [
                        {
                            "kind": "MethodSignature",
                            "name": "chance",
                            "parameters": [{ "kind": "Parameter", "name": "p", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": {
                                "doc": "rand(1) <= p",
                                "tags": {
                                    "example": [
                                        "```js\n// every frame all objs with tag \"unlucky\" have 50% chance die\nonUpdate(\"unlucky\", (o) => {\n    if (chance(0.5)) {\n        destroy(o)\n    }\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "lerp": [
                        {
                            "kind": "MethodSignature",
                            "name": "lerp",
                            "parameters": [
                                { "kind": "Parameter", "name": "from", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "to", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "t", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Linear interpolation.", "tags": {} }
                        }
                    ],
                    "map": [
                        {
                            "kind": "MethodSignature",
                            "name": "map",
                            "parameters": [
                                { "kind": "Parameter", "name": "v", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "l1", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "h1", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "l2", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "h2", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Map a value from one range to another range.", "tags": {} }
                        }
                    ],
                    "mapc": [
                        {
                            "kind": "MethodSignature",
                            "name": "mapc",
                            "parameters": [
                                { "kind": "Parameter", "name": "v", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "l1", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "h1", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "l2", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "h2", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Map a value from one range to another range, and clamp to the dest range.", "tags": {} }
                        }
                    ],
                    "dir": [
                        {
                            "kind": "MethodSignature",
                            "name": "dir",
                            "parameters": [{ "kind": "Parameter", "name": "deg", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": { "tags": { "deprecated": ["v2000.2 Use Vec2.fromAngle instead."] } }
                        }
                    ],
                    "wave": [
                        {
                            "kind": "MethodSignature",
                            "name": "wave",
                            "parameters": [
                                { "kind": "Parameter", "name": "lo", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "hi", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "t", "type": { "kind": "NumberKeyword" } },
                                {
                                    "kind": "Parameter",
                                    "name": "func",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [{ "kind": "Parameter", "name": "x", "type": { "kind": "NumberKeyword" } }],
                                        "type": { "kind": "NumberKeyword" }
                                    },
                                    "questionToken": true
                                }
                            ],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": {
                                "doc": "Interpolate between 2 values (Optionally takes a custom periodic function, which default to Math.sin).",
                                "tags": {
                                    "example": [
                                        "```js\n// bounce color between 2 values as time goes on\nonUpdate(\"colorful\", (c) => {\n    c.color.r = wave(0, 255, time())\n    c.color.g = wave(0, 255, time() + 1)\n    c.color.b = wave(0, 255, time() + 2)\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "deg2rad": [
                        {
                            "kind": "MethodSignature",
                            "name": "deg2rad",
                            "parameters": [{ "kind": "Parameter", "name": "deg", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Convert degrees to radians.", "tags": {} }
                        }
                    ],
                    "rad2deg": [
                        {
                            "kind": "MethodSignature",
                            "name": "rad2deg",
                            "parameters": [{ "kind": "Parameter", "name": "rad", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Convert radians to degrees.", "tags": {} }
                        }
                    ],
                    "rng": [
                        {
                            "kind": "MethodSignature",
                            "name": "rng",
                            "parameters": [{ "kind": "Parameter", "name": "seed", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "TypeReference", "typeName": "RNG" },
                            "jsDoc": { "doc": "Make a new random number generator.", "tags": {} }
                        }
                    ],
                    "testLineLine": [
                        {
                            "kind": "MethodSignature",
                            "name": "testLineLine",
                            "parameters": [
                                { "kind": "Parameter", "name": "l1", "type": { "kind": "TypeReference", "typeName": "Line" } },
                                { "kind": "Parameter", "name": "l2", "type": { "kind": "TypeReference", "typeName": "Line" } }
                            ],
                            "type": {
                                "kind": "UnionType",
                                "types": [{ "kind": "TypeReference", "typeName": "Vec2" }, { "kind": "LiteralType", "literal": { "kind": "NullKeyword" } }]
                            },
                            "jsDoc": { "doc": "Check if 2 lines intersects, if yes returns the intersection point.", "tags": {} }
                        }
                    ],
                    "testRectRect": [
                        {
                            "kind": "MethodSignature",
                            "name": "testRectRect",
                            "parameters": [
                                { "kind": "Parameter", "name": "r1", "type": { "kind": "TypeReference", "typeName": "Rect" } },
                                { "kind": "Parameter", "name": "r2", "type": { "kind": "TypeReference", "typeName": "Rect" } }
                            ],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "Check if 2 rectangle overlaps.", "tags": {} }
                        }
                    ],
                    "testRectLine": [
                        {
                            "kind": "MethodSignature",
                            "name": "testRectLine",
                            "parameters": [
                                { "kind": "Parameter", "name": "r", "type": { "kind": "TypeReference", "typeName": "Rect" } },
                                { "kind": "Parameter", "name": "l", "type": { "kind": "TypeReference", "typeName": "Line" } }
                            ],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "Check if a line and a rectangle overlaps.", "tags": {} }
                        }
                    ],
                    "testRectPoint": [
                        {
                            "kind": "MethodSignature",
                            "name": "testRectPoint",
                            "parameters": [
                                { "kind": "Parameter", "name": "r", "type": { "kind": "TypeReference", "typeName": "Rect" } },
                                { "kind": "Parameter", "name": "pt", "type": { "kind": "TypeReference", "typeName": "Vec2" } }
                            ],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "Check if a point is inside a rectangle.", "tags": {} }
                        }
                    ],
                    "scene": [
                        {
                            "kind": "MethodSignature",
                            "name": "scene",
                            "parameters": [
                                { "kind": "Parameter", "name": "id", "type": { "kind": "TypeReference", "typeName": "SceneID" } },
                                { "kind": "Parameter", "name": "def", "type": { "kind": "TypeReference", "typeName": "SceneDef" } }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Define a scene.", "tags": { "section": ["Scene"] } }
                        }
                    ],
                    "go": [
                        {
                            "kind": "MethodSignature",
                            "name": "go",
                            "parameters": [
                                { "kind": "Parameter", "name": "id", "type": { "kind": "TypeReference", "typeName": "SceneID" } },
                                { "kind": "Parameter", "name": "args", "dotDotDotToken": { "kind": "DotDotDotToken" } }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Go to a scene, passing all rest args to scene callback.", "tags": {} }
                        }
                    ],
                    "addLevel": [
                        {
                            "kind": "MethodSignature",
                            "name": "addLevel",
                            "parameters": [
                                { "kind": "Parameter", "name": "map", "type": { "kind": "ArrayType", "elementType": { "kind": "StringKeyword" } } },
                                { "kind": "Parameter", "name": "options", "type": { "kind": "TypeReference", "typeName": "LevelOpt" } }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "Level" },
                            "jsDoc": {
                                "doc": "Construct a level based on symbols.",
                                "tags": {
                                    "section": ["Level"],
                                    "example": [
                                        "```js\naddLevel([\n    \"                          $\",\n    \"                          $\",\n    \"           $$         =   $\",\n    \"  %      ====         =   $\",\n    \"                      =    \",\n    \"       ^^      = >    =   &\",\n    \"===========================\",\n], {\n    // define the size of each block\n    width: 32,\n    height: 32,\n    // define what each symbol means, by a function returning a component list (what will be passed to add())\n    \"=\": () => [\n        sprite(\"floor\"),\n        area(),\n        solid(),\n    ],\n    \"$\": () => [\n        sprite(\"coin\"),\n        area(),\n        pos(0, -9),\n    ],\n    \"^\": () => [\n        sprite(\"spike\"),\n        area(),\n        \"danger\",\n    ],\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "getData": [
                        {
                            "kind": "MethodSignature",
                            "name": "getData",
                            "typeParameters": [{ "kind": "TypeParameter", "name": "T" }],
                            "parameters": [
                                { "kind": "Parameter", "name": "key", "type": { "kind": "StringKeyword" } },
                                { "kind": "Parameter", "name": "def", "type": { "kind": "TypeReference", "typeName": "T" }, "questionToken": true }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "T" },
                            "jsDoc": { "doc": "Get data from local storage, if not present can set to a default value.", "tags": { "section": ["Data"] } }
                        }
                    ],
                    "setData": [
                        {
                            "kind": "MethodSignature",
                            "name": "setData",
                            "parameters": [
                                { "kind": "Parameter", "name": "key", "type": { "kind": "StringKeyword" } },
                                { "kind": "Parameter", "name": "data", "type": { "kind": "AnyKeyword" } }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Set data from local storage.", "tags": {} }
                        }
                    ],
                    "drawSprite": [
                        {
                            "kind": "MethodSignature",
                            "name": "drawSprite",
                            "parameters": [{ "kind": "Parameter", "name": "options", "type": { "kind": "TypeReference", "typeName": "DrawSpriteOpt" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": {
                                "doc": "Draw a sprite.",
                                "tags": {
                                    "section": ["Draw"],
                                    "example": ["```js\ndrawSprite({\n    sprite: \"froggy\",\n    pos: vec2(100, 200),\n    frame: 3,\n})\n```"]
                                }
                            }
                        }
                    ],
                    "drawText": [
                        {
                            "kind": "MethodSignature",
                            "name": "drawText",
                            "parameters": [{ "kind": "Parameter", "name": "options", "type": { "kind": "TypeReference", "typeName": "DrawTextOpt" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": {
                                "doc": "Draw a piece of text.",
                                "tags": {
                                    "example": [
                                        "```js\ndrawText({\n    text: \"oh hi\",\n    size: 48,\n    font: \"sink\",\n    width: 120,\n    pos: vec2(100, 200),\n    color: rgb(0, 0, 255),\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "drawRect": [
                        {
                            "kind": "MethodSignature",
                            "name": "drawRect",
                            "parameters": [{ "kind": "Parameter", "name": "options", "type": { "kind": "TypeReference", "typeName": "DrawRectOpt" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": {
                                "doc": "Draw a rectangle.",
                                "tags": {
                                    "example": [
                                        "```js\ndrawRect({\n    width: 120,\n    height: 240,\n    pos: vec2(20, 20),\n    color: YELLOW,\n    outline: { color: BLACK, width: 4 },\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "drawLine": [
                        {
                            "kind": "MethodSignature",
                            "name": "drawLine",
                            "parameters": [{ "kind": "Parameter", "name": "options", "type": { "kind": "TypeReference", "typeName": "DrawLineOpt" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": {
                                "doc": "Draw a line.",
                                "tags": {
                                    "example": ["```js\ndrawLine({\n    p1: vec2(0),\n    p2: mousePos(),\n    width: 4,\n    color: rgb(0, 0, 255),\n})\n```"]
                                }
                            }
                        }
                    ],
                    "drawLines": [
                        {
                            "kind": "MethodSignature",
                            "name": "drawLines",
                            "parameters": [{ "kind": "Parameter", "name": "options", "type": { "kind": "TypeReference", "typeName": "DrawLinesOpt" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": {
                                "doc": "Draw lines.",
                                "tags": {
                                    "example": [
                                        "```js\ndrawLines({\n    pts: [ vec2(0), vec2(0, height()), mousePos() ],\n    width: 4,\n    pos: vec2(100, 200),\n    color: rgb(0, 0, 255),\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "drawTriangle": [
                        {
                            "kind": "MethodSignature",
                            "name": "drawTriangle",
                            "parameters": [{ "kind": "Parameter", "name": "options", "type": { "kind": "TypeReference", "typeName": "DrawTriangleOpt" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": {
                                "doc": "Draw a triangle.",
                                "tags": {
                                    "example": [
                                        "```js\ndrawTriangle({\n    p1: vec2(0),\n    p2: vec2(0, height()),\n    p3: mousePos(),\n    pos: vec2(100, 200),\n    color: rgb(0, 0, 255),\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "drawCircle": [
                        {
                            "kind": "MethodSignature",
                            "name": "drawCircle",
                            "parameters": [{ "kind": "Parameter", "name": "options", "type": { "kind": "TypeReference", "typeName": "DrawCircleOpt" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": {
                                "doc": "Draw a circle.",
                                "tags": {
                                    "example": ["```js\ndrawCircle({\n    pos: vec2(100, 200),\n    radius: 120,\n    color: rgb(255, 255, 0),\n})\n```"]
                                }
                            }
                        }
                    ],
                    "drawEllipse": [
                        {
                            "kind": "MethodSignature",
                            "name": "drawEllipse",
                            "parameters": [{ "kind": "Parameter", "name": "options", "type": { "kind": "TypeReference", "typeName": "DrawEllipseOpt" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": {
                                "doc": "Draw an ellipse.",
                                "tags": {
                                    "example": [
                                        "```js\ndrawEllipse({\n    pos: vec2(100, 200),\n    radiusX: 120,\n    radiusY: 120,\n    color: rgb(255, 255, 0),\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "drawPolygon": [
                        {
                            "kind": "MethodSignature",
                            "name": "drawPolygon",
                            "parameters": [{ "kind": "Parameter", "name": "options", "type": { "kind": "TypeReference", "typeName": "DrawPolygonOpt" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": {
                                "doc": "Draw a convex polygon from a list of vertices.",
                                "tags": {
                                    "example": [
                                        "```js\ndrawPolygon({\n    pts: [\n        vec2(-12),\n        vec2(0, 16),\n        vec2(12, 4),\n        vec2(0, -2),\n        vec2(-8),\n    ],\n    pos: vec2(100, 200),\n    color: rgb(0, 0, 255),\n})\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "drawUVQuad": [
                        {
                            "kind": "MethodSignature",
                            "name": "drawUVQuad",
                            "parameters": [{ "kind": "Parameter", "name": "options", "type": { "kind": "TypeReference", "typeName": "DrawUVQuadOpt" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Draw a rectangle with UV data.", "tags": {} }
                        }
                    ],
                    "drawFormattedText": [
                        {
                            "kind": "MethodSignature",
                            "name": "drawFormattedText",
                            "parameters": [{ "kind": "Parameter", "name": "text", "type": { "kind": "TypeReference", "typeName": "FormattedText" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": {
                                "doc": "Draw a piece of formatted text from formatText().",
                                "tags": {
                                    "since": ["v2000.2"],
                                    "example": [
                                        "```js\n// text background\nconst txt = formatText({\n    text: \"oh hi\",\n})\n\ndrawRect({\n    width: txt.width,\n    height: txt.height,\n})\n\ndrawFormattedText(txt)\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "pushTransform": [
                        {
                            "kind": "MethodSignature",
                            "name": "pushTransform",
                            "parameters": [],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": {
                                "doc": "Push current transform matrix to the transform stack.",
                                "tags": {
                                    "example": [
                                        "```js\npushTransform()\n\n// these transforms will affect every render until popTransform()\npushTranslate(120, 200)\npushRotate(time() * 120)\npushScale(6)\n\ndrawSprite(\"froggy\")\ndrawCircle(vec2(0), 120)\n\n// restore the transformation stack to when last pushed\npopTransform()\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "popTransform": [
                        {
                            "kind": "MethodSignature",
                            "name": "popTransform",
                            "parameters": [],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Pop the topmost transform matrix from the transform stack.", "tags": {} }
                        }
                    ],
                    "pushTranslate": [
                        {
                            "kind": "MethodSignature",
                            "name": "pushTranslate",
                            "parameters": [
                                { "kind": "Parameter", "name": "x", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "y", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": {
                                "doc": "Translate all subsequent draws.",
                                "tags": {
                                    "example": [
                                        "```js\npushTranslate(100, 100)\n\n// this will be drawn at (120, 120)\ndrawText({\n    text: \"oh hi\",\n    pos: vec2(20, 20),\n})\n```"
                                    ]
                                }
                            }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "pushTranslate",
                            "parameters": [{ "kind": "Parameter", "name": "p", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "VoidKeyword" }
                        }
                    ],
                    "pushScale": [
                        {
                            "kind": "MethodSignature",
                            "name": "pushScale",
                            "parameters": [
                                { "kind": "Parameter", "name": "x", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "y", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Scale all subsequent draws.", "tags": {} }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "pushScale",
                            "parameters": [{ "kind": "Parameter", "name": "s", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "VoidKeyword" }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "pushScale",
                            "parameters": [{ "kind": "Parameter", "name": "s", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "VoidKeyword" }
                        }
                    ],
                    "pushRotate": [
                        {
                            "kind": "MethodSignature",
                            "name": "pushRotate",
                            "parameters": [{ "kind": "Parameter", "name": "angle", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Rotate all subsequent draws.", "tags": {} }
                        }
                    ],
                    "formatText": [
                        {
                            "kind": "MethodSignature",
                            "name": "formatText",
                            "parameters": [{ "kind": "Parameter", "name": "options", "type": { "kind": "TypeReference", "typeName": "DrawTextOpt" } }],
                            "type": { "kind": "TypeReference", "typeName": "FormattedText" },
                            "jsDoc": {
                                "doc": "Format a piece of text without drawing (for getting dimensions, etc).",
                                "tags": {
                                    "since": ["v2000.2"],
                                    "example": [
                                        "```js\n// text background\nconst txt = formatText({\n    text: \"oh hi\",\n})\n\ndrawRect({\n    width: txt.width,\n    height: txt.height,\n})\n\ndrawFormattedText(txt)\n```"
                                    ]
                                }
                            }
                        }
                    ],
                    "debug": [
                        {
                            "kind": "PropertySignature",
                            "name": "debug",
                            "type": { "kind": "TypeReference", "typeName": "Debug" },
                            "jsDoc": {
                                "tags": {
                                    "section": ["Debug"],
                                    "example": ["```js\n// pause the whole game\ndebug.paused = true\n\n// enter inspect mode\ndebug.inspect = true\n```"]
                                }
                            }
                        }
                    ],
                    "plug": [
                        {
                            "kind": "MethodSignature",
                            "name": "plug",
                            "typeParameters": [{ "kind": "TypeParameter", "name": "T" }],
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "plugin",
                                    "type": {
                                        "kind": "TypeReference",
                                        "typeName": "KaboomPlugin",
                                        "typeArguments": [{ "kind": "TypeReference", "typeName": "T" }]
                                    }
                                }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Import a plugin.", "tags": { "section": ["Misc"] } }
                        }
                    ],
                    "screenshot": [
                        {
                            "kind": "MethodSignature",
                            "name": "screenshot",
                            "parameters": [],
                            "type": { "kind": "StringKeyword" },
                            "jsDoc": { "doc": "Take a screenshot and get the dataurl of the image.", "tags": { "returns": ["The dataURL of the image."] } }
                        }
                    ],
                    "record": [
                        {
                            "kind": "MethodSignature",
                            "name": "record",
                            "parameters": [{ "kind": "Parameter", "name": "frameRate", "type": { "kind": "NumberKeyword" }, "questionToken": true }],
                            "type": { "kind": "TypeReference", "typeName": "Recording" },
                            "jsDoc": {
                                "doc": "Start recording the canvas into a video. If framerate is not specified, a new frame will be captured each time the canvas changes.",
                                "tags": { "returns": ["A control handle."], "since": ["v2000.1"] }
                            }
                        }
                    ],
                    "ASCII_CHARS": [
                        {
                            "kind": "PropertySignature",
                            "name": "ASCII_CHARS",
                            "type": { "kind": "StringKeyword" },
                            "jsDoc": { "doc": "All chars in ASCII.", "tags": {} }
                        }
                    ],
                    "CP437_CHARS": [
                        {
                            "kind": "PropertySignature",
                            "name": "CP437_CHARS",
                            "type": { "kind": "StringKeyword" },
                            "jsDoc": { "doc": "All chars in CP437.", "tags": {} }
                        }
                    ],
                    "LEFT": [
                        {
                            "kind": "PropertySignature",
                            "name": "LEFT",
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": { "doc": "Left directional vector vec2(-1, 0).", "tags": {} }
                        }
                    ],
                    "RIGHT": [
                        {
                            "kind": "PropertySignature",
                            "name": "RIGHT",
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": { "doc": "Right directional vector vec2(1, 0).", "tags": {} }
                        }
                    ],
                    "UP": [
                        {
                            "kind": "PropertySignature",
                            "name": "UP",
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": { "doc": "Up directional vector vec2(0, -1).", "tags": {} }
                        }
                    ],
                    "DOWN": [
                        {
                            "kind": "PropertySignature",
                            "name": "DOWN",
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": { "doc": "Down directional vector vec2(0, 1).", "tags": {} }
                        }
                    ],
                    "RED": [{ "kind": "PropertySignature", "name": "RED", "type": { "kind": "TypeReference", "typeName": "Color" } }],
                    "GREEN": [{ "kind": "PropertySignature", "name": "GREEN", "type": { "kind": "TypeReference", "typeName": "Color" } }],
                    "BLUE": [{ "kind": "PropertySignature", "name": "BLUE", "type": { "kind": "TypeReference", "typeName": "Color" } }],
                    "YELLOW": [{ "kind": "PropertySignature", "name": "YELLOW", "type": { "kind": "TypeReference", "typeName": "Color" } }],
                    "MAGENTA": [{ "kind": "PropertySignature", "name": "MAGENTA", "type": { "kind": "TypeReference", "typeName": "Color" } }],
                    "CYAN": [{ "kind": "PropertySignature", "name": "CYAN", "type": { "kind": "TypeReference", "typeName": "Color" } }],
                    "WHITE": [{ "kind": "PropertySignature", "name": "WHITE", "type": { "kind": "TypeReference", "typeName": "Color" } }],
                    "BLACK": [{ "kind": "PropertySignature", "name": "BLACK", "type": { "kind": "TypeReference", "typeName": "Color" } }],
                    "canvas": [
                        {
                            "kind": "PropertySignature",
                            "name": "canvas",
                            "type": { "kind": "TypeReference", "typeName": "HTMLCanvasElement" },
                            "jsDoc": { "doc": "The canvas DOM kaboom is currently using.", "tags": {} }
                        }
                    ]
                },
                "jsDoc": { "doc": "Context handle that contains every kaboom function.", "tags": {} }
            }
        ],
        "Tag": [{ "kind": "TypeAliasDeclaration", "name": "Tag", "type": { "kind": "StringKeyword" } }],
        "UnionToIntersection": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "UnionToIntersection",
                "typeParameters": [{ "kind": "TypeParameter", "name": "U" }],
                "type": {
                    "kind": "ConditionalType",
                    "checkType": {
                        "kind": "ParenthesizedType",
                        "type": {
                            "kind": "ConditionalType",
                            "checkType": { "kind": "TypeReference", "typeName": "U" },
                            "extendsType": { "kind": "AnyKeyword" },
                            "trueType": {
                                "kind": "FunctionType",
                                "parameters": [{ "kind": "Parameter", "name": "k", "type": { "kind": "TypeReference", "typeName": "U" } }],
                                "type": { "kind": "VoidKeyword" }
                            },
                            "falseType": { "kind": "NeverKeyword" }
                        }
                    },
                    "extendsType": {
                        "kind": "ParenthesizedType",
                        "type": {
                            "kind": "FunctionType",
                            "parameters": [
                                { "kind": "Parameter", "name": "k", "type": { "kind": "InferType", "typeParameter": { "kind": "TypeParameter", "name": "I" } } }
                            ],
                            "type": { "kind": "VoidKeyword" }
                        }
                    },
                    "trueType": { "kind": "TypeReference", "typeName": "I" },
                    "falseType": { "kind": "NeverKeyword" }
                }
            }
        ],
        "Defined": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "Defined",
                "typeParameters": [{ "kind": "TypeParameter", "name": "T" }],
                "type": {
                    "kind": "ConditionalType",
                    "checkType": { "kind": "TypeReference", "typeName": "T" },
                    "extendsType": { "kind": "AnyKeyword" },
                    "trueType": {
                        "kind": "TypeReference",
                        "typeName": "Pick",
                        "typeArguments": [
                            { "kind": "TypeReference", "typeName": "T" },
                            {
                                "kind": "IndexedAccessType",
                                "objectType": {
                                    "kind": "MappedType",
                                    "typeParameter": {
                                        "kind": "TypeParameter",
                                        "name": "K",
                                        "constraint": { "kind": "TypeOperator", "operator": 140, "type": { "kind": "TypeReference", "typeName": "T" } }
                                    },
                                    "questionToken": true,
                                    "type": {
                                        "kind": "ConditionalType",
                                        "checkType": {
                                            "kind": "IndexedAccessType",
                                            "objectType": { "kind": "TypeReference", "typeName": "T" },
                                            "indexType": { "kind": "TypeReference", "typeName": "K" }
                                        },
                                        "extendsType": { "kind": "UndefinedKeyword" },
                                        "trueType": { "kind": "NeverKeyword" },
                                        "falseType": { "kind": "TypeReference", "typeName": "K" }
                                    },
                                    "members": {}
                                },
                                "indexType": { "kind": "TypeOperator", "operator": 140, "type": { "kind": "TypeReference", "typeName": "T" } }
                            }
                        ]
                    },
                    "falseType": { "kind": "NeverKeyword" }
                }
            }
        ],
        "Expand": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "Expand",
                "typeParameters": [{ "kind": "TypeParameter", "name": "T" }],
                "type": {
                    "kind": "ConditionalType",
                    "checkType": { "kind": "TypeReference", "typeName": "T" },
                    "extendsType": { "kind": "InferType", "typeParameter": { "kind": "TypeParameter", "name": "U" } },
                    "trueType": {
                        "kind": "MappedType",
                        "typeParameter": {
                            "kind": "TypeParameter",
                            "name": "K",
                            "constraint": { "kind": "TypeOperator", "operator": 140, "type": { "kind": "TypeReference", "typeName": "U" } }
                        },
                        "type": {
                            "kind": "IndexedAccessType",
                            "objectType": { "kind": "TypeReference", "typeName": "U" },
                            "indexType": { "kind": "TypeReference", "typeName": "K" }
                        },
                        "members": {}
                    },
                    "falseType": { "kind": "NeverKeyword" }
                }
            }
        ],
        "MergeObj": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "MergeObj",
                "typeParameters": [{ "kind": "TypeParameter", "name": "T" }],
                "type": {
                    "kind": "TypeReference",
                    "typeName": "Expand",
                    "typeArguments": [
                        {
                            "kind": "TypeReference",
                            "typeName": "UnionToIntersection",
                            "typeArguments": [
                                { "kind": "TypeReference", "typeName": "Defined", "typeArguments": [{ "kind": "TypeReference", "typeName": "T" }] }
                            ]
                        }
                    ]
                }
            }
        ],
        "MergeComps": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "MergeComps",
                "typeParameters": [{ "kind": "TypeParameter", "name": "T" }],
                "type": {
                    "kind": "TypeReference",
                    "typeName": "Omit",
                    "typeArguments": [
                        { "kind": "TypeReference", "typeName": "MergeObj", "typeArguments": [{ "kind": "TypeReference", "typeName": "T" }] },
                        { "kind": "TypeOperator", "operator": 140, "type": { "kind": "TypeReference", "typeName": "Comp" } }
                    ]
                }
            }
        ],
        "CompList": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "CompList",
                "typeParameters": [{ "kind": "TypeParameter", "name": "T" }],
                "type": {
                    "kind": "TypeReference",
                    "typeName": "Array",
                    "typeArguments": [
                        { "kind": "UnionType", "types": [{ "kind": "TypeReference", "typeName": "T" }, { "kind": "TypeReference", "typeName": "Tag" }] }
                    ]
                }
            }
        ],
        "Key": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "Key",
                "type": {
                    "kind": "UnionType",
                    "types": [
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "f1", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "f2", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "f3", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "f4", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "f5", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "f6", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "f7", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "f8", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "f9", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "f10", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "f11", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "f12", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "`", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "1", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "2", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "3", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "4", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "5", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "6", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "7", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "8", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "9", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "0", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "-", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "=", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "q", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "w", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "e", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "r", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "t", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "y", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "u", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "i", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "o", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "p", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "[", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "]", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "\\", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "a", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "s", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "d", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "f", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "g", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "h", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "j", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "k", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "l", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "'", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "z", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "x", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "c", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "v", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "b", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "n", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "m", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": ",", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": ".", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "/", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "backspace", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "enter", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "tab", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "space", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": " ", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "left", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "right", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "up", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "down", "hasExtendedUnicodeEscape": false } }
                    ]
                }
            }
        ],
        "MouseButton": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "MouseButton",
                "type": {
                    "kind": "UnionType",
                    "types": [
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "left", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "right", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "middle", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "back", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "forward", "hasExtendedUnicodeEscape": false } }
                    ]
                }
            }
        ],
        "GameObjInspect": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "GameObjInspect",
                "type": {
                    "kind": "TypeReference",
                    "typeName": "Record",
                    "typeArguments": [
                        { "kind": "TypeReference", "typeName": "Tag" },
                        { "kind": "UnionType", "types": [{ "kind": "StringKeyword" }, { "kind": "LiteralType", "literal": { "kind": "NullKeyword" } }] }
                    ]
                },
                "jsDoc": { "doc": "Inspect info for a character.", "tags": {} }
            }
        ],
        "KaboomOpt": [
            {
                "kind": "InterfaceDeclaration",
                "name": "KaboomOpt",
                "members": {
                    "width": [
                        {
                            "kind": "PropertySignature",
                            "name": "width",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Width of game.", "tags": {} }
                        }
                    ],
                    "height": [
                        {
                            "kind": "PropertySignature",
                            "name": "height",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Height of game.", "tags": {} }
                        }
                    ],
                    "scale": [
                        {
                            "kind": "PropertySignature",
                            "name": "scale",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Pixel scale / size.", "tags": {} }
                        }
                    ],
                    "stretch": [
                        {
                            "kind": "PropertySignature",
                            "name": "stretch",
                            "type": { "kind": "BooleanKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "If stretch canvas to container when width and height is specified", "tags": {} }
                        }
                    ],
                    "letterbox": [
                        {
                            "kind": "PropertySignature",
                            "name": "letterbox",
                            "type": { "kind": "BooleanKeyword" },
                            "questionToken": true,
                            "jsDoc": {
                                "doc": "When stretching if keep aspect ratio and leave black bars on remaining spaces. (note: not working properly at the moment.)",
                                "tags": {}
                            }
                        }
                    ],
                    "debug": [
                        {
                            "kind": "PropertySignature",
                            "name": "debug",
                            "type": { "kind": "BooleanKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "If register debug buttons (default true)", "tags": {} }
                        }
                    ],
                    "font": [
                        {
                            "kind": "PropertySignature",
                            "name": "font",
                            "type": { "kind": "StringKeyword" },
                            "questionToken": true,
                            "jsDoc": {
                                "doc": "Default font (defaults to \"apl386o\", with \"apl386\", \"sink\", \"sinko\" as other built-in options).",
                                "tags": {}
                            }
                        }
                    ],
                    "crisp": [
                        {
                            "kind": "PropertySignature",
                            "name": "crisp",
                            "type": { "kind": "BooleanKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Disable antialias and enable sharp pixel display.", "tags": {} }
                        }
                    ],
                    "canvas": [
                        {
                            "kind": "PropertySignature",
                            "name": "canvas",
                            "type": { "kind": "TypeReference", "typeName": "HTMLCanvasElement" },
                            "questionToken": true,
                            "jsDoc": { "doc": "The canvas DOM element to use. If empty will create one.", "tags": {} }
                        }
                    ],
                    "root": [
                        {
                            "kind": "PropertySignature",
                            "name": "root",
                            "type": { "kind": "TypeReference", "typeName": "HTMLElement" },
                            "questionToken": true,
                            "jsDoc": { "doc": "The container DOM element to insert the canvas if created. Defaults to document.body.", "tags": {} }
                        }
                    ],
                    "background": [
                        {
                            "kind": "PropertySignature",
                            "name": "background",
                            "type": { "kind": "ArrayType", "elementType": { "kind": "NumberKeyword" } },
                            "questionToken": true,
                            "jsDoc": { "doc": "Background color. E.g. [ 0, 0, 255 ] for solid blue background.", "tags": {} }
                        }
                    ],
                    "inspectColor": [
                        {
                            "kind": "PropertySignature",
                            "name": "inspectColor",
                            "type": { "kind": "ArrayType", "elementType": { "kind": "NumberKeyword" } },
                            "questionToken": true,
                            "jsDoc": { "doc": "The color to draw collider boxes etc.", "tags": {} }
                        }
                    ],
                    "texFilter": [
                        {
                            "kind": "PropertySignature",
                            "name": "texFilter",
                            "type": { "kind": "TypeReference", "typeName": "TexFilter" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Default texture filter.", "tags": {} }
                        }
                    ],
                    "logMax": [
                        {
                            "kind": "PropertySignature",
                            "name": "logMax",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "How many log messages can there be on one screen.", "tags": {} }
                        }
                    ],
                    "touchToMouse": [
                        {
                            "kind": "PropertySignature",
                            "name": "touchToMouse",
                            "type": { "kind": "BooleanKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "If translate touch events as mouse clicks (default true).", "tags": {} }
                        }
                    ],
                    "global": [
                        {
                            "kind": "PropertySignature",
                            "name": "global",
                            "type": { "kind": "BooleanKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "If import all kaboom functions to global (default true).", "tags": {} }
                        }
                    ],
                    "plugins": [
                        {
                            "kind": "PropertySignature",
                            "name": "plugins",
                            "type": {
                                "kind": "ArrayType",
                                "elementType": { "kind": "TypeReference", "typeName": "KaboomPlugin", "typeArguments": [{ "kind": "AnyKeyword" }] }
                            },
                            "questionToken": true,
                            "jsDoc": { "doc": "List of plugins to import.", "tags": {} }
                        }
                    ],
                    "burp": [
                        {
                            "kind": "PropertySignature",
                            "name": "burp",
                            "type": { "kind": "BooleanKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Enter burp mode.", "tags": {} }
                        }
                    ]
                },
                "jsDoc": { "doc": "Kaboom configurations.", "tags": {} }
            }
        ],
        "KaboomPlugin": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "KaboomPlugin",
                "typeParameters": [{ "kind": "TypeParameter", "name": "T" }],
                "type": {
                    "kind": "FunctionType",
                    "parameters": [{ "kind": "Parameter", "name": "k", "type": { "kind": "TypeReference", "typeName": "KaboomCtx" } }],
                    "type": { "kind": "TypeReference", "typeName": "T" }
                }
            }
        ],
        "GameObjRaw": [
            {
                "kind": "InterfaceDeclaration",
                "name": "GameObjRaw",
                "members": {
                    "_id": [
                        {
                            "kind": "PropertySignature",
                            "name": "_id",
                            "type": {
                                "kind": "UnionType",
                                "types": [{ "kind": "NumberKeyword" }, { "kind": "LiteralType", "literal": { "kind": "NullKeyword" } }]
                            },
                            "jsDoc": { "doc": "Internal GameObj ID.", "tags": {} }
                        }
                    ],
                    "hidden": [
                        {
                            "kind": "PropertySignature",
                            "name": "hidden",
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If draw the game obj (run \"draw\" event or not).", "tags": {} }
                        }
                    ],
                    "paused": [
                        {
                            "kind": "PropertySignature",
                            "name": "paused",
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If update the game obj (run \"update\" event or not).", "tags": {} }
                        }
                    ],
                    "exists": [
                        {
                            "kind": "MethodSignature",
                            "name": "exists",
                            "parameters": [],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If game obj exists in scene.", "tags": {} }
                        }
                    ],
                    "add": [
                        {
                            "kind": "MethodSignature",
                            "name": "add",
                            "typeParameters": [{ "kind": "TypeParameter", "name": "T" }],
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "comps",
                                    "type": { "kind": "TypeReference", "typeName": "CompList", "typeArguments": [{ "kind": "TypeReference", "typeName": "T" }] }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "GameObj", "typeArguments": [{ "kind": "TypeReference", "typeName": "T" }] },
                            "jsDoc": { "doc": "Add a child.", "tags": { "since": ["v2000.2.0"] } }
                        }
                    ],
                    "readd": [
                        {
                            "kind": "MethodSignature",
                            "name": "readd",
                            "parameters": [{ "kind": "Parameter", "name": "obj", "type": { "kind": "TypeReference", "typeName": "GameObj" } }],
                            "type": { "kind": "TypeReference", "typeName": "GameObj" },
                            "jsDoc": { "doc": "Remove and re-add the game obj.", "tags": { "since": ["v2000.2.0"] } }
                        }
                    ],
                    "remove": [
                        {
                            "kind": "MethodSignature",
                            "name": "remove",
                            "parameters": [{ "kind": "Parameter", "name": "obj", "type": { "kind": "TypeReference", "typeName": "GameObj" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Remove a child.", "tags": { "since": ["v2000.2.0"] } }
                        }
                    ],
                    "removeAll": [
                        {
                            "kind": "MethodSignature",
                            "name": "removeAll",
                            "parameters": [{ "kind": "Parameter", "name": "tag", "type": { "kind": "TypeReference", "typeName": "Tag" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Remove all children with a certain tag.", "tags": { "since": ["v2000.2.0"] } }
                        }
                    ],
                    "get": [
                        {
                            "kind": "MethodSignature",
                            "name": "get",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "tag",
                                    "type": {
                                        "kind": "UnionType",
                                        "types": [
                                            { "kind": "TypeReference", "typeName": "Tag" },
                                            { "kind": "ArrayType", "elementType": { "kind": "TypeReference", "typeName": "Tag" } }
                                        ]
                                    },
                                    "questionToken": true
                                }
                            ],
                            "type": { "kind": "ArrayType", "elementType": { "kind": "TypeReference", "typeName": "GameObj" } },
                            "jsDoc": { "doc": "Get a list of all game objs with certain tag.", "tags": { "since": ["v2000.2.0"] } }
                        }
                    ],
                    "every": [
                        {
                            "kind": "MethodSignature",
                            "name": "every",
                            "typeParameters": [{ "kind": "TypeParameter", "name": "T" }],
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [{ "kind": "Parameter", "name": "obj", "type": { "kind": "TypeReference", "typeName": "GameObj" } }],
                                        "type": { "kind": "TypeReference", "typeName": "T" }
                                    }
                                }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Iterate through children.", "tags": { "since": ["v2000.2.0"] } }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "every",
                            "typeParameters": [{ "kind": "TypeParameter", "name": "T" }],
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "tag",
                                    "type": {
                                        "kind": "UnionType",
                                        "types": [
                                            { "kind": "TypeReference", "typeName": "Tag" },
                                            { "kind": "ArrayType", "elementType": { "kind": "TypeReference", "typeName": "Tag" } }
                                        ]
                                    }
                                },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [{ "kind": "Parameter", "name": "obj", "type": { "kind": "TypeReference", "typeName": "GameObj" } }],
                                        "type": { "kind": "TypeReference", "typeName": "T" }
                                    }
                                }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Iterate through children.", "tags": { "since": ["v2000.2.0"] } }
                        }
                    ],
                    "revery": [
                        {
                            "kind": "MethodSignature",
                            "name": "revery",
                            "typeParameters": [{ "kind": "TypeParameter", "name": "T" }],
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [{ "kind": "Parameter", "name": "obj", "type": { "kind": "TypeReference", "typeName": "GameObj" } }],
                                        "type": { "kind": "TypeReference", "typeName": "T" }
                                    }
                                }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Iterate through children, in reverse.", "tags": { "since": ["v2000.2.0"] } }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "revery",
                            "typeParameters": [{ "kind": "TypeParameter", "name": "T" }],
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "tag",
                                    "type": {
                                        "kind": "UnionType",
                                        "types": [
                                            { "kind": "TypeReference", "typeName": "Tag" },
                                            { "kind": "ArrayType", "elementType": { "kind": "TypeReference", "typeName": "Tag" } }
                                        ]
                                    }
                                },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [{ "kind": "Parameter", "name": "obj", "type": { "kind": "TypeReference", "typeName": "GameObj" } }],
                                        "type": { "kind": "TypeReference", "typeName": "T" }
                                    }
                                }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Iterate through children, in reverse.", "tags": { "since": ["v2000.2.0"] } }
                        }
                    ],
                    "children": [
                        {
                            "kind": "PropertySignature",
                            "name": "children",
                            "type": { "kind": "ArrayType", "elementType": { "kind": "TypeReference", "typeName": "GameObj" } },
                            "jsDoc": { "doc": "Get all children game objects.", "tags": { "since": ["v2000.2.0"] } }
                        }
                    ],
                    "update": [
                        {
                            "kind": "MethodSignature",
                            "name": "update",
                            "parameters": [],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Update this game object and all children game objects.", "tags": { "since": ["v2000.2.0"] } }
                        }
                    ],
                    "draw": [
                        {
                            "kind": "MethodSignature",
                            "name": "draw",
                            "parameters": [],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Draw this game object and all children game objects.", "tags": { "since": ["v2000.2.0"] } }
                        }
                    ],
                    "is": [
                        {
                            "kind": "MethodSignature",
                            "name": "is",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "tag",
                                    "type": {
                                        "kind": "UnionType",
                                        "types": [
                                            { "kind": "TypeReference", "typeName": "Tag" },
                                            { "kind": "ArrayType", "elementType": { "kind": "TypeReference", "typeName": "Tag" } }
                                        ]
                                    }
                                }
                            ],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If there's certain tag(s) on the game obj.", "tags": {} }
                        }
                    ],
                    "use": [
                        {
                            "kind": "MethodSignature",
                            "name": "use",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "comp",
                                    "type": {
                                        "kind": "UnionType",
                                        "types": [{ "kind": "TypeReference", "typeName": "Comp" }, { "kind": "TypeReference", "typeName": "Tag" }]
                                    }
                                }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Add a component or tag.", "tags": {} }
                        }
                    ],
                    "unuse": [
                        {
                            "kind": "MethodSignature",
                            "name": "unuse",
                            "parameters": [{ "kind": "Parameter", "name": "comp", "type": { "kind": "TypeReference", "typeName": "Tag" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Remove a tag or a component with its id.", "tags": {} }
                        }
                    ],
                    "on": [
                        {
                            "kind": "MethodSignature",
                            "name": "on",
                            "parameters": [
                                { "kind": "Parameter", "name": "ev", "type": { "kind": "StringKeyword" } },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": { "doc": "Register an event.", "tags": {} }
                        }
                    ],
                    "trigger": [
                        {
                            "kind": "MethodSignature",
                            "name": "trigger",
                            "parameters": [
                                { "kind": "Parameter", "name": "ev", "type": { "kind": "StringKeyword" } },
                                { "kind": "Parameter", "name": "args", "dotDotDotToken": { "kind": "DotDotDotToken" } }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Trigger an event.", "tags": {} }
                        }
                    ],
                    "destroy": [
                        {
                            "kind": "MethodSignature",
                            "name": "destroy",
                            "parameters": [],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Remove the game obj from scene.", "tags": {} }
                        }
                    ],
                    "c": [
                        {
                            "kind": "MethodSignature",
                            "name": "c",
                            "parameters": [{ "kind": "Parameter", "name": "id", "type": { "kind": "TypeReference", "typeName": "Tag" } }],
                            "type": { "kind": "TypeReference", "typeName": "Comp" },
                            "jsDoc": { "doc": "Get state for a specific comp.", "tags": {} }
                        }
                    ],
                    "inspect": [
                        {
                            "kind": "MethodSignature",
                            "name": "inspect",
                            "parameters": [],
                            "type": { "kind": "TypeReference", "typeName": "GameObjInspect" },
                            "jsDoc": { "doc": "Gather debug info of all comps.", "tags": {} }
                        }
                    ],
                    "onUpdate": [
                        {
                            "kind": "MethodSignature",
                            "name": "onUpdate",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": { "doc": "Register an event that runs every frame as long as the game obj exists.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "onDraw": [
                        {
                            "kind": "MethodSignature",
                            "name": "onDraw",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": {
                                "doc": "Register an event that runs every frame as long as the game obj exists (this is the same as `onUpdate()`, but all draw events are run after all update events).",
                                "tags": { "since": ["v2000.1"] }
                            }
                        }
                    ],
                    "onDestroy": [
                        {
                            "kind": "MethodSignature",
                            "name": "onDestroy",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": { "doc": "Register an event that runs when the game obj is destroyed.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "action": [
                        {
                            "kind": "PropertySignature",
                            "name": "action",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "GameObjRaw" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "onUpdate", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": {
                                "doc": "Register an event that runs every frame as long as the game obj exists (alias to onUpdate).",
                                "tags": { "deprecated": ["v2000.1 Use onUpdate() instead."] }
                            }
                        }
                    ]
                },
                "jsDoc": { "doc": "Base interface of all game objects.", "tags": {} }
            }
        ],
        "GameObj": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "GameObj",
                "typeParameters": [{ "kind": "TypeParameter", "name": "T", "default": { "kind": "AnyKeyword" } }],
                "type": {
                    "kind": "IntersectionType",
                    "types": [
                        { "kind": "TypeReference", "typeName": "GameObjRaw" },
                        { "kind": "TypeReference", "typeName": "MergeComps", "typeArguments": [{ "kind": "TypeReference", "typeName": "T" }] }
                    ]
                },
                "jsDoc": { "doc": "The basic unit of object in Kaboom. The player, a butterfly, a tree, or even a piece of text.", "tags": {} }
            }
        ],
        "SceneID": [{ "kind": "TypeAliasDeclaration", "name": "SceneID", "type": { "kind": "StringKeyword" } }],
        "SceneDef": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "SceneDef",
                "type": {
                    "kind": "FunctionType",
                    "parameters": [{ "kind": "Parameter", "name": "args", "dotDotDotToken": { "kind": "DotDotDotToken" } }],
                    "type": { "kind": "VoidKeyword" }
                }
            }
        ],
        "TouchID": [{ "kind": "TypeAliasDeclaration", "name": "TouchID", "type": { "kind": "NumberKeyword" } }],
        "EventCanceller": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "EventCanceller",
                "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } },
                "jsDoc": { "doc": "Cancel the event.", "tags": {} }
            }
        ],
        "Recording": [
            {
                "kind": "InterfaceDeclaration",
                "name": "Recording",
                "members": {
                    "pause": [
                        {
                            "kind": "MethodSignature",
                            "name": "pause",
                            "parameters": [],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Pause the recording.", "tags": {} }
                        }
                    ],
                    "resume": [
                        {
                            "kind": "MethodSignature",
                            "name": "resume",
                            "parameters": [],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Resumes the recording.", "tags": {} }
                        }
                    ],
                    "download": [
                        {
                            "kind": "MethodSignature",
                            "name": "download",
                            "parameters": [{ "kind": "Parameter", "name": "filename", "type": { "kind": "StringKeyword" }, "questionToken": true }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Stops the recording and downloads the file as mp4. Trying to resume later will lead to error.", "tags": {} }
                        }
                    ]
                },
                "jsDoc": { "doc": "Screen recording control handle.", "tags": {} }
            }
        ],
        "SpriteAnim": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "SpriteAnim",
                "type": {
                    "kind": "UnionType",
                    "types": [
                        { "kind": "NumberKeyword" },
                        {
                            "kind": "TypeLiteral",
                            "members": {
                                "from": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "from",
                                        "type": { "kind": "NumberKeyword" },
                                        "jsDoc": { "doc": "The starting frame.", "tags": {} }
                                    }
                                ],
                                "to": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "to",
                                        "type": { "kind": "NumberKeyword" },
                                        "jsDoc": { "doc": "The end frame.", "tags": {} }
                                    }
                                ],
                                "loop": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "loop",
                                        "type": { "kind": "BooleanKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "If this anim should be played in loop.", "tags": {} }
                                    }
                                ],
                                "pingpong": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "pingpong",
                                        "type": { "kind": "BooleanKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "When looping should it move back instead of go to start frame again.", "tags": {} }
                                    }
                                ],
                                "speed": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "speed",
                                        "type": { "kind": "NumberKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "This anim's speed in frames per second.", "tags": {} }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "jsDoc": { "doc": "Frame-based animation configuration.", "tags": {} }
            }
        ],
        "SpriteAnimPlayOpt": [
            {
                "kind": "InterfaceDeclaration",
                "name": "SpriteAnimPlayOpt",
                "members": {
                    "loop": [
                        {
                            "kind": "PropertySignature",
                            "name": "loop",
                            "type": { "kind": "BooleanKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "If this anim should be played in loop.", "tags": {} }
                        }
                    ],
                    "pingpong": [
                        {
                            "kind": "PropertySignature",
                            "name": "pingpong",
                            "type": { "kind": "BooleanKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "When looping should it move back instead of go to start frame again.", "tags": {} }
                        }
                    ],
                    "speed": [
                        {
                            "kind": "PropertySignature",
                            "name": "speed",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "This anim's speed in frames per second.", "tags": {} }
                        }
                    ],
                    "onEnd": [
                        {
                            "kind": "PropertySignature",
                            "name": "onEnd",
                            "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } },
                            "questionToken": true,
                            "jsDoc": { "doc": "Runs when this animation ends.", "tags": {} }
                        }
                    ]
                },
                "jsDoc": { "doc": "Sprite animation configuration when playing.", "tags": {} }
            }
        ],
        "SpriteAnims": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "SpriteAnims",
                "type": {
                    "kind": "TypeReference",
                    "typeName": "Record",
                    "typeArguments": [{ "kind": "StringKeyword" }, { "kind": "TypeReference", "typeName": "SpriteAnim" }]
                },
                "jsDoc": { "doc": "A dict of name <-> animation.", "tags": {} }
            }
        ],
        "SpriteLoadOpt": [
            {
                "kind": "InterfaceDeclaration",
                "name": "SpriteLoadOpt",
                "members": {
                    "sliceX": [{ "kind": "PropertySignature", "name": "sliceX", "type": { "kind": "NumberKeyword" }, "questionToken": true }],
                    "sliceY": [{ "kind": "PropertySignature", "name": "sliceY", "type": { "kind": "NumberKeyword" }, "questionToken": true }],
                    "anims": [
                        { "kind": "PropertySignature", "name": "anims", "type": { "kind": "TypeReference", "typeName": "SpriteAnims" }, "questionToken": true }
                    ],
                    "filter": [
                        { "kind": "PropertySignature", "name": "filter", "type": { "kind": "TypeReference", "typeName": "TexFilter" }, "questionToken": true }
                    ],
                    "wrap": [{ "kind": "PropertySignature", "name": "wrap", "type": { "kind": "TypeReference", "typeName": "TexWrap" }, "questionToken": true }]
                },
                "jsDoc": { "doc": "Sprite loading configuration.", "tags": {} }
            }
        ],
        "SpriteAtlasData": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "SpriteAtlasData",
                "type": {
                    "kind": "TypeReference",
                    "typeName": "Record",
                    "typeArguments": [{ "kind": "StringKeyword" }, { "kind": "TypeReference", "typeName": "SpriteAtlasEntry" }]
                }
            }
        ],
        "SpriteAtlasEntry": [
            {
                "kind": "InterfaceDeclaration",
                "name": "SpriteAtlasEntry",
                "members": {
                    "x": [
                        {
                            "kind": "PropertySignature",
                            "name": "x",
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "X position of the top left corner.", "tags": {} }
                        }
                    ],
                    "y": [
                        {
                            "kind": "PropertySignature",
                            "name": "y",
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Y position of the top left corner.", "tags": {} }
                        }
                    ],
                    "width": [
                        {
                            "kind": "PropertySignature",
                            "name": "width",
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Sprite area width.", "tags": {} }
                        }
                    ],
                    "height": [
                        {
                            "kind": "PropertySignature",
                            "name": "height",
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Sprite area height.", "tags": {} }
                        }
                    ],
                    "sliceX": [
                        {
                            "kind": "PropertySignature",
                            "name": "sliceX",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "If the defined area contains multiple sprites, how many frames are in the area hozizontally.", "tags": {} }
                        }
                    ],
                    "sliceY": [
                        {
                            "kind": "PropertySignature",
                            "name": "sliceY",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "If the defined area contains multiple sprites, how many frames are in the area vertically.", "tags": {} }
                        }
                    ],
                    "anims": [
                        {
                            "kind": "PropertySignature",
                            "name": "anims",
                            "type": { "kind": "TypeReference", "typeName": "SpriteAnims" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Animation configuration.", "tags": {} }
                        }
                    ]
                },
                "jsDoc": { "doc": "A sprite in a sprite atlas.", "tags": {} }
            }
        ],
        "SpriteLoadSrc": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "SpriteLoadSrc",
                "type": { "kind": "UnionType", "types": [{ "kind": "StringKeyword" }, { "kind": "TypeReference", "typeName": "GfxTexData" }] }
            }
        ],
        "SpriteData": [
            {
                "kind": "InterfaceDeclaration",
                "name": "SpriteData",
                "members": {
                    "tex": [{ "kind": "PropertySignature", "name": "tex", "type": { "kind": "TypeReference", "typeName": "GfxTexture" } }],
                    "frames": [
                        {
                            "kind": "PropertySignature",
                            "name": "frames",
                            "type": { "kind": "ArrayType", "elementType": { "kind": "TypeReference", "typeName": "Quad" } }
                        }
                    ],
                    "anims": [{ "kind": "PropertySignature", "name": "anims", "type": { "kind": "TypeReference", "typeName": "SpriteAnims" } }],
                    "filter": [
                        { "kind": "PropertySignature", "name": "filter", "type": { "kind": "TypeReference", "typeName": "TexFilter" }, "questionToken": true }
                    ],
                    "wrap": [{ "kind": "PropertySignature", "name": "wrap", "type": { "kind": "TypeReference", "typeName": "TexWrap" }, "questionToken": true }]
                }
            }
        ],
        "FontLoadOpt": [
            {
                "kind": "InterfaceDeclaration",
                "name": "FontLoadOpt",
                "members": {
                    "chars": [{ "kind": "PropertySignature", "name": "chars", "type": { "kind": "StringKeyword" }, "questionToken": true }],
                    "filter": [
                        { "kind": "PropertySignature", "name": "filter", "type": { "kind": "TypeReference", "typeName": "TexFilter" }, "questionToken": true }
                    ],
                    "wrap": [{ "kind": "PropertySignature", "name": "wrap", "type": { "kind": "TypeReference", "typeName": "TexWrap" }, "questionToken": true }]
                }
            }
        ],
        "SoundData": [
            {
                "kind": "InterfaceDeclaration",
                "name": "SoundData",
                "members": { "buf": [{ "kind": "PropertySignature", "name": "buf", "type": { "kind": "TypeReference", "typeName": "AudioBuffer" } }] }
            }
        ],
        "FontData": [{ "kind": "TypeAliasDeclaration", "name": "FontData", "type": { "kind": "TypeReference", "typeName": "GfxFont" } }],
        "ShaderData": [{ "kind": "TypeAliasDeclaration", "name": "ShaderData", "type": { "kind": "TypeReference", "typeName": "GfxShader" } }],
        "AudioPlayOpt": [
            {
                "kind": "InterfaceDeclaration",
                "name": "AudioPlayOpt",
                "members": {
                    "loop": [
                        {
                            "kind": "PropertySignature",
                            "name": "loop",
                            "type": { "kind": "BooleanKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "If audio should be played again from start when its ended.", "tags": {} }
                        }
                    ],
                    "volume": [
                        {
                            "kind": "PropertySignature",
                            "name": "volume",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Volume of audio. 1.0 means full volume, 0.5 means half volume.", "tags": {} }
                        }
                    ],
                    "speed": [
                        {
                            "kind": "PropertySignature",
                            "name": "speed",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Playback speed. 1.0 means normal playback speed, 2.0 means twice as fast.", "tags": {} }
                        }
                    ],
                    "detune": [
                        {
                            "kind": "PropertySignature",
                            "name": "detune",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": {
                                "doc": "Detune the sound. Every 100 means a semitone.",
                                "tags": {
                                    "example": ["```js\n// play a random note in the octave\nplay(\"noteC\", {\n    detune: randi(0, 12) * 100,\n})\n```"]
                                }
                            }
                        }
                    ],
                    "seek": [
                        {
                            "kind": "PropertySignature",
                            "name": "seek",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "The start time, in seconds.", "tags": {} }
                        }
                    ]
                },
                "jsDoc": { "doc": "Audio play configurations.", "tags": {} }
            }
        ],
        "AudioPlay": [
            {
                "kind": "InterfaceDeclaration",
                "name": "AudioPlay",
                "members": {
                    "play": [
                        {
                            "kind": "MethodSignature",
                            "name": "play",
                            "parameters": [{ "kind": "Parameter", "name": "seek", "type": { "kind": "NumberKeyword" }, "questionToken": true }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Play the sound. Optionally pass in the time where it starts.", "tags": {} }
                        }
                    ],
                    "stop": [
                        {
                            "kind": "MethodSignature",
                            "name": "stop",
                            "parameters": [],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Stop the sound.", "tags": {} }
                        }
                    ],
                    "pause": [
                        {
                            "kind": "MethodSignature",
                            "name": "pause",
                            "parameters": [],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Pause the sound.", "tags": {} }
                        }
                    ],
                    "isPaused": [
                        {
                            "kind": "MethodSignature",
                            "name": "isPaused",
                            "parameters": [],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If the sound is paused.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "isStopped": [
                        {
                            "kind": "MethodSignature",
                            "name": "isStopped",
                            "parameters": [],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If the sound is stopped or ended.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "speed": [
                        {
                            "kind": "MethodSignature",
                            "name": "speed",
                            "parameters": [{ "kind": "Parameter", "name": "s", "type": { "kind": "NumberKeyword" }, "questionToken": true }],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Change the playback speed of the sound. 1.0 means normal playback speed, 2.0 means twice as fast.", "tags": {} }
                        }
                    ],
                    "detune": [
                        {
                            "kind": "MethodSignature",
                            "name": "detune",
                            "parameters": [{ "kind": "Parameter", "name": "d", "type": { "kind": "NumberKeyword" }, "questionToken": true }],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": {
                                "doc": "Detune the sound. Every 100 means a semitone.",
                                "tags": { "example": ["```js\n// tune down a semitone\nmusic.detune(-100)\n\n// tune up an octave\nmusic.detune(1200)\n```"] }
                            }
                        }
                    ],
                    "volume": [
                        {
                            "kind": "MethodSignature",
                            "name": "volume",
                            "parameters": [{ "kind": "Parameter", "name": "v", "type": { "kind": "NumberKeyword" }, "questionToken": true }],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Change the volume of the sound. 1.0 means full volume, 0.5 means half volume.", "tags": {} }
                        }
                    ],
                    "time": [
                        {
                            "kind": "MethodSignature",
                            "name": "time",
                            "parameters": [],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "The current playing time.", "tags": {} }
                        }
                    ],
                    "duration": [
                        {
                            "kind": "MethodSignature",
                            "name": "duration",
                            "parameters": [],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "The total duration.", "tags": {} }
                        }
                    ],
                    "loop": [
                        {
                            "kind": "MethodSignature",
                            "name": "loop",
                            "parameters": [],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Set audio to play in loop.", "tags": {} }
                        }
                    ],
                    "unloop": [
                        {
                            "kind": "MethodSignature",
                            "name": "unloop",
                            "parameters": [],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Set audio to not play in loop.", "tags": {} }
                        }
                    ],
                    "paused": [
                        {
                            "kind": "MethodSignature",
                            "name": "paused",
                            "parameters": [],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use isPaused() instead."] } }
                        }
                    ],
                    "stopped": [
                        {
                            "kind": "MethodSignature",
                            "name": "stopped",
                            "parameters": [],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use isStopped() instead."] } }
                        }
                    ]
                }
            }
        ],
        "GfxShader": [
            {
                "kind": "InterfaceDeclaration",
                "name": "GfxShader",
                "members": {
                    "bind": [{ "kind": "MethodSignature", "name": "bind", "parameters": [], "type": { "kind": "VoidKeyword" } }],
                    "unbind": [{ "kind": "MethodSignature", "name": "unbind", "parameters": [], "type": { "kind": "VoidKeyword" } }],
                    "send": [
                        {
                            "kind": "MethodSignature",
                            "name": "send",
                            "parameters": [{ "kind": "Parameter", "name": "uniform", "type": { "kind": "TypeReference", "typeName": "Uniform" } }],
                            "type": { "kind": "VoidKeyword" }
                        }
                    ]
                }
            }
        ],
        "GfxTexture": [
            {
                "kind": "InterfaceDeclaration",
                "name": "GfxTexture",
                "members": {
                    "width": [{ "kind": "PropertySignature", "name": "width", "type": { "kind": "NumberKeyword" } }],
                    "height": [{ "kind": "PropertySignature", "name": "height", "type": { "kind": "NumberKeyword" } }],
                    "bind": [{ "kind": "MethodSignature", "name": "bind", "parameters": [], "type": { "kind": "VoidKeyword" } }],
                    "unbind": [{ "kind": "MethodSignature", "name": "unbind", "parameters": [], "type": { "kind": "VoidKeyword" } }]
                }
            }
        ],
        "GfxTexData": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "GfxTexData",
                "type": {
                    "kind": "UnionType",
                    "types": [
                        { "kind": "TypeReference", "typeName": "HTMLImageElement" },
                        { "kind": "TypeReference", "typeName": "HTMLCanvasElement" },
                        { "kind": "TypeReference", "typeName": "ImageData" },
                        { "kind": "TypeReference", "typeName": "ImageBitmap" }
                    ]
                }
            }
        ],
        "GfxFont": [
            {
                "kind": "InterfaceDeclaration",
                "name": "GfxFont",
                "members": {
                    "tex": [{ "kind": "PropertySignature", "name": "tex", "type": { "kind": "TypeReference", "typeName": "GfxTexture" } }],
                    "map": [
                        {
                            "kind": "PropertySignature",
                            "name": "map",
                            "type": {
                                "kind": "TypeReference",
                                "typeName": "Record",
                                "typeArguments": [{ "kind": "StringKeyword" }, { "kind": "TypeReference", "typeName": "Vec2" }]
                            }
                        }
                    ],
                    "qw": [
                        {
                            "kind": "PropertySignature",
                            "name": "qw",
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "The quad width of each character.", "tags": {} }
                        }
                    ],
                    "qh": [{ "kind": "PropertySignature", "name": "qh", "type": { "kind": "NumberKeyword" } }]
                }
            }
        ],
        "Vertex": [
            {
                "kind": "InterfaceDeclaration",
                "name": "Vertex",
                "members": {
                    "pos": [{ "kind": "PropertySignature", "name": "pos", "type": { "kind": "TypeReference", "typeName": "Vec3" } }],
                    "uv": [{ "kind": "PropertySignature", "name": "uv", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                    "color": [{ "kind": "PropertySignature", "name": "color", "type": { "kind": "TypeReference", "typeName": "Color" } }],
                    "opacity": [{ "kind": "PropertySignature", "name": "opacity", "type": { "kind": "NumberKeyword" } }]
                }
            }
        ],
        "TexFilter": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "TexFilter",
                "type": {
                    "kind": "UnionType",
                    "types": [
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "nearest", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "linear", "hasExtendedUnicodeEscape": false } }
                    ]
                },
                "jsDoc": {
                    "doc": "Texture scaling filter. \"nearest\" is mainly for sharp pixelated scaling, \"linear\" means linear interpolation.",
                    "tags": {}
                }
            }
        ],
        "TexWrap": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "TexWrap",
                "type": {
                    "kind": "UnionType",
                    "types": [
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "repeat", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "clampToEdge", "hasExtendedUnicodeEscape": false } }
                    ]
                }
            }
        ],
        "RenderProps": [
            {
                "kind": "InterfaceDeclaration",
                "name": "RenderProps",
                "members": {
                    "pos": [{ "kind": "PropertySignature", "name": "pos", "type": { "kind": "TypeReference", "typeName": "Vec2" }, "questionToken": true }],
                    "scale": [
                        {
                            "kind": "PropertySignature",
                            "name": "scale",
                            "type": { "kind": "UnionType", "types": [{ "kind": "TypeReference", "typeName": "Vec2" }, { "kind": "NumberKeyword" }] },
                            "questionToken": true
                        }
                    ],
                    "angle": [{ "kind": "PropertySignature", "name": "angle", "type": { "kind": "NumberKeyword" }, "questionToken": true }],
                    "color": [
                        { "kind": "PropertySignature", "name": "color", "type": { "kind": "TypeReference", "typeName": "Color" }, "questionToken": true }
                    ],
                    "opacity": [{ "kind": "PropertySignature", "name": "opacity", "type": { "kind": "NumberKeyword" }, "questionToken": true }],
                    "fixed": [{ "kind": "PropertySignature", "name": "fixed", "type": { "kind": "BooleanKeyword" }, "questionToken": true }],
                    "shader": [
                        { "kind": "PropertySignature", "name": "shader", "type": { "kind": "TypeReference", "typeName": "GfxShader" }, "questionToken": true }
                    ],
                    "uniform": [
                        { "kind": "PropertySignature", "name": "uniform", "type": { "kind": "TypeReference", "typeName": "Uniform" }, "questionToken": true }
                    ]
                },
                "jsDoc": { "doc": "Common render properties.", "tags": {} }
            }
        ],
        "DrawSpriteOpt": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "DrawSpriteOpt",
                "type": {
                    "kind": "IntersectionType",
                    "types": [
                        { "kind": "TypeReference", "typeName": "RenderProps" },
                        {
                            "kind": "TypeLiteral",
                            "members": {
                                "sprite": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "sprite",
                                        "type": {
                                            "kind": "UnionType",
                                            "types": [{ "kind": "StringKeyword" }, { "kind": "TypeReference", "typeName": "SpriteData" }]
                                        },
                                        "jsDoc": { "doc": "The sprite name in the asset manager, or the raw sprite data.", "tags": {} }
                                    }
                                ],
                                "frame": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "frame",
                                        "type": { "kind": "NumberKeyword" },
                                        "questionToken": true,
                                        "jsDoc": {
                                            "doc": "If the sprite is loaded with multiple frames, or sliced, use the frame option to specify which frame to draw.",
                                            "tags": {}
                                        }
                                    }
                                ],
                                "width": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "width",
                                        "type": { "kind": "NumberKeyword" },
                                        "questionToken": true,
                                        "jsDoc": {
                                            "doc": "Width of sprite. If `height` is not specified it'll stretch with aspect ratio. If `tiled` is set to true it'll tiled to the specified width horizontally.",
                                            "tags": {}
                                        }
                                    }
                                ],
                                "height": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "height",
                                        "type": { "kind": "NumberKeyword" },
                                        "questionToken": true,
                                        "jsDoc": {
                                            "doc": "Height of sprite. If `width` is not specified it'll stretch with aspect ratio. If `tiled` is set to true it'll tiled to the specified width vertically.",
                                            "tags": {}
                                        }
                                    }
                                ],
                                "tiled": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "tiled",
                                        "type": { "kind": "BooleanKeyword" },
                                        "questionToken": true,
                                        "jsDoc": {
                                            "doc": "When set to true, `width` and `height` will not scale the sprite but instead render multiple tiled copies of them until the specified width and height. Useful for background texture pattern etc.",
                                            "tags": {}
                                        }
                                    }
                                ],
                                "flipX": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "flipX",
                                        "type": { "kind": "BooleanKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "If flip the texture horizontally.", "tags": {} }
                                    }
                                ],
                                "flipY": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "flipY",
                                        "type": { "kind": "BooleanKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "If flip the texture vertically.", "tags": {} }
                                    }
                                ],
                                "quad": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "quad",
                                        "type": { "kind": "TypeReference", "typeName": "Quad" },
                                        "questionToken": true,
                                        "jsDoc": {
                                            "doc": "The sub-area to render from the texture, by default it'll render the whole `quad(0, 0, 1, 1)`",
                                            "tags": {}
                                        }
                                    }
                                ],
                                "origin": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "origin",
                                        "type": {
                                            "kind": "UnionType",
                                            "types": [{ "kind": "TypeReference", "typeName": "Origin" }, { "kind": "TypeReference", "typeName": "Vec2" }]
                                        },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "The origin point, or the pivot point. Default to \"topleft\".", "tags": {} }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "jsDoc": { "doc": "How the sprite should look like.", "tags": {} }
            }
        ],
        "DrawUVQuadOpt": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "DrawUVQuadOpt",
                "type": {
                    "kind": "IntersectionType",
                    "types": [
                        { "kind": "TypeReference", "typeName": "RenderProps" },
                        {
                            "kind": "TypeLiteral",
                            "members": {
                                "width": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "width",
                                        "type": { "kind": "NumberKeyword" },
                                        "jsDoc": { "doc": "Width of the UV quad.", "tags": {} }
                                    }
                                ],
                                "height": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "height",
                                        "type": { "kind": "NumberKeyword" },
                                        "jsDoc": { "doc": "Height of the UV quad.", "tags": {} }
                                    }
                                ],
                                "flipX": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "flipX",
                                        "type": { "kind": "BooleanKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "If flip the texture horizontally.", "tags": {} }
                                    }
                                ],
                                "flipY": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "flipY",
                                        "type": { "kind": "BooleanKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "If flip the texture vertically.", "tags": {} }
                                    }
                                ],
                                "tex": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "tex",
                                        "type": { "kind": "TypeReference", "typeName": "GfxTexture" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "The texture to sample for this quad.", "tags": {} }
                                    }
                                ],
                                "quad": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "quad",
                                        "type": { "kind": "TypeReference", "typeName": "Quad" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "The texture sampling area.", "tags": {} }
                                    }
                                ],
                                "origin": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "origin",
                                        "type": {
                                            "kind": "UnionType",
                                            "types": [{ "kind": "TypeReference", "typeName": "Origin" }, { "kind": "TypeReference", "typeName": "Vec2" }]
                                        },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "The origin point, or the pivot point. Default to \"topleft\".", "tags": {} }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        ],
        "DrawRectOpt": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "DrawRectOpt",
                "type": {
                    "kind": "IntersectionType",
                    "types": [
                        { "kind": "TypeReference", "typeName": "RenderProps" },
                        {
                            "kind": "TypeLiteral",
                            "members": {
                                "width": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "width",
                                        "type": { "kind": "NumberKeyword" },
                                        "jsDoc": { "doc": "Width of the rectangle.", "tags": {} }
                                    }
                                ],
                                "height": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "height",
                                        "type": { "kind": "NumberKeyword" },
                                        "jsDoc": { "doc": "Height of the rectangle.", "tags": {} }
                                    }
                                ],
                                "outline": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "outline",
                                        "type": { "kind": "TypeReference", "typeName": "Outline" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "If draw an outline around the shape.", "tags": {} }
                                    }
                                ],
                                "fill": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "fill",
                                        "type": { "kind": "BooleanKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "If fill the shape with color (set this to false if you only want an outline).", "tags": {} }
                                    }
                                ],
                                "radius": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "radius",
                                        "type": { "kind": "NumberKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "The radius of each corner.", "tags": {} }
                                    }
                                ],
                                "origin": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "origin",
                                        "type": {
                                            "kind": "UnionType",
                                            "types": [{ "kind": "TypeReference", "typeName": "Origin" }, { "kind": "TypeReference", "typeName": "Vec2" }]
                                        },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "The origin point, or the pivot point. Default to \"topleft\".", "tags": {} }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "jsDoc": { "doc": "How the rectangle should look like.", "tags": {} }
            }
        ],
        "DrawLineOpt": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "DrawLineOpt",
                "type": {
                    "kind": "IntersectionType",
                    "types": [
                        {
                            "kind": "TypeReference",
                            "typeName": "Omit",
                            "typeArguments": [
                                { "kind": "TypeReference", "typeName": "RenderProps" },
                                {
                                    "kind": "UnionType",
                                    "types": [
                                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "angle", "hasExtendedUnicodeEscape": false } },
                                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "scale", "hasExtendedUnicodeEscape": false } }
                                    ]
                                }
                            ]
                        },
                        {
                            "kind": "TypeLiteral",
                            "members": {
                                "p1": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "p1",
                                        "type": { "kind": "TypeReference", "typeName": "Vec2" },
                                        "jsDoc": { "doc": "Starting point of the line.", "tags": {} }
                                    }
                                ],
                                "p2": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "p2",
                                        "type": { "kind": "TypeReference", "typeName": "Vec2" },
                                        "jsDoc": { "doc": "Ending point of the line.", "tags": {} }
                                    }
                                ],
                                "width": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "width",
                                        "type": { "kind": "NumberKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "The width, or thickness of the line,", "tags": {} }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "jsDoc": { "doc": "How the line should look like.", "tags": {} }
            }
        ],
        "DrawLinesOpt": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "DrawLinesOpt",
                "type": {
                    "kind": "IntersectionType",
                    "types": [
                        {
                            "kind": "TypeReference",
                            "typeName": "Omit",
                            "typeArguments": [
                                { "kind": "TypeReference", "typeName": "RenderProps" },
                                {
                                    "kind": "UnionType",
                                    "types": [
                                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "angle", "hasExtendedUnicodeEscape": false } },
                                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "scale", "hasExtendedUnicodeEscape": false } }
                                    ]
                                }
                            ]
                        },
                        {
                            "kind": "TypeLiteral",
                            "members": {
                                "pts": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "pts",
                                        "type": { "kind": "ArrayType", "elementType": { "kind": "TypeReference", "typeName": "Vec2" } },
                                        "jsDoc": { "doc": "The points that should be connected with a line.", "tags": {} }
                                    }
                                ],
                                "width": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "width",
                                        "type": { "kind": "NumberKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "The width, or thickness of the lines,", "tags": {} }
                                    }
                                ],
                                "radius": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "radius",
                                        "type": { "kind": "NumberKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "The radius of each corner.", "tags": {} }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "jsDoc": { "doc": "How the lines should look like.", "tags": {} }
            }
        ],
        "DrawTriangleOpt": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "DrawTriangleOpt",
                "type": {
                    "kind": "IntersectionType",
                    "types": [
                        { "kind": "TypeReference", "typeName": "RenderProps" },
                        {
                            "kind": "TypeLiteral",
                            "members": {
                                "p1": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "p1",
                                        "type": { "kind": "TypeReference", "typeName": "Vec2" },
                                        "jsDoc": { "doc": "First point of triangle.", "tags": {} }
                                    }
                                ],
                                "p2": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "p2",
                                        "type": { "kind": "TypeReference", "typeName": "Vec2" },
                                        "jsDoc": { "doc": "Second point of triangle.", "tags": {} }
                                    }
                                ],
                                "p3": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "p3",
                                        "type": { "kind": "TypeReference", "typeName": "Vec2" },
                                        "jsDoc": { "doc": "Third point of triangle.", "tags": {} }
                                    }
                                ],
                                "outline": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "outline",
                                        "type": { "kind": "TypeReference", "typeName": "Outline" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "If draw an outline around the shape.", "tags": {} }
                                    }
                                ],
                                "fill": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "fill",
                                        "type": { "kind": "BooleanKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "If fill the shape with color (set this to false if you only want an outline).", "tags": {} }
                                    }
                                ],
                                "radius": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "radius",
                                        "type": { "kind": "NumberKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "The radius of each corner.", "tags": {} }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "jsDoc": { "doc": "How the triangle should look like.", "tags": {} }
            }
        ],
        "DrawCircleOpt": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "DrawCircleOpt",
                "type": {
                    "kind": "IntersectionType",
                    "types": [
                        {
                            "kind": "TypeReference",
                            "typeName": "Omit",
                            "typeArguments": [
                                { "kind": "TypeReference", "typeName": "RenderProps" },
                                { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "angle", "hasExtendedUnicodeEscape": false } }
                            ]
                        },
                        {
                            "kind": "TypeLiteral",
                            "members": {
                                "radius": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "radius",
                                        "type": { "kind": "NumberKeyword" },
                                        "jsDoc": { "doc": "Radius of the circle.", "tags": {} }
                                    }
                                ],
                                "start": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "start",
                                        "type": { "kind": "NumberKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "Starting angle.", "tags": {} }
                                    }
                                ],
                                "outline": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "outline",
                                        "type": { "kind": "TypeReference", "typeName": "Outline" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "If draw an outline around the shape.", "tags": {} }
                                    }
                                ],
                                "fill": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "fill",
                                        "type": { "kind": "BooleanKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "If fill the shape with color (set this to false if you only want an outline).", "tags": {} }
                                    }
                                ],
                                "resolution": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "resolution",
                                        "type": { "kind": "NumberKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "Multipliyer for the number of polygon segments.", "tags": {} }
                                    }
                                ],
                                "origin": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "origin",
                                        "type": {
                                            "kind": "UnionType",
                                            "types": [{ "kind": "TypeReference", "typeName": "Origin" }, { "kind": "TypeReference", "typeName": "Vec2" }]
                                        },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "The origin point, or the pivot point. Default to \"topleft\".", "tags": {} }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "jsDoc": { "doc": "How the circle should look like.", "tags": {} }
            }
        ],
        "DrawEllipseOpt": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "DrawEllipseOpt",
                "type": {
                    "kind": "IntersectionType",
                    "types": [
                        { "kind": "TypeReference", "typeName": "RenderProps" },
                        {
                            "kind": "TypeLiteral",
                            "members": {
                                "radiusX": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "radiusX",
                                        "type": { "kind": "NumberKeyword" },
                                        "jsDoc": { "doc": "The horizontal radius.", "tags": {} }
                                    }
                                ],
                                "radiusY": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "radiusY",
                                        "type": { "kind": "NumberKeyword" },
                                        "jsDoc": { "doc": "The vertical radius.", "tags": {} }
                                    }
                                ],
                                "start": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "start",
                                        "type": { "kind": "NumberKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "Starting angle.", "tags": {} }
                                    }
                                ],
                                "outline": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "outline",
                                        "type": { "kind": "TypeReference", "typeName": "Outline" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "If draw an outline around the shape.", "tags": {} }
                                    }
                                ],
                                "fill": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "fill",
                                        "type": { "kind": "BooleanKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "If fill the shape with color (set this to false if you only want an outline).", "tags": {} }
                                    }
                                ],
                                "resolution": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "resolution",
                                        "type": { "kind": "NumberKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "Multipliyer for the number of polygon segments.", "tags": {} }
                                    }
                                ],
                                "origin": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "origin",
                                        "type": {
                                            "kind": "UnionType",
                                            "types": [{ "kind": "TypeReference", "typeName": "Origin" }, { "kind": "TypeReference", "typeName": "Vec2" }]
                                        },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "The origin point, or the pivot point. Default to \"topleft\".", "tags": {} }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "jsDoc": { "doc": "How the ellipse should look like.", "tags": {} }
            }
        ],
        "DrawPolygonOpt": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "DrawPolygonOpt",
                "type": {
                    "kind": "IntersectionType",
                    "types": [
                        { "kind": "TypeReference", "typeName": "RenderProps" },
                        {
                            "kind": "TypeLiteral",
                            "members": {
                                "pts": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "pts",
                                        "type": { "kind": "ArrayType", "elementType": { "kind": "TypeReference", "typeName": "Vec2" } },
                                        "jsDoc": { "doc": "The points that make up the polygon", "tags": {} }
                                    }
                                ],
                                "outline": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "outline",
                                        "type": { "kind": "TypeReference", "typeName": "Outline" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "If draw an outline around the shape.", "tags": {} }
                                    }
                                ],
                                "fill": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "fill",
                                        "type": { "kind": "BooleanKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "If fill the shape with color (set this to false if you only want an outline).", "tags": {} }
                                    }
                                ],
                                "indices": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "indices",
                                        "type": { "kind": "ArrayType", "elementType": { "kind": "NumberKeyword" } },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "Manual triangulation.", "tags": {} }
                                    }
                                ],
                                "offset": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "offset",
                                        "type": { "kind": "TypeReference", "typeName": "Vec2" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "The center point of transformation in relation to the position.", "tags": {} }
                                    }
                                ],
                                "radius": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "radius",
                                        "type": { "kind": "NumberKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "The radius of each corner.", "tags": {} }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "jsDoc": { "doc": "How the polygon should look like.", "tags": {} }
            }
        ],
        "Outline": [
            {
                "kind": "InterfaceDeclaration",
                "name": "Outline",
                "members": {
                    "width": [
                        {
                            "kind": "PropertySignature",
                            "name": "width",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "The width, or thinkness of the line.", "tags": {} }
                        }
                    ],
                    "color": [
                        {
                            "kind": "PropertySignature",
                            "name": "color",
                            "type": { "kind": "TypeReference", "typeName": "Color" },
                            "questionToken": true,
                            "jsDoc": { "doc": "The color of the line.", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "DrawTextOpt": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "DrawTextOpt",
                "type": {
                    "kind": "IntersectionType",
                    "types": [
                        { "kind": "TypeReference", "typeName": "RenderProps" },
                        {
                            "kind": "TypeLiteral",
                            "members": {
                                "text": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "text",
                                        "type": { "kind": "StringKeyword" },
                                        "jsDoc": { "doc": "The text to render.", "tags": {} }
                                    }
                                ],
                                "font": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "font",
                                        "type": {
                                            "kind": "UnionType",
                                            "types": [{ "kind": "StringKeyword" }, { "kind": "TypeReference", "typeName": "FontData" }]
                                        },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "The name of font to use.", "tags": {} }
                                    }
                                ],
                                "size": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "size",
                                        "type": { "kind": "NumberKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "The size of text (the height of each character).", "tags": {} }
                                    }
                                ],
                                "width": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "width",
                                        "type": { "kind": "NumberKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "The maximum width. Will wrap around if exceed.", "tags": {} }
                                    }
                                ],
                                "lineSpacing": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "lineSpacing",
                                        "type": { "kind": "NumberKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "The gap between each line.", "tags": { "since": ["v2000.2"] } }
                                    }
                                ],
                                "letterSpacing": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "letterSpacing",
                                        "type": { "kind": "NumberKeyword" },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "The gap between each character.", "tags": { "since": ["v2000.2"] } }
                                    }
                                ],
                                "origin": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "origin",
                                        "type": {
                                            "kind": "UnionType",
                                            "types": [{ "kind": "TypeReference", "typeName": "Origin" }, { "kind": "TypeReference", "typeName": "Vec2" }]
                                        },
                                        "questionToken": true,
                                        "jsDoc": { "doc": "The origin point, or the pivot point. Default to \"topleft\".", "tags": {} }
                                    }
                                ],
                                "transform": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "transform",
                                        "type": {
                                            "kind": "UnionType",
                                            "types": [
                                                { "kind": "TypeReference", "typeName": "CharTransform" },
                                                { "kind": "TypeReference", "typeName": "CharTransformFunc" }
                                            ]
                                        },
                                        "questionToken": true,
                                        "jsDoc": {
                                            "doc": "Transform the pos, scale, rotation or color for each character based on the index or char.",
                                            "tags": { "since": ["v2000.1"] }
                                        }
                                    }
                                ],
                                "styles": [
                                    {
                                        "kind": "PropertySignature",
                                        "name": "styles",
                                        "type": {
                                            "kind": "TypeReference",
                                            "typeName": "Record",
                                            "typeArguments": [
                                                { "kind": "StringKeyword" },
                                                {
                                                    "kind": "UnionType",
                                                    "types": [
                                                        { "kind": "TypeReference", "typeName": "CharTransform" },
                                                        { "kind": "TypeReference", "typeName": "CharTransformFunc" }
                                                    ]
                                                }
                                            ]
                                        },
                                        "questionToken": true,
                                        "jsDoc": {
                                            "doc": "Stylesheet for styled chunks, in the syntax of \"this is a [styled].stylename word\".",
                                            "tags": { "since": ["v2000.2"] }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "jsDoc": { "doc": "How the text should look like.", "tags": {} }
            }
        ],
        "FormattedText": [
            {
                "kind": "InterfaceDeclaration",
                "name": "FormattedText",
                "members": {
                    "width": [{ "kind": "PropertySignature", "name": "width", "type": { "kind": "NumberKeyword" } }],
                    "height": [{ "kind": "PropertySignature", "name": "height", "type": { "kind": "NumberKeyword" } }],
                    "chars": [
                        {
                            "kind": "PropertySignature",
                            "name": "chars",
                            "type": { "kind": "ArrayType", "elementType": { "kind": "TypeReference", "typeName": "FormattedChar" } }
                        }
                    ]
                },
                "jsDoc": { "doc": "Formatted text with info on how and where to render each character.", "tags": {} }
            }
        ],
        "FormattedChar": [
            {
                "kind": "InterfaceDeclaration",
                "name": "FormattedChar",
                "members": {
                    "tex": [{ "kind": "PropertySignature", "name": "tex", "type": { "kind": "TypeReference", "typeName": "GfxTexture" } }],
                    "quad": [{ "kind": "PropertySignature", "name": "quad", "type": { "kind": "TypeReference", "typeName": "Quad" } }],
                    "ch": [{ "kind": "PropertySignature", "name": "ch", "type": { "kind": "StringKeyword" } }],
                    "pos": [{ "kind": "PropertySignature", "name": "pos", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                    "scale": [{ "kind": "PropertySignature", "name": "scale", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                    "angle": [{ "kind": "PropertySignature", "name": "angle", "type": { "kind": "NumberKeyword" } }],
                    "color": [{ "kind": "PropertySignature", "name": "color", "type": { "kind": "TypeReference", "typeName": "Color" } }],
                    "fixed": [{ "kind": "PropertySignature", "name": "fixed", "type": { "kind": "BooleanKeyword" } }],
                    "opacity": [{ "kind": "PropertySignature", "name": "opacity", "type": { "kind": "NumberKeyword" } }],
                    "uniform": [{ "kind": "PropertySignature", "name": "uniform", "type": { "kind": "TypeReference", "typeName": "Uniform" } }]
                },
                "jsDoc": { "doc": "One formated character.", "tags": {} }
            }
        ],
        "CharTransformFunc": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "CharTransformFunc",
                "type": {
                    "kind": "FunctionType",
                    "parameters": [
                        { "kind": "Parameter", "name": "idx", "type": { "kind": "NumberKeyword" } },
                        { "kind": "Parameter", "name": "ch", "type": { "kind": "StringKeyword" } }
                    ],
                    "type": { "kind": "TypeReference", "typeName": "CharTransform" }
                },
                "jsDoc": { "doc": "A function that returns a character transform config. Useful if you're generating dynamic styles.", "tags": {} }
            }
        ],
        "CharTransform": [
            {
                "kind": "InterfaceDeclaration",
                "name": "CharTransform",
                "members": {
                    "pos": [{ "kind": "PropertySignature", "name": "pos", "type": { "kind": "TypeReference", "typeName": "Vec2" }, "questionToken": true }],
                    "scale": [
                        {
                            "kind": "PropertySignature",
                            "name": "scale",
                            "type": { "kind": "UnionType", "types": [{ "kind": "TypeReference", "typeName": "Vec2" }, { "kind": "NumberKeyword" }] },
                            "questionToken": true
                        }
                    ],
                    "angle": [{ "kind": "PropertySignature", "name": "angle", "type": { "kind": "NumberKeyword" }, "questionToken": true }],
                    "color": [
                        { "kind": "PropertySignature", "name": "color", "type": { "kind": "TypeReference", "typeName": "Color" }, "questionToken": true }
                    ],
                    "opacity": [{ "kind": "PropertySignature", "name": "opacity", "type": { "kind": "NumberKeyword" }, "questionToken": true }]
                },
                "jsDoc": { "doc": "Describes how to transform each character.", "tags": {} }
            }
        ],
        "Cursor": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "Cursor",
                "type": {
                    "kind": "UnionType",
                    "types": [
                        { "kind": "StringKeyword" },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "auto", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "default", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "none", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "context-menu", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "help", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "pointer", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "progress", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "wait", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "cell", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "crosshair", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "text", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "vertical-text", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "alias", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "copy", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "move", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "no-drop", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "not-allowed", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "grab", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "grabbing", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "all-scroll", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "col-resize", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "row-resize", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "n-resize", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "e-resize", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "s-resize", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "w-resize", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "ne-resize", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "nw-resize", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "se-resize", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "sw-resize", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "ew-resize", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "ns-resize", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "nesw-resize", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "nwse-resize", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "zoom-int", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "zoom-out", "hasExtendedUnicodeEscape": false } }
                    ]
                }
            }
        ],
        "Origin": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "Origin",
                "type": {
                    "kind": "UnionType",
                    "types": [
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "topleft", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "top", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "topright", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "left", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "center", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "right", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "botleft", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "bot", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "botright", "hasExtendedUnicodeEscape": false } }
                    ]
                }
            }
        ],
        "Vec2": [
            {
                "kind": "ClassDeclaration",
                "name": "Vec2",
                "members": {
                    "x": [{ "kind": "PropertyDeclaration", "name": "x", "type": { "kind": "NumberKeyword" } }],
                    "y": [{ "kind": "PropertyDeclaration", "name": "y", "type": { "kind": "NumberKeyword" } }],
                    "LEFT": [{ "kind": "PropertyDeclaration", "name": "LEFT", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                    "RIGHT": [{ "kind": "PropertyDeclaration", "name": "RIGHT", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                    "UP": [{ "kind": "PropertyDeclaration", "name": "UP", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                    "DOWN": [{ "kind": "PropertyDeclaration", "name": "DOWN", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                    "fromAngle": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "fromAngle",
                            "parameters": [{ "kind": "Parameter", "name": "deg", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" }
                        }
                    ],
                    "clone": [{ "kind": "MethodDeclaration", "name": "clone", "parameters": [], "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                    "add": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "add",
                            "parameters": [{ "kind": "Parameter", "name": "p", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": { "doc": "Returns the addition with another vector.", "tags": {} }
                        },
                        {
                            "kind": "MethodDeclaration",
                            "name": "add",
                            "parameters": [
                                { "kind": "Parameter", "name": "x", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "y", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" }
                        }
                    ],
                    "sub": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "sub",
                            "parameters": [{ "kind": "Parameter", "name": "p", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": { "doc": "Returns the subtraction with another vector.", "tags": {} }
                        },
                        {
                            "kind": "MethodDeclaration",
                            "name": "sub",
                            "parameters": [
                                { "kind": "Parameter", "name": "x", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "y", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" }
                        }
                    ],
                    "scale": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "scale",
                            "parameters": [{ "kind": "Parameter", "name": "p", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": { "doc": "Scale by another vector, or a single number.", "tags": {} }
                        },
                        {
                            "kind": "MethodDeclaration",
                            "name": "scale",
                            "parameters": [{ "kind": "Parameter", "name": "s", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" }
                        },
                        {
                            "kind": "MethodDeclaration",
                            "name": "scale",
                            "parameters": [
                                { "kind": "Parameter", "name": "sx", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "sy", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" }
                        }
                    ],
                    "dot": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "dot",
                            "parameters": [{ "kind": "Parameter", "name": "p", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Get the dot product with another vector.", "tags": {} }
                        }
                    ],
                    "dist": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "dist",
                            "parameters": [{ "kind": "Parameter", "name": "p", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Get distance between another vector.", "tags": {} }
                        }
                    ],
                    "len": [{ "kind": "MethodDeclaration", "name": "len", "parameters": [], "type": { "kind": "NumberKeyword" } }],
                    "unit": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "unit",
                            "parameters": [],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": { "doc": "Get the unit vector (length of 1).", "tags": {} }
                        }
                    ],
                    "normal": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "normal",
                            "parameters": [],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": { "doc": "Get the perpendicular vector.", "tags": {} }
                        }
                    ],
                    "angle": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "angle",
                            "parameters": [{ "kind": "Parameter", "name": "p", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Get the angle between another vector", "tags": {} }
                        }
                    ],
                    "lerp": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "lerp",
                            "parameters": [
                                { "kind": "Parameter", "name": "p", "type": { "kind": "TypeReference", "typeName": "Vec2" } },
                                { "kind": "Parameter", "name": "t", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": { "doc": "Linear interpolate to a destination vector", "tags": {} }
                        }
                    ],
                    "toFixed": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "toFixed",
                            "parameters": [{ "kind": "Parameter", "name": "n", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": { "doc": "To n precision floating point.", "tags": {} }
                        }
                    ],
                    "eq": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "eq",
                            "parameters": [{ "kind": "Parameter", "name": "p", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "BooleanKeyword" }
                        }
                    ],
                    "str": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "str",
                            "parameters": [],
                            "type": { "kind": "StringKeyword" },
                            "jsDoc": { "tags": { "deprecated": ["v2000.2 Use toString() instead."] } }
                        }
                    ]
                }
            }
        ],
        "Vec3": [
            {
                "kind": "ClassDeclaration",
                "name": "Vec3",
                "members": {
                    "x": [{ "kind": "PropertyDeclaration", "name": "x", "type": { "kind": "NumberKeyword" } }],
                    "y": [{ "kind": "PropertyDeclaration", "name": "y", "type": { "kind": "NumberKeyword" } }],
                    "z": [{ "kind": "PropertyDeclaration", "name": "z", "type": { "kind": "NumberKeyword" } }],
                    "xy": [{ "kind": "MethodDeclaration", "name": "xy", "parameters": [], "type": { "kind": "TypeReference", "typeName": "Vec2" } }]
                }
            }
        ],
        "Vec4": [
            {
                "kind": "ClassDeclaration",
                "name": "Vec4",
                "members": {
                    "x": [{ "kind": "PropertyDeclaration", "name": "x", "type": { "kind": "NumberKeyword" } }],
                    "y": [{ "kind": "PropertyDeclaration", "name": "y", "type": { "kind": "NumberKeyword" } }],
                    "z": [{ "kind": "PropertyDeclaration", "name": "z", "type": { "kind": "NumberKeyword" } }],
                    "w": [{ "kind": "PropertyDeclaration", "name": "w", "type": { "kind": "NumberKeyword" } }]
                }
            }
        ],
        "Mat4": [
            {
                "kind": "ClassDeclaration",
                "name": "Mat4",
                "members": {
                    "m": [{ "kind": "PropertyDeclaration", "name": "m", "type": { "kind": "ArrayType", "elementType": { "kind": "NumberKeyword" } } }],
                    "translate": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "translate",
                            "parameters": [{ "kind": "Parameter", "name": "p", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "TypeReference", "typeName": "Mat4" }
                        },
                        {
                            "kind": "MethodDeclaration",
                            "name": "translate",
                            "parameters": [{ "kind": "Parameter", "name": "p", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "TypeReference", "typeName": "Mat4" }
                        }
                    ],
                    "scale": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "scale",
                            "parameters": [{ "kind": "Parameter", "name": "s", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "TypeReference", "typeName": "Mat4" }
                        },
                        {
                            "kind": "MethodDeclaration",
                            "name": "scale",
                            "parameters": [{ "kind": "Parameter", "name": "s", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "TypeReference", "typeName": "Mat4" }
                        }
                    ],
                    "rotateX": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "rotateX",
                            "parameters": [{ "kind": "Parameter", "name": "a", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "TypeReference", "typeName": "Mat4" }
                        },
                        {
                            "kind": "MethodDeclaration",
                            "name": "rotateX",
                            "parameters": [{ "kind": "Parameter", "name": "a", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "TypeReference", "typeName": "Mat4" }
                        }
                    ],
                    "rotateY": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "rotateY",
                            "parameters": [{ "kind": "Parameter", "name": "a", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "TypeReference", "typeName": "Mat4" }
                        },
                        {
                            "kind": "MethodDeclaration",
                            "name": "rotateY",
                            "parameters": [{ "kind": "Parameter", "name": "a", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "TypeReference", "typeName": "Mat4" }
                        }
                    ],
                    "rotateZ": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "rotateZ",
                            "parameters": [{ "kind": "Parameter", "name": "a", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "TypeReference", "typeName": "Mat4" }
                        },
                        {
                            "kind": "MethodDeclaration",
                            "name": "rotateZ",
                            "parameters": [{ "kind": "Parameter", "name": "a", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "TypeReference", "typeName": "Mat4" }
                        }
                    ],
                    "clone": [{ "kind": "MethodDeclaration", "name": "clone", "parameters": [], "type": { "kind": "TypeReference", "typeName": "Mat4" } }],
                    "mult": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "mult",
                            "parameters": [{ "kind": "Parameter", "name": "other", "type": { "kind": "TypeReference", "typeName": "Mat4" } }],
                            "type": { "kind": "TypeReference", "typeName": "Mat4" }
                        }
                    ],
                    "multVec4": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "multVec4",
                            "parameters": [{ "kind": "Parameter", "name": "p", "type": { "kind": "TypeReference", "typeName": "Vec4" } }],
                            "type": { "kind": "TypeReference", "typeName": "Vec4" }
                        }
                    ],
                    "multVec3": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "multVec3",
                            "parameters": [{ "kind": "Parameter", "name": "p", "type": { "kind": "TypeReference", "typeName": "Vec3" } }],
                            "type": { "kind": "TypeReference", "typeName": "Vec3" }
                        }
                    ],
                    "multVec2": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "multVec2",
                            "parameters": [{ "kind": "Parameter", "name": "p", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" }
                        }
                    ],
                    "invert": [{ "kind": "MethodDeclaration", "name": "invert", "parameters": [], "type": { "kind": "TypeReference", "typeName": "Mat4" } }]
                }
            }
        ],
        "Color": [
            {
                "kind": "ClassDeclaration",
                "name": "Color",
                "members": {
                    "r": [{ "kind": "PropertyDeclaration", "name": "r", "type": { "kind": "NumberKeyword" }, "jsDoc": { "doc": "Red (0-255).", "tags": {} } }],
                    "g": [
                        { "kind": "PropertyDeclaration", "name": "g", "type": { "kind": "NumberKeyword" }, "jsDoc": { "doc": "Green (0-255).", "tags": {} } }
                    ],
                    "b": [{ "kind": "PropertyDeclaration", "name": "b", "type": { "kind": "NumberKeyword" }, "jsDoc": { "doc": "Blue (0-255).", "tags": {} } }],
                    "fromArray": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "fromArray",
                            "parameters": [{ "kind": "Parameter", "name": "arr", "type": { "kind": "ArrayType", "elementType": { "kind": "NumberKeyword" } } }],
                            "type": { "kind": "TypeReference", "typeName": "Color" }
                        }
                    ],
                    "RED": [{ "kind": "PropertyDeclaration", "name": "RED", "type": { "kind": "TypeReference", "typeName": "Color" } }],
                    "GREEN": [{ "kind": "PropertyDeclaration", "name": "GREEN", "type": { "kind": "TypeReference", "typeName": "Color" } }],
                    "BLUE": [{ "kind": "PropertyDeclaration", "name": "BLUE", "type": { "kind": "TypeReference", "typeName": "Color" } }],
                    "YELLOW": [{ "kind": "PropertyDeclaration", "name": "YELLOW", "type": { "kind": "TypeReference", "typeName": "Color" } }],
                    "MAGENTA": [{ "kind": "PropertyDeclaration", "name": "MAGENTA", "type": { "kind": "TypeReference", "typeName": "Color" } }],
                    "CYAN": [{ "kind": "PropertyDeclaration", "name": "CYAN", "type": { "kind": "TypeReference", "typeName": "Color" } }],
                    "WHITE": [{ "kind": "PropertyDeclaration", "name": "WHITE", "type": { "kind": "TypeReference", "typeName": "Color" } }],
                    "BLACK": [{ "kind": "PropertyDeclaration", "name": "BLACK", "type": { "kind": "TypeReference", "typeName": "Color" } }],
                    "clone": [{ "kind": "MethodDeclaration", "name": "clone", "parameters": [], "type": { "kind": "TypeReference", "typeName": "Color" } }],
                    "lighten": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "lighten",
                            "parameters": [{ "kind": "Parameter", "name": "n", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "TypeReference", "typeName": "Color" },
                            "jsDoc": { "doc": "Lighten the color (adds RGB by n).", "tags": {} }
                        }
                    ],
                    "darken": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "darken",
                            "parameters": [{ "kind": "Parameter", "name": "n", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "TypeReference", "typeName": "Color" },
                            "jsDoc": { "doc": "Darkens the color (subtracts RGB by n).", "tags": {} }
                        }
                    ],
                    "invert": [{ "kind": "MethodDeclaration", "name": "invert", "parameters": [], "type": { "kind": "TypeReference", "typeName": "Color" } }],
                    "mult": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "mult",
                            "parameters": [{ "kind": "Parameter", "name": "other", "type": { "kind": "TypeReference", "typeName": "Color" } }],
                            "type": { "kind": "TypeReference", "typeName": "Color" }
                        }
                    ],
                    "eq": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "eq",
                            "parameters": [{ "kind": "Parameter", "name": "c", "type": { "kind": "TypeReference", "typeName": "Color" } }],
                            "type": { "kind": "BooleanKeyword" }
                        }
                    ],
                    "str": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "str",
                            "parameters": [],
                            "type": { "kind": "StringKeyword" },
                            "jsDoc": { "tags": { "deprecated": ["v2000.2 Use toString() instead."] } }
                        }
                    ]
                },
                "jsDoc": { "doc": "0-255 RGBA color.", "tags": {} }
            }
        ],
        "Quad": [
            {
                "kind": "ClassDeclaration",
                "name": "Quad",
                "members": {
                    "x": [{ "kind": "PropertyDeclaration", "name": "x", "type": { "kind": "NumberKeyword" } }],
                    "y": [{ "kind": "PropertyDeclaration", "name": "y", "type": { "kind": "NumberKeyword" } }],
                    "w": [{ "kind": "PropertyDeclaration", "name": "w", "type": { "kind": "NumberKeyword" } }],
                    "h": [{ "kind": "PropertyDeclaration", "name": "h", "type": { "kind": "NumberKeyword" } }],
                    "scale": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "scale",
                            "parameters": [{ "kind": "Parameter", "name": "q", "type": { "kind": "TypeReference", "typeName": "Quad" } }],
                            "type": { "kind": "TypeReference", "typeName": "Quad" }
                        }
                    ],
                    "clone": [{ "kind": "MethodDeclaration", "name": "clone", "parameters": [], "type": { "kind": "TypeReference", "typeName": "Quad" } }],
                    "eq": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "eq",
                            "parameters": [{ "kind": "Parameter", "name": "q", "type": { "kind": "TypeReference", "typeName": "Quad" } }],
                            "type": { "kind": "BooleanKeyword" }
                        }
                    ]
                }
            }
        ],
        "RNGValue": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "RNGValue",
                "type": {
                    "kind": "UnionType",
                    "types": [{ "kind": "NumberKeyword" }, { "kind": "TypeReference", "typeName": "Vec2" }, { "kind": "TypeReference", "typeName": "Color" }]
                }
            }
        ],
        "RNG": [
            {
                "kind": "InterfaceDeclaration",
                "name": "RNG",
                "members": {
                    "seed": [{ "kind": "PropertySignature", "name": "seed", "type": { "kind": "NumberKeyword" } }],
                    "gen": [
                        { "kind": "MethodSignature", "name": "gen", "parameters": [], "type": { "kind": "NumberKeyword" } },
                        {
                            "kind": "MethodSignature",
                            "name": "gen",
                            "typeParameters": [{ "kind": "TypeParameter", "name": "T", "constraint": { "kind": "TypeReference", "typeName": "RNGValue" } }],
                            "parameters": [{ "kind": "Parameter", "name": "n", "type": { "kind": "TypeReference", "typeName": "T" } }],
                            "type": { "kind": "TypeReference", "typeName": "T" }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "gen",
                            "typeParameters": [{ "kind": "TypeParameter", "name": "T", "constraint": { "kind": "TypeReference", "typeName": "RNGValue" } }],
                            "parameters": [
                                { "kind": "Parameter", "name": "a", "type": { "kind": "TypeReference", "typeName": "T" } },
                                { "kind": "Parameter", "name": "b", "type": { "kind": "TypeReference", "typeName": "T" } }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "T" }
                        }
                    ]
                }
            }
        ],
        "Rect": [
            {
                "kind": "ClassDeclaration",
                "name": "Rect",
                "members": {
                    "p1": [{ "kind": "PropertyDeclaration", "name": "p1", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                    "p2": [{ "kind": "PropertyDeclaration", "name": "p2", "type": { "kind": "TypeReference", "typeName": "Vec2" } }]
                }
            }
        ],
        "Line": [
            {
                "kind": "ClassDeclaration",
                "name": "Line",
                "members": {
                    "p1": [{ "kind": "PropertyDeclaration", "name": "p1", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                    "p2": [{ "kind": "PropertyDeclaration", "name": "p2", "type": { "kind": "TypeReference", "typeName": "Vec2" } }]
                }
            }
        ],
        "Circle": [
            {
                "kind": "ClassDeclaration",
                "name": "Circle",
                "members": {
                    "center": [{ "kind": "PropertyDeclaration", "name": "center", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                    "radius": [{ "kind": "PropertyDeclaration", "name": "radius", "type": { "kind": "NumberKeyword" } }]
                }
            }
        ],
        "Polygon": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "Polygon",
                "type": { "kind": "ArrayType", "elementType": { "kind": "TypeReference", "typeName": "Vec2" } }
            }
        ],
        "Point": [{ "kind": "TypeAliasDeclaration", "name": "Point", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
        "Comp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "Comp",
                "members": {
                    "id": [
                        {
                            "kind": "PropertySignature",
                            "name": "id",
                            "type": { "kind": "TypeReference", "typeName": "Tag" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Component ID (if left out won't be treated as a comp).", "tags": {} }
                        }
                    ],
                    "require": [
                        {
                            "kind": "PropertySignature",
                            "name": "require",
                            "type": { "kind": "ArrayType", "elementType": { "kind": "TypeReference", "typeName": "Tag" } },
                            "questionToken": true,
                            "jsDoc": { "doc": "What other comps this comp depends on.", "tags": {} }
                        }
                    ],
                    "add": [
                        {
                            "kind": "PropertySignature",
                            "name": "add",
                            "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } },
                            "questionToken": true,
                            "jsDoc": { "doc": "Event that runs when host game obj is added to scene.", "tags": {} }
                        }
                    ],
                    "load": [
                        {
                            "kind": "PropertySignature",
                            "name": "load",
                            "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } },
                            "questionToken": true,
                            "jsDoc": { "doc": "Event that runs when host game obj is added to scene and game is loaded.", "tags": {} }
                        }
                    ],
                    "update": [
                        {
                            "kind": "PropertySignature",
                            "name": "update",
                            "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } },
                            "questionToken": true,
                            "jsDoc": { "doc": "Event that runs every frame.", "tags": {} }
                        }
                    ],
                    "draw": [
                        {
                            "kind": "PropertySignature",
                            "name": "draw",
                            "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } },
                            "questionToken": true,
                            "jsDoc": { "doc": "Event that runs every frame.", "tags": {} }
                        }
                    ],
                    "destroy": [
                        {
                            "kind": "PropertySignature",
                            "name": "destroy",
                            "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } },
                            "questionToken": true,
                            "jsDoc": { "doc": "Event that runs when obj is removed from scene.", "tags": {} }
                        }
                    ],
                    "inspect": [
                        {
                            "kind": "PropertySignature",
                            "name": "inspect",
                            "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "StringKeyword" } },
                            "questionToken": true,
                            "jsDoc": { "doc": "Debug info for inspect mode.", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "GameObjID": [{ "kind": "TypeAliasDeclaration", "name": "GameObjID", "type": { "kind": "NumberKeyword" } }],
        "PosComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "PosComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {
                    "pos": [
                        {
                            "kind": "PropertySignature",
                            "name": "pos",
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": { "doc": "Object's current world position.", "tags": {} }
                        }
                    ],
                    "move": [
                        {
                            "kind": "MethodSignature",
                            "name": "move",
                            "parameters": [
                                { "kind": "Parameter", "name": "xVel", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "yVel", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Move how many pixels per second. If object is 'solid', it won't move into other 'solid' objects.", "tags": {} }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "move",
                            "parameters": [{ "kind": "Parameter", "name": "vel", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "VoidKeyword" }
                        }
                    ],
                    "moveBy": [
                        {
                            "kind": "MethodSignature",
                            "name": "moveBy",
                            "parameters": [
                                { "kind": "Parameter", "name": "dx", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "dy", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Move how many pixels, without multiplying dt, but still checking for 'solid'.", "tags": {} }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "moveBy",
                            "parameters": [{ "kind": "Parameter", "name": "d", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "VoidKeyword" }
                        }
                    ],
                    "moveTo": [
                        {
                            "kind": "MethodSignature",
                            "name": "moveTo",
                            "parameters": [
                                { "kind": "Parameter", "name": "dest", "type": { "kind": "TypeReference", "typeName": "Vec2" } },
                                { "kind": "Parameter", "name": "speed", "type": { "kind": "NumberKeyword" }, "questionToken": true }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Move to a spot with a speed (pixels per second), teleports if speed is not given.", "tags": {} }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "moveTo",
                            "parameters": [
                                { "kind": "Parameter", "name": "x", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "y", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "speed", "type": { "kind": "NumberKeyword" }, "questionToken": true }
                            ],
                            "type": { "kind": "VoidKeyword" }
                        }
                    ],
                    "screenPos": [
                        {
                            "kind": "MethodSignature",
                            "name": "screenPos",
                            "parameters": [],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": { "doc": "Get position on screen after camera transform.", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "ScaleComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "ScaleComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {
                    "scale": [
                        {
                            "kind": "PropertySignature",
                            "name": "scale",
                            "type": { "kind": "UnionType", "types": [{ "kind": "TypeReference", "typeName": "Vec2" }, { "kind": "NumberKeyword" }] }
                        }
                    ],
                    "scaleTo": [
                        {
                            "kind": "MethodSignature",
                            "name": "scaleTo",
                            "parameters": [{ "kind": "Parameter", "name": "s", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "VoidKeyword" }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "scaleTo",
                            "parameters": [{ "kind": "Parameter", "name": "s", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "VoidKeyword" }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "scaleTo",
                            "parameters": [
                                { "kind": "Parameter", "name": "sx", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "sy", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "VoidKeyword" }
                        }
                    ]
                }
            }
        ],
        "RotateComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "RotateComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {
                    "angle": [
                        {
                            "kind": "PropertySignature",
                            "name": "angle",
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Angle in degrees.", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "ColorComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "ColorComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": { "color": [{ "kind": "PropertySignature", "name": "color", "type": { "kind": "TypeReference", "typeName": "Color" } }] }
            }
        ],
        "OpacityComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "OpacityComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": { "opacity": [{ "kind": "PropertySignature", "name": "opacity", "type": { "kind": "NumberKeyword" } }] }
            }
        ],
        "OriginComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "OriginComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {
                    "origin": [
                        {
                            "kind": "PropertySignature",
                            "name": "origin",
                            "type": {
                                "kind": "UnionType",
                                "types": [{ "kind": "TypeReference", "typeName": "Origin" }, { "kind": "TypeReference", "typeName": "Vec2" }]
                            },
                            "jsDoc": { "doc": "Origin point for render.", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "LayerComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "LayerComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {
                    "layer": [
                        {
                            "kind": "PropertySignature",
                            "name": "layer",
                            "type": { "kind": "StringKeyword" },
                            "jsDoc": { "doc": "Which layer this game obj belongs to.", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "ZComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "ZComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {
                    "z": [
                        {
                            "kind": "PropertySignature",
                            "name": "z",
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Defines the z-index of this game obj", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "FollowComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "FollowComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {
                    "follow": [
                        {
                            "kind": "PropertySignature",
                            "name": "follow",
                            "type": {
                                "kind": "TypeLiteral",
                                "members": {
                                    "obj": [{ "kind": "PropertySignature", "name": "obj", "type": { "kind": "TypeReference", "typeName": "GameObj" } }],
                                    "offset": [{ "kind": "PropertySignature", "name": "offset", "type": { "kind": "TypeReference", "typeName": "Vec2" } }]
                                }
                            }
                        }
                    ]
                }
            }
        ],
        "MoveComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "MoveComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {}
            }
        ],
        "OutviewCompOpt": [
            {
                "kind": "InterfaceDeclaration",
                "name": "OutviewCompOpt",
                "members": {
                    "hide": [
                        {
                            "kind": "PropertySignature",
                            "name": "hide",
                            "type": { "kind": "BooleanKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "If hide object when out of view.", "tags": {} }
                        }
                    ],
                    "pause": [
                        {
                            "kind": "PropertySignature",
                            "name": "pause",
                            "type": { "kind": "BooleanKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "If pause object when out of view.", "tags": {} }
                        }
                    ],
                    "destroy": [
                        {
                            "kind": "PropertySignature",
                            "name": "destroy",
                            "type": { "kind": "BooleanKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "If destroy object when out of view.", "tags": {} }
                        }
                    ],
                    "offset": [
                        {
                            "kind": "PropertySignature",
                            "name": "offset",
                            "type": { "kind": "UnionType", "types": [{ "kind": "NumberKeyword" }, { "kind": "TypeReference", "typeName": "Vec2" }] },
                            "questionToken": true,
                            "jsDoc": { "doc": "The screen bound offset.", "tags": {} }
                        }
                    ],
                    "delay": [
                        {
                            "kind": "PropertySignature",
                            "name": "delay",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "If it needs to stay out of view for a period of time before proceed to action.", "tags": {} }
                        }
                    ],
                    "onExitView": [
                        {
                            "kind": "PropertySignature",
                            "name": "onExitView",
                            "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } },
                            "questionToken": true,
                            "jsDoc": { "doc": "Register an event that runs when object goes out of view.", "tags": {} }
                        }
                    ],
                    "onEnterView": [
                        {
                            "kind": "PropertySignature",
                            "name": "onEnterView",
                            "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } },
                            "questionToken": true,
                            "jsDoc": { "doc": "Register an event that runs when object enters view.", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "OutviewComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "OutviewComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {
                    "isOutOfView": [
                        {
                            "kind": "MethodSignature",
                            "name": "isOutOfView",
                            "parameters": [],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If object is currently out of view.", "tags": {} }
                        }
                    ],
                    "onExitView": [
                        {
                            "kind": "MethodSignature",
                            "name": "onExitView",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": { "doc": "Register an event that runs when object goes out of view.", "tags": {} }
                        }
                    ],
                    "onEnterView": [
                        {
                            "kind": "MethodSignature",
                            "name": "onEnterView",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": { "doc": "Register an event that runs when object enters view.", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "CleanupCompOpt": [
            {
                "kind": "InterfaceDeclaration",
                "name": "CleanupCompOpt",
                "members": {
                    "offset": [
                        {
                            "kind": "PropertySignature",
                            "name": "offset",
                            "type": { "kind": "UnionType", "types": [{ "kind": "NumberKeyword" }, { "kind": "TypeReference", "typeName": "Vec2" }] },
                            "questionToken": true,
                            "jsDoc": { "doc": "The screen bound offset.", "tags": {} }
                        }
                    ],
                    "delay": [
                        {
                            "kind": "PropertySignature",
                            "name": "delay",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "If it needs to stay out of view for a period of time before proceed to destroy.", "tags": {} }
                        }
                    ],
                    "onCleanup": [
                        {
                            "kind": "PropertySignature",
                            "name": "onCleanup",
                            "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } },
                            "questionToken": true,
                            "jsDoc": { "doc": "Register an event that runs when object gets cleaned up.", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "CleanupComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "CleanupComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {}
            }
        ],
        "Collision": [
            {
                "kind": "InterfaceDeclaration",
                "name": "Collision",
                "members": {
                    "target": [
                        {
                            "kind": "PropertySignature",
                            "name": "target",
                            "type": { "kind": "TypeReference", "typeName": "GameObj" },
                            "jsDoc": { "doc": "The game object that we collided into.", "tags": {} }
                        }
                    ],
                    "displacement": [
                        {
                            "kind": "PropertySignature",
                            "name": "displacement",
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "jsDoc": { "doc": "The displacement it'll need to separate us from the target.", "tags": {} }
                        }
                    ],
                    "isTop": [
                        {
                            "kind": "MethodSignature",
                            "name": "isTop",
                            "parameters": [],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If the collision happened (roughly) on the top side of us.", "tags": {} }
                        }
                    ],
                    "isBottom": [
                        {
                            "kind": "MethodSignature",
                            "name": "isBottom",
                            "parameters": [],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If the collision happened (roughly) on the bottom side of us.", "tags": {} }
                        }
                    ],
                    "isLeft": [
                        {
                            "kind": "MethodSignature",
                            "name": "isLeft",
                            "parameters": [],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If the collision happened (roughly) on the left side of us.", "tags": {} }
                        }
                    ],
                    "isRight": [
                        {
                            "kind": "MethodSignature",
                            "name": "isRight",
                            "parameters": [],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If the collision happened (roughly) on the right side of us.", "tags": {} }
                        }
                    ]
                },
                "jsDoc": { "doc": "Collision resolution data.", "tags": {} }
            }
        ],
        "AreaCompOpt": [
            {
                "kind": "InterfaceDeclaration",
                "name": "AreaCompOpt",
                "members": {
                    "shape": [
                        {
                            "kind": "PropertySignature",
                            "name": "shape",
                            "type": { "kind": "TypeReference", "typeName": "Shape" },
                            "questionToken": true,
                            "jsDoc": { "doc": "The shape of the area.", "tags": {} }
                        }
                    ],
                    "offset": [
                        {
                            "kind": "PropertySignature",
                            "name": "offset",
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Position of area relative to position of the object.", "tags": {} }
                        }
                    ],
                    "width": [
                        {
                            "kind": "PropertySignature",
                            "name": "width",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Width of area.", "tags": {} }
                        }
                    ],
                    "height": [
                        {
                            "kind": "PropertySignature",
                            "name": "height",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Height of area.", "tags": {} }
                        }
                    ],
                    "scale": [
                        {
                            "kind": "PropertySignature",
                            "name": "scale",
                            "type": { "kind": "UnionType", "types": [{ "kind": "NumberKeyword" }, { "kind": "TypeReference", "typeName": "Vec2" }] },
                            "questionToken": true,
                            "jsDoc": { "doc": "Area scale.", "tags": {} }
                        }
                    ],
                    "cursor": [
                        {
                            "kind": "PropertySignature",
                            "name": "cursor",
                            "type": { "kind": "TypeReference", "typeName": "Cursor" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Cursor on hover.", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "AreaComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "AreaComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {
                    "area": [
                        {
                            "kind": "PropertySignature",
                            "name": "area",
                            "type": { "kind": "TypeReference", "typeName": "AreaCompOpt" },
                            "jsDoc": { "doc": "Collider area info.", "tags": {} }
                        }
                    ],
                    "isClicked": [
                        {
                            "kind": "MethodSignature",
                            "name": "isClicked",
                            "parameters": [],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If was just clicked on last frame.", "tags": {} }
                        }
                    ],
                    "isHovering": [
                        {
                            "kind": "MethodSignature",
                            "name": "isHovering",
                            "parameters": [],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If is being hovered on.", "tags": {} }
                        }
                    ],
                    "isColliding": [
                        {
                            "kind": "MethodSignature",
                            "name": "isColliding",
                            "parameters": [{ "kind": "Parameter", "name": "o", "type": { "kind": "TypeReference", "typeName": "GameObj" } }],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If is currently colliding with another game obj.", "tags": {} }
                        }
                    ],
                    "isTouching": [
                        {
                            "kind": "MethodSignature",
                            "name": "isTouching",
                            "parameters": [{ "kind": "Parameter", "name": "o", "type": { "kind": "TypeReference", "typeName": "GameObj" } }],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If is currently touching another game obj.", "tags": {} }
                        }
                    ],
                    "onClick": [
                        {
                            "kind": "MethodSignature",
                            "name": "onClick",
                            "parameters": [
                                { "kind": "Parameter", "name": "f", "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } } }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Register an event runs when clicked.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "onHover": [
                        {
                            "kind": "MethodSignature",
                            "name": "onHover",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "onHover",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                },
                                {
                                    "kind": "Parameter",
                                    "name": "onNotHover",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } },
                                    "questionToken": true
                                }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Register an event runs every frame when hovered.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "onCollide": [
                        {
                            "kind": "MethodSignature",
                            "name": "onCollide",
                            "parameters": [
                                { "kind": "Parameter", "name": "tag", "type": { "kind": "TypeReference", "typeName": "Tag" } },
                                {
                                    "kind": "Parameter",
                                    "name": "f",
                                    "type": {
                                        "kind": "FunctionType",
                                        "parameters": [
                                            { "kind": "Parameter", "name": "obj", "type": { "kind": "TypeReference", "typeName": "GameObj" } },
                                            {
                                                "kind": "Parameter",
                                                "name": "col",
                                                "type": { "kind": "TypeReference", "typeName": "Collision" },
                                                "questionToken": true
                                            }
                                        ],
                                        "type": { "kind": "VoidKeyword" }
                                    }
                                }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Register an event runs when collide with another game obj with certain tag.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "hasPoint": [
                        {
                            "kind": "MethodSignature",
                            "name": "hasPoint",
                            "parameters": [{ "kind": "Parameter", "name": "p", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If has a certain point inside collider.", "tags": {} }
                        }
                    ],
                    "pushOut": [
                        {
                            "kind": "MethodSignature",
                            "name": "pushOut",
                            "parameters": [{ "kind": "Parameter", "name": "obj", "type": { "kind": "TypeReference", "typeName": "GameObj" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Push out from another solid game obj if currently overlapping.", "tags": {} }
                        }
                    ],
                    "pushOutAll": [
                        {
                            "kind": "MethodSignature",
                            "name": "pushOutAll",
                            "parameters": [],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Push out from all other solid game objs if currently overlapping.", "tags": {} }
                        }
                    ],
                    "worldArea": [
                        {
                            "kind": "MethodSignature",
                            "name": "worldArea",
                            "parameters": [],
                            "type": { "kind": "TypeReference", "typeName": "Area" },
                            "jsDoc": { "doc": "Get the geometry data for the collider in world coordinate space.", "tags": {} }
                        }
                    ],
                    "screenArea": [
                        {
                            "kind": "MethodSignature",
                            "name": "screenArea",
                            "parameters": [],
                            "type": { "kind": "TypeReference", "typeName": "Area" },
                            "jsDoc": { "doc": "Get the geometry data for the collider in screen coordinate space.", "tags": {} }
                        }
                    ],
                    "collides": [
                        {
                            "kind": "PropertySignature",
                            "name": "collides",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "AreaComp" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "onCollide", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use onCollide() instead."] } }
                        }
                    ],
                    "clicks": [
                        {
                            "kind": "PropertySignature",
                            "name": "clicks",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "AreaComp" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "onClick", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use onClick() instead."] } }
                        }
                    ],
                    "hovers": [
                        {
                            "kind": "PropertySignature",
                            "name": "hovers",
                            "type": {
                                "kind": "IndexedAccessType",
                                "objectType": { "kind": "TypeReference", "typeName": "AreaComp" },
                                "indexType": {
                                    "kind": "LiteralType",
                                    "literal": { "kind": "StringLiteral", "text": "onHover", "hasExtendedUnicodeEscape": false }
                                }
                            },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use onHover() instead."] } }
                        }
                    ]
                }
            }
        ],
        "SpriteCompOpt": [
            {
                "kind": "InterfaceDeclaration",
                "name": "SpriteCompOpt",
                "members": {
                    "frame": [
                        {
                            "kind": "PropertySignature",
                            "name": "frame",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": {
                                "doc": "If the sprite is loaded with multiple frames, or sliced, use the frame option to specify which frame to draw.",
                                "tags": {}
                            }
                        }
                    ],
                    "tiled": [
                        {
                            "kind": "PropertySignature",
                            "name": "tiled",
                            "type": { "kind": "BooleanKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "If provided width and height, don't stretch but instead render tiled.", "tags": {} }
                        }
                    ],
                    "width": [
                        {
                            "kind": "PropertySignature",
                            "name": "width",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Stretch sprite to a certain width.", "tags": {} }
                        }
                    ],
                    "height": [
                        {
                            "kind": "PropertySignature",
                            "name": "height",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Stretch sprite to a certain height.", "tags": {} }
                        }
                    ],
                    "anim": [
                        {
                            "kind": "PropertySignature",
                            "name": "anim",
                            "type": { "kind": "StringKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Play an animation on start.", "tags": {} }
                        }
                    ],
                    "animSpeed": [
                        {
                            "kind": "PropertySignature",
                            "name": "animSpeed",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Animation speed scale multiplier.", "tags": {} }
                        }
                    ],
                    "flipX": [
                        {
                            "kind": "PropertySignature",
                            "name": "flipX",
                            "type": { "kind": "BooleanKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Flip texture horizontally.", "tags": {} }
                        }
                    ],
                    "flipY": [
                        {
                            "kind": "PropertySignature",
                            "name": "flipY",
                            "type": { "kind": "BooleanKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Flip texture vertically.", "tags": {} }
                        }
                    ],
                    "quad": [
                        {
                            "kind": "PropertySignature",
                            "name": "quad",
                            "type": { "kind": "TypeReference", "typeName": "Quad" },
                            "questionToken": true,
                            "jsDoc": { "doc": "The rectangular sub-area of the texture to render, default to full texture `quad(0, 0, 1, 1)`.", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "SpriteComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "SpriteComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {
                    "width": [
                        {
                            "kind": "PropertySignature",
                            "name": "width",
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Width for sprite.", "tags": {} }
                        }
                    ],
                    "height": [
                        {
                            "kind": "PropertySignature",
                            "name": "height",
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Height for sprite.", "tags": {} }
                        }
                    ],
                    "frame": [
                        { "kind": "PropertySignature", "name": "frame", "type": { "kind": "NumberKeyword" }, "jsDoc": { "doc": "Current frame.", "tags": {} } }
                    ],
                    "quad": [
                        {
                            "kind": "PropertySignature",
                            "name": "quad",
                            "type": { "kind": "TypeReference", "typeName": "Quad" },
                            "jsDoc": { "doc": "The rectangular area of the texture to render.", "tags": {} }
                        }
                    ],
                    "play": [
                        {
                            "kind": "MethodSignature",
                            "name": "play",
                            "parameters": [
                                { "kind": "Parameter", "name": "anim", "type": { "kind": "StringKeyword" } },
                                {
                                    "kind": "Parameter",
                                    "name": "options",
                                    "type": { "kind": "TypeReference", "typeName": "SpriteAnimPlayOpt" },
                                    "questionToken": true
                                }
                            ],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Play a piece of anim.", "tags": {} }
                        }
                    ],
                    "stop": [
                        {
                            "kind": "MethodSignature",
                            "name": "stop",
                            "parameters": [],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Stop current anim.", "tags": {} }
                        }
                    ],
                    "numFrames": [
                        {
                            "kind": "MethodSignature",
                            "name": "numFrames",
                            "parameters": [],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Get total number of frames.", "tags": {} }
                        }
                    ],
                    "curAnim": [
                        {
                            "kind": "MethodSignature",
                            "name": "curAnim",
                            "parameters": [],
                            "type": { "kind": "StringKeyword" },
                            "jsDoc": { "doc": "Get current anim name.", "tags": {} }
                        }
                    ],
                    "animSpeed": [
                        {
                            "kind": "PropertySignature",
                            "name": "animSpeed",
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Frame animation speed scale multiplier.", "tags": {} }
                        }
                    ],
                    "flipX": [
                        {
                            "kind": "MethodSignature",
                            "name": "flipX",
                            "parameters": [{ "kind": "Parameter", "name": "b", "type": { "kind": "BooleanKeyword" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Flip texture horizontally.", "tags": {} }
                        }
                    ],
                    "flipY": [
                        {
                            "kind": "MethodSignature",
                            "name": "flipY",
                            "parameters": [{ "kind": "Parameter", "name": "b", "type": { "kind": "BooleanKeyword" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Flip texture vertically.", "tags": {} }
                        }
                    ],
                    "onAnimStart": [
                        {
                            "kind": "MethodSignature",
                            "name": "onAnimStart",
                            "parameters": [
                                { "kind": "Parameter", "name": "name", "type": { "kind": "StringKeyword" } },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": { "doc": "Register an event that runs when an animation is played.", "tags": {} }
                        }
                    ],
                    "onAnimEnd": [
                        {
                            "kind": "MethodSignature",
                            "name": "onAnimEnd",
                            "parameters": [
                                { "kind": "Parameter", "name": "name", "type": { "kind": "StringKeyword" } },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": { "doc": "Register an event that runs when an animation is ended.", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "TextComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "TextComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {
                    "text": [
                        {
                            "kind": "PropertySignature",
                            "name": "text",
                            "type": { "kind": "StringKeyword" },
                            "jsDoc": { "doc": "The text to render.", "tags": {} }
                        }
                    ],
                    "textSize": [
                        {
                            "kind": "PropertySignature",
                            "name": "textSize",
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "The text size.", "tags": {} }
                        }
                    ],
                    "font": [
                        {
                            "kind": "PropertySignature",
                            "name": "font",
                            "type": { "kind": "UnionType", "types": [{ "kind": "StringKeyword" }, { "kind": "TypeReference", "typeName": "FontData" }] },
                            "jsDoc": { "doc": "The font to use.", "tags": {} }
                        }
                    ],
                    "width": [
                        { "kind": "PropertySignature", "name": "width", "type": { "kind": "NumberKeyword" }, "jsDoc": { "doc": "Width of text.", "tags": {} } }
                    ],
                    "height": [
                        {
                            "kind": "PropertySignature",
                            "name": "height",
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Height of text.", "tags": {} }
                        }
                    ],
                    "lineSpacing": [
                        {
                            "kind": "PropertySignature",
                            "name": "lineSpacing",
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "The gap between each line.", "tags": { "since": ["v2000.2"] } }
                        }
                    ],
                    "letterSpacing": [
                        {
                            "kind": "PropertySignature",
                            "name": "letterSpacing",
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "The gap between each character.", "tags": { "since": ["v2000.2"] } }
                        }
                    ],
                    "transform": [
                        {
                            "kind": "PropertySignature",
                            "name": "transform",
                            "type": {
                                "kind": "UnionType",
                                "types": [
                                    { "kind": "TypeReference", "typeName": "CharTransform" },
                                    { "kind": "TypeReference", "typeName": "CharTransformFunc" }
                                ]
                            },
                            "jsDoc": {
                                "doc": "Transform the pos, scale, rotation or color for each character based on the index or char.",
                                "tags": { "since": ["v2000.1"] }
                            }
                        }
                    ],
                    "styles": [
                        {
                            "kind": "PropertySignature",
                            "name": "styles",
                            "type": {
                                "kind": "TypeReference",
                                "typeName": "Record",
                                "typeArguments": [
                                    { "kind": "StringKeyword" },
                                    {
                                        "kind": "UnionType",
                                        "types": [
                                            { "kind": "TypeReference", "typeName": "CharTransform" },
                                            { "kind": "TypeReference", "typeName": "CharTransformFunc" }
                                        ]
                                    }
                                ]
                            },
                            "jsDoc": {
                                "doc": "Stylesheet for styled chunks, in the syntax of \"this is a [styled].stylename word\".",
                                "tags": { "since": ["v2000.2"] }
                            }
                        }
                    ]
                }
            }
        ],
        "TextCompOpt": [
            {
                "kind": "InterfaceDeclaration",
                "name": "TextCompOpt",
                "members": {
                    "size": [
                        {
                            "kind": "PropertySignature",
                            "name": "size",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Height of text.", "tags": {} }
                        }
                    ],
                    "font": [
                        {
                            "kind": "PropertySignature",
                            "name": "font",
                            "type": { "kind": "UnionType", "types": [{ "kind": "StringKeyword" }, { "kind": "TypeReference", "typeName": "FontData" }] },
                            "questionToken": true,
                            "jsDoc": { "doc": "The font to use.", "tags": {} }
                        }
                    ],
                    "width": [
                        {
                            "kind": "PropertySignature",
                            "name": "width",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Wrap text to a certain width.", "tags": {} }
                        }
                    ],
                    "lineSpacing": [
                        {
                            "kind": "PropertySignature",
                            "name": "lineSpacing",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "The gap between each line.", "tags": { "since": ["v2000.2"] } }
                        }
                    ],
                    "letterSpacing": [
                        {
                            "kind": "PropertySignature",
                            "name": "letterSpacing",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "The gap between each character.", "tags": { "since": ["v2000.2"] } }
                        }
                    ],
                    "transform": [
                        {
                            "kind": "PropertySignature",
                            "name": "transform",
                            "type": {
                                "kind": "UnionType",
                                "types": [
                                    { "kind": "TypeReference", "typeName": "CharTransform" },
                                    { "kind": "TypeReference", "typeName": "CharTransformFunc" }
                                ]
                            },
                            "questionToken": true,
                            "jsDoc": {
                                "doc": "Transform the pos, scale, rotation or color for each character based on the index or char.",
                                "tags": { "since": ["v2000.1"] }
                            }
                        }
                    ],
                    "styles": [
                        {
                            "kind": "PropertySignature",
                            "name": "styles",
                            "type": {
                                "kind": "TypeReference",
                                "typeName": "Record",
                                "typeArguments": [
                                    { "kind": "StringKeyword" },
                                    {
                                        "kind": "UnionType",
                                        "types": [
                                            { "kind": "TypeReference", "typeName": "CharTransform" },
                                            { "kind": "TypeReference", "typeName": "CharTransformFunc" }
                                        ]
                                    }
                                ]
                            },
                            "questionToken": true,
                            "jsDoc": {
                                "doc": "Stylesheet for styled chunks, in the syntax of \"this is a [styled].stylename word\".",
                                "tags": { "since": ["v2000.2"] }
                            }
                        }
                    ]
                }
            }
        ],
        "RectCompOpt": [
            {
                "kind": "InterfaceDeclaration",
                "name": "RectCompOpt",
                "members": {
                    "radius": [
                        {
                            "kind": "PropertySignature",
                            "name": "radius",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Radius of the rectangle corners.", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "RectComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "RectComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {
                    "width": [
                        {
                            "kind": "PropertySignature",
                            "name": "width",
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Width of rectangle.", "tags": {} }
                        }
                    ],
                    "height": [
                        {
                            "kind": "PropertySignature",
                            "name": "height",
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Height of rectangle.", "tags": {} }
                        }
                    ],
                    "radius": [
                        {
                            "kind": "PropertySignature",
                            "name": "radius",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "The radius of each corner.", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "CircleComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "CircleComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {
                    "radius": [
                        {
                            "kind": "PropertySignature",
                            "name": "radius",
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Radius of circle.", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "UVQuadComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "UVQuadComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {
                    "width": [
                        { "kind": "PropertySignature", "name": "width", "type": { "kind": "NumberKeyword" }, "jsDoc": { "doc": "Width of rect.", "tags": {} } }
                    ],
                    "height": [
                        {
                            "kind": "PropertySignature",
                            "name": "height",
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Height of height.", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "Area": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "Area",
                "type": {
                    "kind": "UnionType",
                    "types": [
                        {
                            "kind": "IntersectionType",
                            "types": [
                                {
                                    "kind": "TypeLiteral",
                                    "members": {
                                        "shape": [
                                            {
                                                "kind": "PropertySignature",
                                                "name": "shape",
                                                "type": {
                                                    "kind": "LiteralType",
                                                    "literal": { "kind": "StringLiteral", "text": "rect", "hasExtendedUnicodeEscape": false }
                                                }
                                            }
                                        ]
                                    }
                                },
                                { "kind": "TypeReference", "typeName": "Rect" }
                            ]
                        },
                        {
                            "kind": "IntersectionType",
                            "types": [
                                {
                                    "kind": "TypeLiteral",
                                    "members": {
                                        "shape": [
                                            {
                                                "kind": "PropertySignature",
                                                "name": "shape",
                                                "type": {
                                                    "kind": "LiteralType",
                                                    "literal": { "kind": "StringLiteral", "text": "line", "hasExtendedUnicodeEscape": false }
                                                }
                                            }
                                        ]
                                    }
                                },
                                { "kind": "TypeReference", "typeName": "Line" }
                            ]
                        },
                        {
                            "kind": "IntersectionType",
                            "types": [
                                {
                                    "kind": "TypeLiteral",
                                    "members": {
                                        "shape": [
                                            {
                                                "kind": "PropertySignature",
                                                "name": "shape",
                                                "type": {
                                                    "kind": "LiteralType",
                                                    "literal": { "kind": "StringLiteral", "text": "circle", "hasExtendedUnicodeEscape": false }
                                                }
                                            }
                                        ]
                                    }
                                },
                                { "kind": "TypeReference", "typeName": "Circle" }
                            ]
                        },
                        {
                            "kind": "IntersectionType",
                            "types": [
                                {
                                    "kind": "TypeLiteral",
                                    "members": {
                                        "shape": [
                                            {
                                                "kind": "PropertySignature",
                                                "name": "shape",
                                                "type": {
                                                    "kind": "LiteralType",
                                                    "literal": { "kind": "StringLiteral", "text": "point", "hasExtendedUnicodeEscape": false }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "kind": "TypeLiteral",
                                    "members": {
                                        "pt": [{ "kind": "PropertySignature", "name": "pt", "type": { "kind": "TypeReference", "typeName": "Point" } }]
                                    }
                                }
                            ]
                        },
                        {
                            "kind": "IntersectionType",
                            "types": [
                                {
                                    "kind": "TypeLiteral",
                                    "members": {
                                        "shape": [
                                            {
                                                "kind": "PropertySignature",
                                                "name": "shape",
                                                "type": {
                                                    "kind": "LiteralType",
                                                    "literal": { "kind": "StringLiteral", "text": "polygon", "hasExtendedUnicodeEscape": false }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "kind": "TypeLiteral",
                                    "members": {
                                        "pts": [{ "kind": "PropertySignature", "name": "pts", "type": { "kind": "TypeReference", "typeName": "Polygon" } }]
                                    }
                                }
                            ]
                        }
                    ]
                },
                "jsDoc": {
                    "doc": "Union type for area / collider data of different shapes (\"rect\", \"line\", \"circle\", \"point\" and \"polygon\").",
                    "tags": {}
                }
            }
        ],
        "Shape": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "Shape",
                "type": {
                    "kind": "UnionType",
                    "types": [
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "rect", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "line", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "point", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "circle", "hasExtendedUnicodeEscape": false } },
                        { "kind": "LiteralType", "literal": { "kind": "StringLiteral", "text": "polygon", "hasExtendedUnicodeEscape": false } }
                    ]
                }
            }
        ],
        "OutlineComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "OutlineComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": { "outline": [{ "kind": "PropertySignature", "name": "outline", "type": { "kind": "TypeReference", "typeName": "Outline" } }] }
            }
        ],
        "Debug": [
            {
                "kind": "InterfaceDeclaration",
                "name": "Debug",
                "members": {
                    "paused": [
                        {
                            "kind": "PropertySignature",
                            "name": "paused",
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "Pause the whole game.", "tags": {} }
                        }
                    ],
                    "inspect": [
                        {
                            "kind": "PropertySignature",
                            "name": "inspect",
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "Draw bounding boxes of all objects with `area()` component, hover to inspect their states.", "tags": {} }
                        }
                    ],
                    "timeScale": [
                        {
                            "kind": "PropertySignature",
                            "name": "timeScale",
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Global time scale.", "tags": {} }
                        }
                    ],
                    "showLog": [
                        {
                            "kind": "PropertySignature",
                            "name": "showLog",
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "Show the debug log or not.", "tags": {} }
                        }
                    ],
                    "fps": [
                        {
                            "kind": "MethodSignature",
                            "name": "fps",
                            "parameters": [],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Current frames per second.", "tags": {} }
                        }
                    ],
                    "objCount": [
                        {
                            "kind": "MethodSignature",
                            "name": "objCount",
                            "parameters": [],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Number of all existing game objects.", "tags": {} }
                        }
                    ],
                    "drawCalls": [
                        {
                            "kind": "MethodSignature",
                            "name": "drawCalls",
                            "parameters": [],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Number of draw calls made last frame.", "tags": {} }
                        }
                    ],
                    "stepFrame": [
                        {
                            "kind": "MethodSignature",
                            "name": "stepFrame",
                            "parameters": [],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Step to the next frame. Useful with pausing.", "tags": {} }
                        }
                    ],
                    "clearLog": [
                        {
                            "kind": "MethodSignature",
                            "name": "clearLog",
                            "parameters": [],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Clear the debug log.", "tags": {} }
                        }
                    ],
                    "log": [
                        {
                            "kind": "MethodSignature",
                            "name": "log",
                            "parameters": [{ "kind": "Parameter", "name": "msg", "type": { "kind": "StringKeyword" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Log some text to on screen debug log.", "tags": {} }
                        }
                    ],
                    "error": [
                        {
                            "kind": "MethodSignature",
                            "name": "error",
                            "parameters": [{ "kind": "Parameter", "name": "msg", "type": { "kind": "StringKeyword" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Log an error message to on screen debug log.", "tags": {} }
                        }
                    ],
                    "curRecording": [
                        {
                            "kind": "PropertySignature",
                            "name": "curRecording",
                            "type": {
                                "kind": "UnionType",
                                "types": [{ "kind": "TypeReference", "typeName": "Recording" }, { "kind": "LiteralType", "literal": { "kind": "NullKeyword" } }]
                            },
                            "jsDoc": { "doc": "The recording handle if currently in recording mode.", "tags": { "since": ["v2000.1"] } }
                        }
                    ]
                }
            }
        ],
        "UniformValue": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "UniformValue",
                "type": {
                    "kind": "UnionType",
                    "types": [
                        { "kind": "TypeReference", "typeName": "Vec2" },
                        { "kind": "TypeReference", "typeName": "Vec3" },
                        { "kind": "TypeReference", "typeName": "Color" },
                        { "kind": "TypeReference", "typeName": "Mat4" }
                    ]
                }
            }
        ],
        "Uniform": [
            {
                "kind": "TypeAliasDeclaration",
                "name": "Uniform",
                "type": {
                    "kind": "TypeReference",
                    "typeName": "Record",
                    "typeArguments": [{ "kind": "StringKeyword" }, { "kind": "TypeReference", "typeName": "UniformValue" }]
                }
            }
        ],
        "ShaderComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "ShaderComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {
                    "uniform": [{ "kind": "PropertySignature", "name": "uniform", "type": { "kind": "TypeReference", "typeName": "Uniform" } }],
                    "shader": [{ "kind": "PropertySignature", "name": "shader", "type": { "kind": "StringKeyword" } }]
                }
            }
        ],
        "BodyComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "BodyComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {
                    "solid": [
                        {
                            "kind": "PropertySignature",
                            "name": "solid",
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If should collide with other solid objects.", "tags": {} }
                        }
                    ],
                    "jumpForce": [
                        {
                            "kind": "PropertySignature",
                            "name": "jumpForce",
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Initial speed in pixels per second for jump().", "tags": {} }
                        }
                    ],
                    "weight": [
                        {
                            "kind": "PropertySignature",
                            "name": "weight",
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Gravity multiplier.", "tags": {} }
                        }
                    ],
                    "curPlatform": [
                        {
                            "kind": "MethodSignature",
                            "name": "curPlatform",
                            "parameters": [],
                            "type": {
                                "kind": "UnionType",
                                "types": [{ "kind": "TypeReference", "typeName": "GameObj" }, { "kind": "LiteralType", "literal": { "kind": "NullKeyword" } }]
                            },
                            "jsDoc": { "doc": "Current platform landing on.", "tags": {} }
                        }
                    ],
                    "isGrounded": [
                        {
                            "kind": "MethodSignature",
                            "name": "isGrounded",
                            "parameters": [],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If currently landing on a platform.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "isFalling": [
                        {
                            "kind": "MethodSignature",
                            "name": "isFalling",
                            "parameters": [],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If currently falling.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "jump": [
                        {
                            "kind": "MethodSignature",
                            "name": "jump",
                            "parameters": [{ "kind": "Parameter", "name": "force", "type": { "kind": "NumberKeyword" }, "questionToken": true }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Upward thrust.", "tags": {} }
                        }
                    ],
                    "doubleJump": [
                        {
                            "kind": "MethodSignature",
                            "name": "doubleJump",
                            "parameters": [{ "kind": "Parameter", "name": "f", "type": { "kind": "NumberKeyword" }, "questionToken": true }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Performs double jump (the initial jump only happens if player is grounded).", "tags": {} }
                        }
                    ],
                    "onGround": [
                        {
                            "kind": "MethodSignature",
                            "name": "onGround",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": { "doc": "Register an event that runs when the object is grounded.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "onFall": [
                        {
                            "kind": "MethodSignature",
                            "name": "onFall",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": { "doc": "Register an event that runs when the object starts falling.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "onHeadbutt": [
                        {
                            "kind": "MethodSignature",
                            "name": "onHeadbutt",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": {
                                "doc": "Register an event that runs when the object bumps into something on the head.",
                                "tags": { "since": ["v2000.1"] }
                            }
                        }
                    ],
                    "onDoubleJump": [
                        {
                            "kind": "MethodSignature",
                            "name": "onDoubleJump",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": {
                                "doc": "Register an event that runs when the object performs the second jump when double jumping.",
                                "tags": { "since": ["v2000.1"] }
                            }
                        }
                    ],
                    "grounded": [
                        {
                            "kind": "MethodSignature",
                            "name": "grounded",
                            "parameters": [],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use isGrounded() instead."] } }
                        }
                    ],
                    "falling": [
                        {
                            "kind": "MethodSignature",
                            "name": "falling",
                            "parameters": [],
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "tags": { "deprecated": ["v2000.1 Use isFalling() instead."] } }
                        }
                    ]
                }
            }
        ],
        "BodyCompOpt": [
            {
                "kind": "InterfaceDeclaration",
                "name": "BodyCompOpt",
                "members": {
                    "jumpForce": [
                        {
                            "kind": "PropertySignature",
                            "name": "jumpForce",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Initial speed in pixels per second for jump().", "tags": {} }
                        }
                    ],
                    "maxVel": [
                        {
                            "kind": "PropertySignature",
                            "name": "maxVel",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Maximum velocity when falling.", "tags": {} }
                        }
                    ],
                    "weight": [
                        {
                            "kind": "PropertySignature",
                            "name": "weight",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Gravity multiplier.", "tags": {} }
                        }
                    ],
                    "solid": [
                        {
                            "kind": "PropertySignature",
                            "name": "solid",
                            "type": { "kind": "BooleanKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "If should not move through other solid objects.", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "Timer": [
            {
                "kind": "ClassDeclaration",
                "name": "Timer",
                "members": {
                    "time": [
                        { "kind": "PropertyDeclaration", "name": "time", "type": { "kind": "NumberKeyword" }, "jsDoc": { "doc": "Time left.", "tags": {} } }
                    ],
                    "action": [
                        {
                            "kind": "PropertyDeclaration",
                            "name": "action",
                            "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } },
                            "jsDoc": { "doc": "The action to take when timer is up", "tags": {} }
                        }
                    ],
                    "finished": [{ "kind": "PropertyDeclaration", "name": "finished", "type": { "kind": "BooleanKeyword" } }],
                    "paused": [{ "kind": "PropertyDeclaration", "name": "paused", "type": { "kind": "BooleanKeyword" } }],
                    "tick": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "tick",
                            "parameters": [{ "kind": "Parameter", "name": "dt", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "BooleanKeyword" }
                        }
                    ],
                    "reset": [
                        {
                            "kind": "MethodDeclaration",
                            "name": "reset",
                            "parameters": [{ "kind": "Parameter", "name": "time", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "VoidKeyword" }
                        }
                    ]
                }
            }
        ],
        "TimerComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "TimerComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {
                    "wait": [
                        {
                            "kind": "MethodSignature",
                            "name": "wait",
                            "parameters": [
                                { "kind": "Parameter", "name": "n", "type": { "kind": "NumberKeyword" } },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": { "doc": "Run the callback after n seconds.", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "SolidComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "SolidComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {
                    "solid": [
                        {
                            "kind": "PropertySignature",
                            "name": "solid",
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If should stop other solid objects from moving through.", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "FixedComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "FixedComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {
                    "fixed": [
                        {
                            "kind": "PropertySignature",
                            "name": "fixed",
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If the obj is unaffected by camera", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "StayComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "StayComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {
                    "stay": [
                        {
                            "kind": "PropertySignature",
                            "name": "stay",
                            "type": { "kind": "BooleanKeyword" },
                            "jsDoc": { "doc": "If the obj should not be destroyed on scene switch.", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "HealthComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "HealthComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {
                    "hurt": [
                        {
                            "kind": "MethodSignature",
                            "name": "hurt",
                            "parameters": [{ "kind": "Parameter", "name": "n", "type": { "kind": "NumberKeyword" }, "questionToken": true }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Decrease HP by n (defaults to 1).", "tags": {} }
                        }
                    ],
                    "heal": [
                        {
                            "kind": "MethodSignature",
                            "name": "heal",
                            "parameters": [{ "kind": "Parameter", "name": "n", "type": { "kind": "NumberKeyword" }, "questionToken": true }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Increase HP by n (defaults to 1).", "tags": {} }
                        }
                    ],
                    "hp": [
                        {
                            "kind": "MethodSignature",
                            "name": "hp",
                            "parameters": [],
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Current health points.", "tags": {} }
                        }
                    ],
                    "setHP": [
                        {
                            "kind": "MethodSignature",
                            "name": "setHP",
                            "parameters": [{ "kind": "Parameter", "name": "hp", "type": { "kind": "NumberKeyword" } }],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Set current health points.", "tags": {} }
                        }
                    ],
                    "onHurt": [
                        {
                            "kind": "MethodSignature",
                            "name": "onHurt",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": { "doc": "Register an event that runs when hurt() is called upon the object.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "onHeal": [
                        {
                            "kind": "MethodSignature",
                            "name": "onHeal",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": { "doc": "Register an event that runs when heal() is called upon the object.", "tags": { "since": ["v2000.1"] } }
                        }
                    ],
                    "onDeath": [
                        {
                            "kind": "MethodSignature",
                            "name": "onDeath",
                            "parameters": [
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "EventCanceller" },
                            "jsDoc": { "doc": "Register an event that runs when object's HP is equal or below 0.", "tags": { "since": ["v2000.1"] } }
                        }
                    ]
                }
            }
        ],
        "LifespanComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "LifespanComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {}
            }
        ],
        "LifespanCompOpt": [
            {
                "kind": "InterfaceDeclaration",
                "name": "LifespanCompOpt",
                "members": {
                    "fade": [
                        {
                            "kind": "PropertySignature",
                            "name": "fade",
                            "type": { "kind": "NumberKeyword" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Fade out duration (default 0 which is no fade out).", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "StateComp": [
            {
                "kind": "InterfaceDeclaration",
                "name": "StateComp",
                "heritageClauses": [
                    {
                        "kind": "HeritageClause",
                        "token": 94,
                        "types": [{ "kind": "ExpressionWithTypeArguments", "expression": { "kind": "Identifier", "escapedText": "Comp" } }]
                    }
                ],
                "members": {
                    "state": [
                        { "kind": "PropertySignature", "name": "state", "type": { "kind": "StringKeyword" }, "jsDoc": { "doc": "Current state.", "tags": {} } }
                    ],
                    "enterState": [
                        {
                            "kind": "PropertySignature",
                            "name": "enterState",
                            "type": {
                                "kind": "FunctionType",
                                "parameters": [
                                    { "kind": "Parameter", "name": "state", "type": { "kind": "StringKeyword" } },
                                    { "kind": "Parameter", "name": "args", "dotDotDotToken": { "kind": "DotDotDotToken" } }
                                ],
                                "type": { "kind": "VoidKeyword" }
                            },
                            "jsDoc": { "doc": "Enter a state, trigger onStateLeave for previous state and onStateEnter for the new State state.", "tags": {} }
                        }
                    ],
                    "onStateTransition": [
                        {
                            "kind": "MethodSignature",
                            "name": "onStateTransition",
                            "parameters": [
                                { "kind": "Parameter", "name": "from", "type": { "kind": "StringKeyword" } },
                                { "kind": "Parameter", "name": "to", "type": { "kind": "StringKeyword" } },
                                {
                                    "kind": "Parameter",
                                    "name": "action",
                                    "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                }
                            ],
                            "jsDoc": {
                                "doc": "Register event that runs once when a specific state transition happens. Accepts arguments passed from `enterState(name, ...args)`.",
                                "tags": { "since": ["v2000.2"] }
                            }
                        }
                    ],
                    "onStateEnter": [
                        {
                            "kind": "PropertySignature",
                            "name": "onStateEnter",
                            "type": {
                                "kind": "FunctionType",
                                "parameters": [
                                    { "kind": "Parameter", "name": "state", "type": { "kind": "StringKeyword" } },
                                    {
                                        "kind": "Parameter",
                                        "name": "action",
                                        "type": {
                                            "kind": "FunctionType",
                                            "parameters": [{ "kind": "Parameter", "name": "args", "dotDotDotToken": { "kind": "DotDotDotToken" } }],
                                            "type": { "kind": "VoidKeyword" }
                                        }
                                    }
                                ],
                                "type": { "kind": "VoidKeyword" }
                            },
                            "jsDoc": {
                                "doc": "Register event that runs once when enters a specific state. Accepts arguments passed from `enterState(name, ...args)`.",
                                "tags": {}
                            }
                        }
                    ],
                    "onStateLeave": [
                        {
                            "kind": "PropertySignature",
                            "name": "onStateLeave",
                            "type": {
                                "kind": "FunctionType",
                                "parameters": [
                                    { "kind": "Parameter", "name": "state", "type": { "kind": "StringKeyword" } },
                                    {
                                        "kind": "Parameter",
                                        "name": "action",
                                        "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                    }
                                ],
                                "type": { "kind": "VoidKeyword" }
                            },
                            "jsDoc": { "doc": "Register an event that runs once when leaves a specific state.", "tags": {} }
                        }
                    ],
                    "onStateUpdate": [
                        {
                            "kind": "PropertySignature",
                            "name": "onStateUpdate",
                            "type": {
                                "kind": "FunctionType",
                                "parameters": [
                                    { "kind": "Parameter", "name": "state", "type": { "kind": "StringKeyword" } },
                                    {
                                        "kind": "Parameter",
                                        "name": "action",
                                        "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                    }
                                ],
                                "type": { "kind": "VoidKeyword" }
                            },
                            "jsDoc": { "doc": "Register an event that runs every frame when in a specific state.", "tags": {} }
                        }
                    ],
                    "onStateDraw": [
                        {
                            "kind": "PropertySignature",
                            "name": "onStateDraw",
                            "type": {
                                "kind": "FunctionType",
                                "parameters": [
                                    { "kind": "Parameter", "name": "state", "type": { "kind": "StringKeyword" } },
                                    {
                                        "kind": "Parameter",
                                        "name": "action",
                                        "type": { "kind": "FunctionType", "parameters": [], "type": { "kind": "VoidKeyword" } }
                                    }
                                ],
                                "type": { "kind": "VoidKeyword" }
                            },
                            "jsDoc": { "doc": "Register an event that runs every frame when in a specific state.", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "LevelOpt": [
            {
                "kind": "InterfaceDeclaration",
                "name": "LevelOpt",
                "members": {
                    "width": [
                        {
                            "kind": "PropertySignature",
                            "name": "width",
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Width of each block.", "tags": {} }
                        }
                    ],
                    "height": [
                        {
                            "kind": "PropertySignature",
                            "name": "height",
                            "type": { "kind": "NumberKeyword" },
                            "jsDoc": { "doc": "Height of each block.", "tags": {} }
                        }
                    ],
                    "pos": [
                        {
                            "kind": "PropertySignature",
                            "name": "pos",
                            "type": { "kind": "TypeReference", "typeName": "Vec2" },
                            "questionToken": true,
                            "jsDoc": { "doc": "Position of the first block.", "tags": {} }
                        }
                    ],
                    "any": [
                        {
                            "kind": "PropertySignature",
                            "name": "any",
                            "type": {
                                "kind": "FunctionType",
                                "parameters": [
                                    { "kind": "Parameter", "name": "s", "type": { "kind": "StringKeyword" } },
                                    { "kind": "Parameter", "name": "pos", "type": { "kind": "TypeReference", "typeName": "Vec2" } }
                                ],
                                "type": {
                                    "kind": "UnionType",
                                    "types": [
                                        { "kind": "TypeReference", "typeName": "CompList", "typeArguments": [{ "kind": "AnyKeyword" }] },
                                        { "kind": "UndefinedKeyword" }
                                    ]
                                }
                            },
                            "questionToken": true,
                            "jsDoc": { "doc": "Called when encountered an undefined symbol.", "tags": {} }
                        }
                    ]
                }
            }
        ],
        "Level": [
            {
                "kind": "InterfaceDeclaration",
                "name": "Level",
                "members": {
                    "getPos": [
                        {
                            "kind": "MethodSignature",
                            "name": "getPos",
                            "parameters": [{ "kind": "Parameter", "name": "p", "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "getPos",
                            "parameters": [
                                { "kind": "Parameter", "name": "x", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "y", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "Vec2" }
                        }
                    ],
                    "spawn": [
                        {
                            "kind": "MethodSignature",
                            "name": "spawn",
                            "parameters": [
                                { "kind": "Parameter", "name": "sym", "type": { "kind": "StringKeyword" } },
                                { "kind": "Parameter", "name": "p", "type": { "kind": "TypeReference", "typeName": "Vec2" } }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "GameObj" }
                        },
                        {
                            "kind": "MethodSignature",
                            "name": "spawn",
                            "parameters": [
                                { "kind": "Parameter", "name": "sym", "type": { "kind": "StringKeyword" } },
                                { "kind": "Parameter", "name": "x", "type": { "kind": "NumberKeyword" } },
                                { "kind": "Parameter", "name": "y", "type": { "kind": "NumberKeyword" } }
                            ],
                            "type": { "kind": "TypeReference", "typeName": "GameObj" }
                        }
                    ],
                    "width": [{ "kind": "MethodSignature", "name": "width", "parameters": [], "type": { "kind": "NumberKeyword" } }],
                    "height": [{ "kind": "MethodSignature", "name": "height", "parameters": [], "type": { "kind": "NumberKeyword" } }],
                    "gridWidth": [{ "kind": "MethodSignature", "name": "gridWidth", "parameters": [], "type": { "kind": "NumberKeyword" } }],
                    "gridHeight": [{ "kind": "MethodSignature", "name": "gridHeight", "parameters": [], "type": { "kind": "NumberKeyword" } }],
                    "offset": [{ "kind": "MethodSignature", "name": "offset", "parameters": [], "type": { "kind": "TypeReference", "typeName": "Vec2" } }],
                    "destroy": [{ "kind": "MethodSignature", "name": "destroy", "parameters": [] }]
                }
            }
        ],
        "Kaboom": [
            {
                "kind": "InterfaceDeclaration",
                "name": "Kaboom",
                "members": {
                    "destroy": [
                        {
                            "kind": "MethodSignature",
                            "name": "destroy",
                            "parameters": [],
                            "type": { "kind": "VoidKeyword" },
                            "jsDoc": { "doc": "Remove kaboom.", "tags": {} }
                        }
                    ]
                }
            }
        ]
    },
    "sections": [
        { "name": "Start", "entries": ["kaboom"] },
        {
            "name": "Game Obj",
            "entries": ["add", "get", "every", "revery", "readd", "destroy", "destroyAll"],
            "doc": "Game Object is the basic unit of entity in a kaboom world. Everything is a game object, the player, a butterfly, a tree, or even a piece of text.\n\nThis section contains functions to add, remove, and access game objects. To actually make them do stuff, check out the [Components](#Components) section.\n"
        },
        {
            "name": "Components",
            "entries": [
                "pos",
                "scale",
                "rotate",
                "color",
                "opacity",
                "sprite",
                "text",
                "rect",
                "circle",
                "uvquad",
                "area",
                "origin",
                "layer",
                "z",
                "outline",
                "body",
                "solid",
                "move",
                "outview",
                "cleanup",
                "follow",
                "shader",
                "timer",
                "fixed",
                "stay",
                "health",
                "lifespan",
                "state"
            ],
            "doc": "Kaboom uses a flexible component system which values composition over inheritence. Each game object is composed from a list of components, each component gives the game object certain capabilities.\n\nUse `add()` to assemble the components together into a Game Object and add them to the world.\n\n```js\nconst player = add([\n\tsprite(\"froggy\"),\n\tpos(100, 200),\n\tarea(),\n\tbody(),\n])\n\n// .jump() is provided by body() component\nplayer.jump()\n\n// .moveTo() is provided by pos() component\nplayer.moveTo(120, 80)\n\n// .onCollide() is provided by the area() component\nplayer.onCollide(\"enemy\", (enemy) => {\n\tdestroy(enemy)\n\taddExplosion()\n})\n```\n\nTo see what methods and properties a component offers, click on the type that the component function returns, e.g. `PosComp`, which will open a panel showing all the properties and methods it'd give the game object.\n\nTo learn more about how components work or how to make your own component, check out the [component](/play?demo=component) demo.\n"
        },
        {
            "name": "Events",
            "entries": [
                "on",
                "onUpdate",
                "onDraw",
                "onLoad",
                "onCollide",
                "onClick",
                "onHover",
                "onKeyDown",
                "onKeyPress",
                "onKeyPressRepeat",
                "onKeyRelease",
                "onCharInput",
                "onMouseDown",
                "onMousePress",
                "onMouseRelease",
                "onMouseMove",
                "onTouchStart",
                "onTouchMove",
                "onTouchEnd",
                "action",
                "render",
                "ready",
                "collides",
                "clicks",
                "hovers",
                "keyDown",
                "keyPress",
                "keyPressRep",
                "keyRelease",
                "charInput",
                "mouseClick",
                "mouseRelease",
                "mouseDown",
                "mouseMove",
                "touchStart",
                "touchMove",
                "touchEnd"
            ],
            "doc": "Kaboom uses events extensively for a flat and declarative code style.\n\nFor example, it's most common for a game to have something run every frame which can be achieved by adding an `onUpdate()` event\n\n```js\n// Make something always move to the right\nonUpdate(() => {\n\tbanana.move(320, 0)\n})\n```\n\nEvents are also used for input handlers.\n\n```js\nonKeyPress(\"space\", () => {\n\tplayer.jump()\n})\n```\n\nEvery function with the `on` prefix is an event register function that takes a callback function as the last argument, and should return a function that cancels the event listener.\n\nNote that you should never nest one event handler function inside another or it might cause severe performance punishment.\n"
        },
        {
            "name": "Assets",
            "entries": ["loadRoot", "loadSprite", "loadSpriteAtlas", "loadAseprite", "loadPedit", "loadBean", "loadSound", "loadFont", "loadShader", "load"],
            "doc": "Every function with the `load` prefix is an async function that loads something into the asset manager, and should return a promise that resolves upon load complete.\n"
        },
        {
            "name": "Info",
            "entries": [
                "width",
                "height",
                "center",
                "dt",
                "time",
                "isFocused",
                "focus",
                "isTouch",
                "mousePos",
                "mouseWorldPos",
                "mouseDeltaPos",
                "isKeyDown",
                "isKeyPressed",
                "isKeyPressedRepeat",
                "isKeyReleased",
                "isMouseDown",
                "isMousePressed",
                "isMouseReleased",
                "isMouseMoved",
                "shake",
                "camPos",
                "camScale",
                "camRot",
                "toScreen",
                "toWorld",
                "gravity",
                "layers",
                "cursor",
                "regCursor",
                "fullscreen",
                "isFullscreen",
                "keyIsDown",
                "keyIsPressed",
                "keyIsPressedRep",
                "keyIsReleased",
                "mouseIsDown",
                "mouseIsClicked",
                "mouseIsReleased",
                "mouseIsMoved",
                "focused"
            ],
            "doc": null
        },
        { "name": "Timer", "entries": ["wait", "loop"], "doc": null },
        { "name": "Audio", "entries": ["play", "burp", "volume", "audioCtx"], "doc": null },
        {
            "name": "Math",
            "entries": [
                "rand",
                "randi",
                "randSeed",
                "vec2",
                "rgb",
                "hsl2rgb",
                "quad",
                "choose",
                "chance",
                "lerp",
                "map",
                "mapc",
                "dir",
                "wave",
                "deg2rad",
                "rad2deg",
                "rng",
                "testLineLine",
                "testRectRect",
                "testRectLine",
                "testRectPoint"
            ],
            "doc": null
        },
        { "name": "Scene", "entries": ["scene", "go"], "doc": null },
        { "name": "Level", "entries": ["addLevel"], "doc": null },
        { "name": "Data", "entries": ["getData", "setData"], "doc": null },
        {
            "name": "Draw",
            "entries": [
                "drawSprite",
                "drawText",
                "drawRect",
                "drawLine",
                "drawLines",
                "drawTriangle",
                "drawCircle",
                "drawEllipse",
                "drawPolygon",
                "drawUVQuad",
                "drawFormattedText",
                "pushTransform",
                "popTransform",
                "pushTranslate",
                "pushScale",
                "pushRotate",
                "formatText"
            ],
            "doc": "Kaboom exposes all of the drawing interfaces it uses in the render components like `sprite()`, and you can use these drawing functions to build your own richer render components.\n\nAlso note that you have to put `drawXXX()` functions inside an `onDraw()` event or the `draw()` hook in component definitions which runs every frame (after the `update` events), or it'll be immediately cleared next frame and won't persist.\n\n```js\nonDraw(() => {\n\n\tdrawSprite({\n\t\tsprite: \"froggy\",\n\t\tpos: vec2(120, 160),\n\t\tangle: 90,\n\t})\n\n\tdrawLine({\n\t\tp1: vec2(0),\n\t\tp2: mousePos(),\n\t\twidth: 4,\n\t\tcolor: rgb(0, 0, 255),\n\t})\n\n})\n```\n\nThere's also the option to use Kaboom purely as a rendering library. Check out the [draw](/play?demo=draw) demo.\n"
        },
        {
            "name": "Debug",
            "entries": ["debug"],
            "doc": "By default kaboom starts in debug mode, which enables key bindings that calls out various debug utilities:\n\n- `f1` to toggle inspect mode\n- `f5` to take screenshot\n- `f6` to toggle recording\n- `f7` to slow down\n- `f8` to pause / resume\n- `f9` to speed up\n- `f10` to skip frame\n\nSome of these can be also controlled with stuff under the `debug` object.\n\nIf you want to turn debug mode off when releasing you game, set `debug` option to false in `kaboom()`\n"
        },
        {
            "name": "Misc",
            "entries": [
                "plug",
                "screenshot",
                "record",
                "ASCII_CHARS",
                "CP437_CHARS",
                "LEFT",
                "RIGHT",
                "UP",
                "DOWN",
                "RED",
                "GREEN",
                "BLUE",
                "YELLOW",
                "MAGENTA",
                "CYAN",
                "WHITE",
                "BLACK",
                "canvas"
            ],
            "doc": null
        }
    ]
}
